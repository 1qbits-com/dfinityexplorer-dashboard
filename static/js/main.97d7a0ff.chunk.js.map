{"version":3,"sources":["constants.js","theme/globalStyle.js","Components/ResponsiveComponent/ResponsiveComponent.js","Components/TrackablePage/TrackablePage.js","Components/DashCard/DashCard.js","Components/BlocksCard/BlocksCard.js","Components/BlockTimeCard/BlockTimeCard.js","Components/MessagesCard/MessagesCard.js","media/images/icpLogo.svg","Components/PriceCard/PriceCard.js","utils/breakpoint.js","Components/BarChart/BarChart.js","Components/BlocksChart/BlocksChart.js","Components/CanistersChart/CanistersChart.js","utils/roundDownDateToDay.js","Components/MessagesChart/MessagesChart.js","utils/roundDownDateToHour.js","Components/AreaChart/AreaChart.js","Components/PriceChart/PriceChart.js","Components/HomePage/HomePage.js","Components/PieChart/PieChart.js","utils/getLocationsByCountry.js","Components/CountriesChart/CountriesChart.js","Components/InfoTable/InfoTable.js","Components/CountriesTable/CountriesTable.js","Components/DataCentersTable/DataCentersTable.js","Components/EarthTooltipTable/EarthTooltipTable.js","Components/EarthTooltip/EarthTooltip.js","Components/DfinityEarth/dfinity-earth-day.jpg","Components/DfinityEarth/dfinity-earth-night.jpg","Components/DfinityEarth/DfinityEarth.js","Components/DataCentersPage/DataCentersPage.js","rosetta/RosettaApi.js","utils/getHashString.tsx","utils/getIcpStringFromE8s.tsx","utils/timeAgo.js","Components/TransactionPage/TransactionPage.js","Components/TablePager/TablePager.js","Components/PagedTable/PagedTable.tsx","Components/TransactionsPagedTable/TransactionsPagedTable.tsx","Components/TransactionsPage/TransactionsPage.js","utils/getRandomInt.js","utils/getRandomNumber.js","Components/DfinitySymbolD3/DfinitySymbolD3.js","Components/ImageLinkGrid/ImageLinkGrid.js","Components/AboutPage/banner-x-horizon.png","Components/AboutPage/dfinity-explorer-logo-large.png","Components/AboutPage/dfinity-logo-dark-mode.png","Components/AboutPage/dfinity-logo-light-mode.png","Components/AboutPage/github-octocat.png","Components/AboutPage/material-ui-logo.png","Components/AboutPage/nomics-logo-dark-mode.png","Components/AboutPage/nomics-logo-light-mode.png","Components/AboutPage/react-logo-text.png","Components/AboutPage/styled-components-logo-dark-mode.png","Components/AboutPage/styled-components-logo-light-mode.png","Components/AboutPage/AboutPage.js","Components/DEAppBar/dfinity-explorer-logo.png","Components/DEAppBar/DEAppBar.js","Components/Footer/Footer.js","App.js","index.js"],"names":["Constants","Object","freeze","URI_CDN_FONT_AWESOME","URI_CDN_GOOGLE_FONTS","URI_ABOUT_DFINITY","URI_ABOUT_NOMICS","URI_ABOUT_MATERIAL_UI","URI_ABOUT_REACT","URI_ABOUT_STYLED_COMPONENTS","URI_GITHUB_CONTRIBUTORS","URI_GITHUB_DFINITY_EXPLORER_PROJECT","URI_GITHUB_DYLAN","URI_GITHUB_MIT_LICENSE","URI_NASA_EXPLORER","URI_TWITTER_DFINITY_EXPLORER","COLOR_DFINITY_BLACK","COLOR_DFINITY_BLACK_LIGHTER","COLOR_DFINITY_BLACK_DARKER","COLOR_DFINITY_LIGHT_ORANGE","COLOR_DFINITY_DARK_ORANGE","COLOR_DFINITY_BLUE_50","COLOR_DFINITY_BLUE_100","COLOR_DFINITY_BLUE_200","COLOR_DFINITY_BLUE_300","COLOR_DFINITY_BLUE_400","COLOR_DFINITY_BLUE_500","COLOR_DFINITY_BLUE_600","COLOR_DFINITY_BLUE_700","COLOR_DFINITY_BLUE_800","COLOR_DFINITY_BLUE_900","COLOR_TEXT_LIGHT","COLOR_DARK_TEXT","COLOR_DARK_TEXT_FADED","COLOR_TEXT_DARKER","COLOR_TEXT_DARKEST","COLOR_LIGHT_TEXT_FADED","COLOR_DARK_BODY_DARKER_MAC_OS","COLOR_DARK_BODY_LIGHTER_MAC_OS","COLOR_DARK_BODY_LIGHTER_MAC_OS_ALPHA_85","COLOR_DARK_DRAWER_DIVIDER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_YOUTUBE","COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX","COLOR_DARK_TEXT_MAC_OS","COLOR_LIGHT_BODY_TEXT_GOOGLE","COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE","COLOR_LIGHT_CHART_GOOGLE","COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE","COLOR_LIGHT_DRAWER_ICON_GOOGLE","COLOR_LIGHT_DRAWER_TEXT_GOOGLE","COLOR_MATERIAL_PALETTE_LIGHT_GREEN_700_LIGHT","COLOR_TWITTER_BLUE","COLOR_TWITTER_GREEN","COLOR_TWITTER_ORANGE","COLOR_TWITTER_PURPLE","COLOR_GRAY_ON_WHITE","FONT_PRIMARY","MATERIAL_FONT_SIZE_H1","MATERIAL_FONT_SIZE_H2","MATERIAL_FONT_SIZE_H3","MATERIAL_FONT_SIZE_H4","MATERIAL_FONT_SIZE_H5","MATERIAL_FONT_SIZE_H6","MATERIAL_FONT_SIZE_SUBTITLE_1","MATERIAL_FONT_SIZE_SUBTITLE_2","MATERIAL_FONT_SIZE_BODY_1","MATERIAL_FONT_SIZE_BODY_2","MATERIAL_FONT_SIZE_BUTTON","MATERIAL_FONT_SIZE_CAPTION","MATERIAL_FONT_SIZE_OVERLINE","MATERIAL_CIRCULAR_INDICATOR_SIZE","MATERIAL_UI_ICON_BUTTON_FONT_SIZE","FONT_SIZE_TABLE_XS","BREAKPOINT_MIN_XS","BREAKPOINT_MAX_XS","BREAKPOINT_MIN_SM","BREAKPOINT_MAX_SM","BREAKPOINT_MIN_MD","BREAKPOINT_MAX_MD","BREAKPOINT_MIN_LG","BREAKPOINT_MAX_LG","BREAKPOINT_MIN_XL","BREAKPOINT_LG_MAX_WIDTH","DRAWER_WIDTH","FOOTER_HEIGHT","FOOTER_MARGIN_XS","FOOTER_MARGIN_SM_AND_UP","ICON_SVG_PATH_BLOCK","ICON_SVG_PATH_BLOCK_TIME","ICON_SVG_PATH_CPU_CORES","ICON_SVG_PATH_CYCLES_BURNED","ICON_SVG_PATH_DATA_CENTERS","ICON_SVG_PATH_MEMORY","ICON_SVG_PATH_MPS","ICON_SVG_PATH_NODES","ICON_SVG_PATH_PRICE","ICON_SVG_PATH_SUBNETS","ICON_SVG_PATH_THEME_LIGHT","ICON_SVG_PATH_THEME_DARK","ABOUT_PAGE_MARGIN_XS","ABOUT_PAGE_MARGIN_SM","ABOUT_PAGE_MARGIN_MD","ABOUT_PAGE_MARGIN_LG","DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP","DATA_CENTERS_PAGE_RIGHT_PANEL_WIDTH_MD_AND_UP","DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_SM_AND_UP","DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_XS","INFO_TABLE_ROW_HEIGHT_XS","INFO_TABLE_ROW_HEIGHT_SM_AND_UP","HOME_PAGE_MARGIN_XS","HOME_PAGE_MARGIN_SM_AND_UP","TABLE_ROW_HEIGHT_XS","TABLE_ROW_HEIGHT_SM_AND_UP","MINTING_ACCOUNT_NAME","ABOUT_PAGE_PROJECT_ICONS_HEIGHT","GOOGLE_ANALYTICS_TRACKING_ID","BLOCKS_CARD_POLL_INTERVAL_MS","BLOCKS_CHART_POLL_INTERVAL_MS","BLOCK_TIME_CARD_POLL_INTERVAL_MS","CYCLES_CARD_POLL_INTERVAL_MS","MESSAGES_CHART_POLL_INTERVAL_MS","MESSAGES_TIME_POLL_INTERVAL_MS","PRICE_POLL_INTERVAL_MS","NETWORK_ERROR_THRESHOLD","NOMICS_API_KEY","DFINITY_EARTH_MAP_CENTER","lat","lng","altitude","GlobalStyle","createGlobalStyle","props","isPageDataCenters","theme","colorDataCentersPageBackground","colorBodyBackground","themeLight","isDark","colorAboutBackgroundPrimary","colorAboutBackgroundSecondary","colorAboutHeaderText","colorAboutTwitterBackground","colorAppBarBackground","colorAppBarTextButton","colorAppBarDfinityText","colorAppBarExplorerText","colorBodyButtonBackground","colorBodyButtonText","colorBodyButtonHoverBackground","colorBodyButtonHoverText","colorBodySwitchTrackBackground","colorBodyText","colorBodyTextDim","colorBodyTextLink","colorDashCardBackground","colorDashCardIcon","colorDashCardIconOpacity","colorDataCentersCardBackground","colorDataCentersGlobeAtmosphere","colorDataCentersGlobePoint","colorDataCentersTooltip","colorDrawerBackground","colorDrawerBackgroundTransparent","colorDrawerDivider","colorDrawerIcon","colorDrawerIconTextSelected","colorDrawerText","colorChartBackground","colorChartTooltipBackground","colorChartAxes","colorChartGrid","colorChartText","colorChartLine","colorChartActiveDotStroke","colorIconButtonHover","colorTableBackgroundPrimary","colorTableRowBorder","colorTableTextDim","colorFooterBackground","colorFooterTextIcon","colorPieChart","colorSearchText","colorSearchIcon","opacityActionDisabled","opacityActionHover","themeDark","ResponsiveComponent","handleWindowResize","bind","throttledHandleWindowResize","throttle","window","addEventListener","this","removeEventListener","forceUpdate","Component","TrackablePage","scrollTo","pathName","location","pathname","search","trackPage","prevProps","currentPathName","nextPathName","ReactGA","set","page","pageview","GridNoWrap","styled","Grid","ImgDiv","div","ImgCard","img","SvgIconCard","SvgIcon","cardindex","TypographyTitle","Typography","TypographyValue","DashCard","cardIndex","className","svgIconPath","iconImageSrc","title","value","Paper","elevation","container","direction","justify","alignItems","wrap","item","d","src","alt","noWrap","Error","BlocksCard","state","blockHeight","prevBlockHeight","error","pollForBlockHeight","interval","setInterval","clearInterval","blockHeightText","duration","start","end","useEasing","formattingFn","toLocaleString","axios","get","then","res","data","block","length","newBlockHeight","parseInt","setState","prevState","catch","BlockTimeCard","blocksPerSecond","pollForBlockTime","blockTimeText","toFixed","block_rate","parseFloat","MessagesCard","messagesPerSecond","pollForMessagesTime","messagesTimeText","message_execution_rate","PriceCard","price","pollForPrice","priceText","icpLogo","url","date","toISOString","split","replace","Breakpoints","XS","SM","MD","LG","XL","getBreakpoint","isDesktopDrawerOpen","drawerWidth","matchMedia","matches","isBreakpointDesktop","breakpoint","isBreakpointGreaterOrEqualTo","StyledPaper","StyledBarChart","RechartsBarChart","BarChart","chartHeight","getData","getTitle","ResponsiveContainer","width","height","margin","top","right","left","bottom","style","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","stroke","vertical","XAxis","dataKey","getDataKeyX","tick","fill","tickFormatter","getGetTickX","tickMargin","tickSize","YAxis","getGetTickY","tickLine","Tooltip","labelFormatter","getGetTooltipX","formatter","getGetTooltipY","contentStyle","background","border","borderRadius","fontSize","boxShadow","shadows","itemStyle","color","labelStyle","cursor","animationDuration","Bar","type","getDataKeyY","strokeWidth","fillOpacity","getAnimationDuration","BlocksChart","blocksData","prevDate","pollForInitialBlocks","pollForMoreBlocks","Date","toLocaleTimeString","k","Number","isInteger","endDate","getTime","startDate","seconds","Math","floor","values","prevHeight","slice","map","numBlocks","max","curHeight","blocks","concat","propTypes","PropTypes","number","isRequired","object","withTheme","CanistersChart","canistersData","millisecondsInDay","roundDownDateToDay","setDate","getDate","running_canisters","prevTotal","total","numCanisters","toLocaleDateString","timeZone","MessagesChart","messagesData","millisecondsInHour","roundDownDateToHour","messages_count","numMessages","hour","minute","StyledAreaChart","RechartsAreaChart","PriceChart","priceData","dateToRfc3339","candle","timestamp","close","console","log","dataMin","dataMax","ceil","year","month","day","domain","getDomainMinY","getDomainMaxY","Area","activeDot","r","GridSection","standard","easing","easeInOut","GridSectionCharts2","GridCard","GridChart","CardBlocks","CardBlockTime","CardMessages","CardPrice","HomePage","getSectionCards","getSectionCharts","timeout","delay","StyledPieChart","RechartsPieChart","PieChart","Pie","entry","Cell","mapKey","getLocationsByCountry","a","cityToCountryMap","Map","locations","city","name","numNodes","total_nodes","filter","locationsByCountryMap","forEach","country","locationsByCountry","push","CountriesChart","Array","from","sort","x","y","index","string","StyledSwitch","Switch","StyledTable","Table","StyledTableCell","TableCell","showborders","isaltcolor","usesmallfontforxs","StyledTableRow","TableRow","TableRowFooter","TableCellHeader","InfoTable","TableHead","getHeaderRowElement","TableBody","getBodyRowElements","TableFooter","getFooterRowElement","headerRow","useSmallFontForXS","cell","isAltColor","align","isRightAligned","padding","size","getBodyRows","bodyRow","getBodyRowElement","rowIndex","showRowBorders","cells","switch","checked","isChecked","edge","onChange","showFooter","CountriesTable","bodyRows","numDataCenters","reduce","accumulator","currentValue","DataCentersTable","memoryTotal","count","numberOfBoundaryNodes","numberOfCpuCores","numberOfDataCenters","numberOfNodes","numberOfNodeProviders","numberOfSubnets","getNumberOfDataCenters","getNumberOfNodeProviders","getNumberOfSubnets","getNumberOfNodes","getNumberOfBoundaryNodes","getNumberOfCpuCores","getMemoryTotal","getRowCells","getRowCellsMemoryTotal","getRowCellsAvgNodes","getRowCellsAvgCores","getRowCellsAvgMemory","getRowCellsSimulationSwitch","ic_memory_total","boundary_nodes_count","ic_cpu_cores","ic_nodes_count","node_providers","ic_subnet_total","numberOf","description","avgCoresText","avgCores","round","avgMemoryText","avgNodesText","avgNodes","avgNodesPercent","memoryTotalText","handleSimulationSwitchChange","isSimulationOn","EarthTooltipTable","dataCenters","dataCenter","KonvaDiv","TableDiv","TableEarthTooltip","EarthTooltip","tooltipCardWidth","lineXYlength","xCoordMult","cityCircleARadius","lineCap","lineJoin","points","DfinityEarthWithSize","isThemeDark","DfinityEarth","globeEl","tooltipInterval","handleZoom","throttledHandleZoom","cities","subnetArcs","zoomFactor","tooltipCity","pointOfView","node_operator","key","latitude","longitude","dc","locationsByCityMap","locationsByCity","citiesWithSameName","find","calculateDistance","subnets","Set","i","nodes","_","random","add","subnetIndex","subnet","j","startLat","startLng","endLat","endLng","arcDashInitialGap","tooltipX","tooltipY","arcOpacity","showGlobe","purple","pink","darkOrange","lightOrange","blue","arcColorPairs","coords","getScreenCoords","when","ref","el","globeImageUrl","dfinityEarthNight","dfinityEarthDay","showAtmosphere","atmosphereColor","atmosphereAltitude","onGlobeReady","controls","maxDistance","animateIn","backgroundColor","onZoom","pointerEventsFilter","obj","isArc","parent","__globeObjType","isPoint","arcsData","arcStroke","arcDashLength","arcDashGap","subnetArc","arcDashAnimateTime","arcColor","arcsTransitionDuration","labelsData","labelColor","labelText","labelDotRadius","onLabelHover","pointsData","pointLabel","pointColor","pointAltitude","pointRadius","pointsMerge","pov","min","lat1","lng1","lat2","lng2","dLat","deg2rad","dLon","sin","cos","atan2","sqrt","deg","PI","ChartCountries","GridEarth","GridPanel","GridPanelCard","GridPanelCardFirst","GridPanelCardLast","TableCountries","TableDataCenters","ContainerDiv","GlobeDiv","PanelDiv","DataCentersPage","handleSetIsPageDataCenters","getGlobe","getPanel","event","target","bool","JSONbig","jsonBigint","strict","RosettaErrorType","NotFound","Timeout","NetworkError","RosettaError","message","status","errorType","Transaction","rosettaTransaction","blockIndex","hash","transaction_identifier","timestampMs","metadata","toNumber","operations","account1Address","account","address","amount","BigNumber","isZero","negated","account2Address","fee","memo","RosettaApi","create","baseURL","method","transformRequest","stringify","transformResponse","parse","headers","networkIdentifier","networksList","network_identifiers","blockchain","accountAddress","accountBalanceByAddress","response","balances","isAxiosError","undefined","networkStatus","current_block_identifier","transactionHash","transactionsByHash","responseTransactions","transactions","transaction","block_identifier","limit","maxBlockIndex","transactionCount","getTransactionByBlock","transactionsByAccount","Promise","all","blockTransaction","reverse","blockByIndex","request","network_identifier","account_identifier","getHashString","maxLength","substring","substr","getIcpStringFromE8s","icpE8s","shouldRound","dividedToIntegerBy","TimeAgo","addDefaultLocale","en","timeAgo","DivCircularProgress","zIndex","modal","StyledCircularProgress","CircularProgress","TableInfo","TypographyBody","TransactionPage","Link","icpToUsd","isLoading","rosettaError","match","params","rosettaApi","getTransaction","result","errorMessage","in","mountOnEnter","unmountOnExit","hashMaxLength","time","to","format","StyledToolbar","Toolbar","TypographyCaption","TypographyRows","TypographyCount","StyledSelect","other","Select","classes","icon","root","selectMenu","StyledMenuItem","MenuItem","StyledIconButton","IconButton","fade","StyledIconButtonNotLast","TablePagerActions","onChangePage","pageIndex","pageSize","lastPage","onClick","disabled","aria-label","TablePager","newLastPage","colSpan","getToolbar","getRowsSelectCount","getActions","onChangePageSize","rowsPerPageOptions","rowsText","input","InputBase","MenuProps","PaperProps","rowsPerPageOption","getCountText","t","m","loading","StyledLink","PagedTable","columnWidths","isNumeric","link","show","TableContainer","TransactionsPagedTable","currentAccountAddress","getTransactions","transactionsCount","useState","setIsLoading","setRosettaError","setTransactions","useEffect","fetchData","hashLink","fromLink","toLink","GridPagedTable","TransactionsPage","handleChangePage","handleChangePageSize","getLastBlockIndex","getRandomInt","getRandomNumber","DfinitySymbolD3","dragStarted","dragged","dragEnded","rotate","stage","renderer","linksGraphics","simulationWidth","logoMode","simulationHeight","scaleSimulationToPixi","centerX","centerY","scaleToWindow","numSymbolNodes","numVertices","forceManyBodyStrengthSymbolNodes","forceManyBodyStrengthNonSymbolNodes","linkDistance","nodeStrokeWidth","nodeRadius","nodeRadiusSelected","nodeSelectedFillColorArray","nodeSelectedStrokeColorArray","nodeOpacity","nodeOpacitySelected","linkStrokeWidth","linkStrokeWidthIncreaseAtMagnitude","symbolHeightMultiplier","rotateOffset","rotateTimeMs","rotateAmount","selectedNodeIndex","newBlockNodeStartTime","newBlockLinksStartTime","newBlockNodeTimerMs","newBlockLinksTimerMs","draw","destroy","pixiResizeRenderer","nodesData","node","pixiDrawNode","element","addNodes","addLinks","createSimulation","pixiSetup","pos","getNodePosition","scale","linksData","indexSymbol","indexSymbolNext","addLink","vertexShapeTop","indexShapeTop","indexShapeTopNext","indexShapeAlmostTop","indexShapeNext","indexSpiralNext","indexSource","indexTarget","strength","opacity","toString","linkCount","simulation","d3","force","link_force","_strength","source","distance","on","alphaDecay","PIXI","skipHello","antialias","transparent","resolution","autoResize","appendChild","view","graphics","addChild","call","subject","resize","position","nodeStrokeColor","nodeFillColor","selectedNodeMagnitude","rgbNumberFromArray","gradientColor","getNodeStrokeColorArray","clear","lineStyle","beginFill","filters","drawCircle","linkMagnitude","linkOpacity","alpha","getColorArray","moveTo","lineTo","numIndices","transitionIndicesSmall","transitionIndicesGradual","lastPurpleIndex","lastPinkIndex","lastDarkOrangeIndex","lastLightOrangeIndex","lastBlueIndex","percentage","color1","color2","percent","p1","p2","array","active","alphaTarget","restart","fx","fy","_fx","_fy","pixiMoveNode","elapsedMs","pixiDrawLink","endFill","render","elapsed","ImageLinkGrid","widths","maxHeight","calculateMaxImageDimensions","arePropsChanged","imageLinks","imageLink","justifyRow","marginBetweenRows","perRow","containerHeight","imageLinkGrid","maxWidthColumn","row","isShortRow","marginTop","columnIndex","href","rel","Image","onload","currentTarget","naturalWidth","naturalHeight","PaperParallax","GridParallax","TypographyParallax","GridSectionPrimary","GridSectionSecondary","GridItem","GridImageLeft","GridImageRight","GridSymbolLeft","GridText","GridTextLeft","GridTextRight","TypographyHeading","StyledA","ImgSection","SpanHeart","span","PaperTwitter","ImageLinkGridThanks","AboutPage","getHeader","getSectionMission","getSectionOpenSource","getSectionCommunity","getSectionContributors","getSectionThanks","bgImage","bannerXHorizon","bgImageAlt","bgImageStyle","getDfinitySymbolD3Width","dfinityExplorerLogo","sourceType","screenName","options","noFooter","githubOctocat","imagesPerRow","reactHeight","styledComponentsHeight","materialUiHeight","nomicsHeight","dfinityHeight","reactLogo","styledComponentsLogoDark","styledComponentsLogoLight","materialUiLogo","nomicsLogoDark","nomicsLogoLight","dfinityLogoDark","dfinityLogoLight","contentWidth","innerWidth","StyledAppBar","AppBar","drawer","ImgProductIcon","TypographyAppName","TypographyDfinity","TypographyBorder","TypographyExplorer","StyledMenuIcon","MenuIcon","StyledSwipeableDrawer","SwipeableDrawer","paper","StyledDrawer","Drawer","isdesktopdrawertransparent","StyledDivider","Divider","DrawerListItemIcon","ListItemIcon","DrawerSvgIcon","DrawerListItemText","ListItemText","primary","DrawerListItem","ListItem","selected","DEAppBar","toolbarDivRef","React","createRef","isActiveRoute","getToolbarDefaultContent","getDrawer","handleAppBarResize","current","offsetHeight","isMobileDrawerOpen","handleMobileDrawerMenuClick","getMenuButton","getAppTitle","handleDesktopDrawerMenuClick","Zoom","textDecoration","getProductIconHeight","BREAKPOINT_MAX_XL","isBreakpointLessOrEqualTo","isDesktopDrawerTransparent","variant","open","getDrawerContent","onOpen","onClose","List","button","component","routeName","func","routerRef","withRouter","FooterToolbar","OneThirdGrid","LeftThirdGrid","RightThirdGrid","FooterTypography","FooterA","AwesomeIconButtonGrid","AwesomeIconButton","AwesomeIcon","Icon","ThemeCheckbox","Checkbox","ThemeSvgIcon","Footer","loadCSS","document","querySelector","getCopyrightText","getNomicsText","checkedIcon","handleThemeChange","initialize","anonymizeIp","ContentDiv","enteringScreen","leavingScreen","ContentGrid","appbarheight","FooterDiv","App","appBarHeight","isDesktopDrawerEnabled","setRouterRef","getTheme","onTransitionEnd","dispatchEvent","Event","exact","path","contentRect","ReactDOM","getElementById"],"mappings":";kSA0IeA,EApIGC,OAAOC,OAAO,CAC9BC,qBACE,qFAEFC,qBACE,6EACFC,kBAAmB,uBACnBC,iBAAkB,sBAClBC,sBAAuB,2BACvBC,gBAAiB,uBACjBC,4BAA6B,qCAC7BC,wBAAyB,iDACzBC,oCAAqC,+DACrCC,iBAAkB,8BAClBC,uBAAwB,yEACxBC,kBAAmB,kDACnBC,6BAA8B,sCAE9BC,oBAAqB,kBACrBC,4BAA6B,kBAC7BC,2BAA4B,kBAC5BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,sBAAuB,UACvBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,uBAAwB,UACxBC,iBAAkB,UAClBC,gBAAiB,UACjBC,sBAAuB,qBACvBC,kBAAmB,qBACnBC,mBAAoB,qBACpBC,uBAAwB,kBACxBC,8BAA+B,UAC/BC,+BAAgC,UAChCC,wCAAyC,yBACzCC,iCAAkC,UAClCC,kCAAmC,UACnCC,oCAAqC,UACrCC,uBAAwB,UACxBC,6BAA8B,UAC9BC,iCAAkC,UAClCC,yBAA0B,UAC1BC,kCAAmC,UACnCC,+BAAgC,UAChCC,+BAAgC,UAChCC,6CAA8C,UAC9CC,mBAAoB,qBACpBC,oBAAqB,oBACrBC,qBAAsB,oBACtBC,qBAAsB,qBACtBC,oBAAqB,qBACrBC,aAAc,qBACdC,sBAAuB,OACvBC,sBAAuB,UACvBC,sBAAuB,OACvBC,sBAAuB,WACvBC,sBAAuB,SACvBC,sBAAuB,UACvBC,8BAA+B,OAC/BC,8BAA+B,WAC/BC,0BAA2B,OAC3BC,0BAA2B,WAC3BC,0BAA2B,WAC3BC,2BAA4B,UAC5BC,4BAA6B,WAC7BC,iCAAkC,GAClCC,kCAAmC,GACnCC,mBAAoB,YACpBC,kBAAmB,EACnBC,kBAAmB,IACnBC,kBAAmB,IACnBC,kBAAmB,IACnBC,kBAAmB,IACnBC,kBAAmB,KACnBC,kBAAmB,KACnBC,kBAAmB,KACnBC,kBAAmB,KACnBC,wBAAyB,KACzBC,aAAc,IACdC,cAAe,GACfC,iBAAkB,EAClBC,wBAAyB,GACzBC,oBAAqB,+KACrBC,yBAA0B,yVAC1BC,wBAAyB,6iBACzBC,4BAA6B,y2DAC7BC,2BAA4B,4vHAC5BC,qBAAsB,qqDACtBC,kBAAmB,4EACnBC,oBAAqB,0qBACrBC,oBAAqB,sXACrBC,sBAAuB,uuDACvBC,0BAA2B,2qBAC3BC,yBAA0B,oYAC1BC,qBAAsB,EACtBC,qBAAsB,GACtBC,qBAAsB,GACtBC,qBAAsB,IACtBC,2CAA4C,IAC5CC,8CAA+C,IAC/CC,+CAAgD,IAChDC,wCAAyC,IACzCC,yBAA0B,GAC1BC,gCAAiC,GACjCC,oBAAqB,EACrBC,2BAA4B,GAG5BC,oBAAqB,GACrBC,2BAA4B,GAC5BC,qBAAsB,kBACtBC,gCAAiC,GACjCC,6BAA8B,iBAC9BC,6BAA8B,IAC9BC,8BAA+B,IAC/BC,iCAAkC,IAClCC,6BAA8B,IAC9BC,gCAAiC,IACjCC,+BAAgC,IAChCC,uBAAwB,IACxBC,wBAAyB,GACzBC,eAAgB,mCAChBC,yBAA0B,CAAEC,IAAK,QAAaC,KAAM,MAAQC,SAAU,OC3H3DC,EAAcC,YAAH,oGAKlB,SAAAC,GAAK,OAAIA,EAAMC,kBACbD,EAAME,MAAMC,+BAAiCH,EAAME,MAAME,uBAQpDC,EAAa,CAExBC,QAAQ,EACRC,4BAA6B,UAC7BC,8BAA+B,UAC/BC,qBAAsB,UACtBC,4BAA6B,UAC7BC,sBAAuB,UACvBC,sBAAuB/I,EAAUoC,uBACjC4G,uBAAwBhJ,EAAU4C,6BAClCqG,wBAAyBjJ,EAAU4B,uBACnC2G,oBAAqB,UACrBW,0BAA2BlJ,EAAU4B,uBACrCuH,oBAAqBnJ,EAAU+B,iBAC/BqH,+BAAgCpJ,EAAU0B,uBAC1C2H,yBAA0BrJ,EAAU+B,iBACpCuH,+BAAgC,KAChCC,cAAevJ,EAAU4C,6BACzB4G,iBAAkBxJ,EAAU6C,iCAC5B4G,kBAAmBzJ,EAAU4B,uBAC7B8H,wBAAyB,UACzBC,kBAAmB,CAAC3J,EAAU4B,uBAAwB,UAAW,UAAW,WAC5EgI,yBAA0B,EAC1BC,+BAAgC,4BAChCC,gCAAiC9J,EAAU4B,uBAC3CmI,2BAA4B/J,EAAUkD,6CACtCoF,+BAAgC,UAChC0B,wBAAyBhK,EAAUkD,6CACnC+G,sBAAuB,UACvBC,iCAAkC,4BAClCC,mBAAoBnK,EAAU+C,kCAC9BqH,gBAAiBpK,EAAUgD,+BAC3BqH,4BAA6BrK,EAAU4B,uBACvC0I,gBAAiBtK,EAAUiD,+BAC3BsH,qBAAsB,UACtBC,4BAA6B,4BAC7BC,eAAgBzK,EAAU6C,iCAC1B6H,eAAgB1K,EAAU+C,kCAC1B4H,eAAgB3K,EAAU6C,iCAC1B+H,eAAgB5K,EAAU4B,uBAC1BiJ,0BAA2B,UAC3BC,qBAAsB,UACtBC,4BAA6B,UAC7BC,oBAAqBhL,EAAU+C,kCAC/BkI,kBAAmB,UACnBC,sBAAuB,UACvBC,oBAAqB,UACrBC,cAAe,CACbpL,EAAUyB,uBACVzB,EAAU0B,uBACV1B,EAAU2B,uBACV3B,EAAU4B,uBACV5B,EAAU6B,uBACV7B,EAAU8B,uBACV9B,EAAUsB,uBACVtB,EAAUuB,uBACVvB,EAAUwB,wBACZ6J,gBAAiBrL,EAAU4C,6BAC3B0I,gBAAiB,UACjBC,sBAAuB,IACvBC,mBAAoB,KAMTC,EAAY,CACvBhD,QAAQ,EACRC,4BAA6B1I,EAAUqC,8BACvCsG,8BAA+B3I,EAAUsC,+BACzCsG,qBAAsB,UACtBC,4BAA6B7I,EAAUsC,+BACvCwG,sBAAuB9I,EAAUsC,+BACjCyG,sBAAuB/I,EAAUiC,sBACjC+G,uBAAwBhJ,EAAUgC,gBAClCiH,wBAAyBjJ,EAAUmB,2BACnCoH,oBAAqBvI,EAAUqC,8BAC/B6G,0BAA2BlJ,EAAU2B,uBACrCwH,oBAAqBnJ,EAAU2C,uBAC/ByG,+BAAgCpJ,EAAU0B,uBAC1C2H,yBAA0BrJ,EAAU+B,iBACpCuH,+BAAgC,UAChCC,cAAevJ,EAAU2C,uBACzB6G,iBAAkBxJ,EAAU2C,uBAC5B8G,kBAAmBzJ,EAAU2B,uBAC7B+H,wBAAyB1J,EAAUsC,+BACnCqH,kBAAmB,CAAC,UAAW,UAAW,UAAW,WACrDC,yBAA0B,GAC1BC,+BAAgC7J,EAAUuC,wCAC1CuH,gCAAiC9J,EAAU2B,uBAC3CoI,2BAA4B/J,EAAU2B,uBACtC2G,+BAAgC,UAChC0B,wBAAyBhK,EAAU2B,uBACnCsI,sBAAuBjK,EAAUsC,+BACjC4H,iCAAkClK,EAAUuC,wCAC5C4H,mBAAoBnK,EAAUyC,kCAC9B2H,gBAAiBpK,EAAUiC,sBAC3BoI,4BAA6B,UAC7BC,gBAAiBtK,EAAUiC,sBAC3BsI,qBAAsBvK,EAAUsC,+BAChCkI,4BAA6B,yBAC7BC,eAAgBzK,EAAU0C,oCAC1BgI,eAAgB1K,EAAUwC,iCAC1BmI,eAAgB3K,EAAUiC,sBAC1B2I,eAAgB5K,EAAU2B,uBAC1BkJ,0BAA2B7K,EAAUsC,+BACrCwI,qBAAsB9K,EAAUgC,gBAChC+I,4BAA6B/K,EAAUsC,+BACvC0I,oBAAqBhL,EAAUyC,kCAC/BwI,kBAAmB,UACnBC,sBAAuBlL,EAAUsC,+BACjC6I,oBAAqBnL,EAAU0C,oCAC/B0I,cAAe,CACbpL,EAAU6B,uBACV7B,EAAU4B,uBACV5B,EAAU2B,uBACV3B,EAAU0B,uBACV1B,EAAUyB,uBACVzB,EAAUwB,uBACVxB,EAAUuB,uBACVvB,EAAUsB,uBACVtB,EAAU8B,wBAEZuJ,gBAAiBrL,EAAU4C,6BAC3B0I,gBAAiB,UACjBC,sBAAuB,GACvBC,mBAAoB,I,4ECpGPE,E,kDAnCb,aAAe,IAAD,8BACZ,gBAGKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAG1B,EAAKC,4BAA8BC,YAAS,KAAK,EAAM,EAAKH,oBAPhD,E,qDAcd,WACEI,OAAOC,iBAAiB,SAAUC,KAAKJ,+B,kCAOzC,WACEE,OAAOG,oBAAoB,SAAUD,KAAKJ,+B,gCAO5C,WACEI,KAAKE,kB,GApCyBC,aC2CnBC,E,uKAtCb,WACE,0EAGAN,OAAOO,SAAS,EAAG,GAEnB,IAAMC,EAAWN,KAAK9D,MAAMqE,SAASC,SAAWR,KAAK9D,MAAMqE,SAASE,OACpET,KAAKU,UAAUJ,K,gCASjB,SAAmBK,GACjB,IAAMC,EAAkBD,EAAUJ,SAASC,SAAWG,EAAUJ,SAASE,OACnEI,EAAeb,KAAK9D,MAAMqE,SAASC,SAAWR,KAAK9D,MAAMqE,SAASE,OAEpEG,IAAoBC,GACtBb,KAAKU,UAAUG,K,uBAQnB,SAAUP,GAGNQ,IAAQC,IAAI,CAAEC,KAAMV,IACpBQ,IAAQG,SAASX,O,GAtCKb,G,mDCKtByB,EAAaC,YAAOC,IAAPD,CAAH,oKAOVE,EAASF,IAAOG,IAAV,+PAcNC,GAAUJ,IAAOK,IAAV,sFAOPC,GAAcN,YAAOO,IAAPP,CAAH,0NAKF,SAAAjF,GAAK,OAAIA,EAAME,MAAMuB,4BACvB,SAAAzB,GAAK,OAAIA,EAAME,MAAMsB,kBAAkBxB,EAAMyF,cAIpDC,GAAkBT,YAAOU,IAAPV,CAAH,4GAEFpN,EAAUwD,cAMvBuK,GAAkBX,YAAOU,IAAPV,CAAH,4GAEFpN,EAAUwD,cA+GdwK,G,4JAjDb,WAAU,IAAD,EAQH/B,KAAK9D,MANP8F,EAFK,EAELA,UACAC,EAHK,EAGLA,UACAC,EAJK,EAILA,YACAC,EALK,EAKLA,aACAC,EANK,EAMLA,MACAC,EAPK,EAOLA,MAGF,OACE,cAACC,EAAA,EAAD,CAAOL,UAAWA,EAAWM,UAAW,EAAxC,SACE,eAACnB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASC,KAAK,SAA9E,UACE,cAACxB,EAAA,EAAD,CAAMyB,MAAI,EAAV,SAC2B,kBAAhBX,EACP,cAACT,GAAD,CAAaE,UAAWK,EAAxB,SACE,sBAAMc,EAAGZ,MAEX,cAACb,EAAD,UACE,cAACE,GAAD,CACEwB,IAAKZ,EACLa,IAAI,iBAKZ,eAAC9B,EAAD,CAAYsB,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,aAArE,UAEE,cAACvB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAAhE,SACE,cAACzB,EAAD,CAAY2B,MAAI,EAAhB,SACE,cAACjB,GAAD,CAAiBK,UAAWA,EAAWgB,QAAM,EAA7C,SACGb,QAIP,cAAChB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAAhE,SACE,cAACzB,EAAD,CAAY2B,MAAI,EAAhB,SACE,cAACf,GAAD,CAAiBG,UAAWA,EAAWgB,QAAM,EAA7C,SACGZ,mB,8BAtDjB,SAAuBnG,GACrB,OAAKA,EAAMgG,aAAgBhG,EAAMiG,aAG7BjG,EAAMgG,aAA4C,kBAAtBhG,EAAMgG,YAC7B,IAAIgB,MAAM,8CAEfhH,EAAMiG,cAA8C,kBAAvBjG,EAAMiG,aAC9B,IAAIe,MAAM,oDADnB,EALS,IAAIA,MAAM,uD,GAvCA/C,aCwDRgD,G,kDAhGb,WAAYjH,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXC,aAAc,EACdC,iBAAkB,EAClBC,MAAO,GANQ,E,qDAcnB,WAAqB,IAAD,OAElBvD,KAAKwD,qBACLxD,KAAKyD,SAAWC,aACd,WAAQ,EAAKF,uBACbzP,EAAUoH,gC,kCAOd,WACEwI,cAAc3D,KAAKyD,UACnBzD,KAAKyD,SAAW,O,oBAQlB,WAAU,IAIJG,EAJG,EACwB5D,KAAK9D,MAA9B8F,EADC,EACDA,UAAWC,EADV,EACUA,UADV,EAEuCjC,KAAKoD,MAA7CC,EAFC,EAEDA,YAAaE,EAFZ,EAEYA,MAAOD,EAFnB,EAEmBA,gBAQ1B,OALIC,GAASxP,EAAU2H,wBACrBkI,EAAkB,iBACM,IAAjBP,IACPO,EAAkB,cAGlB,cAAC,GAAD,CACE3B,UAAWA,EACXD,UAAWA,EACXI,MAAM,SACNC,MAAOuB,GAEL,cAAC,IAAD,CACEC,UAAW9P,EAAUoH,6BAA+B,KAAO,IAC3D2I,MAAOR,EACPS,IAAKV,EACLW,WAAW,EACXC,aAAc,SAAA5B,GAAK,OAAIA,EAAM6B,oBAGjChC,YAAanO,EAAUuF,wB,gCAS7B,WAAsB,IAAD,OAGnB6K,IAAMC,IAFG,yDAGNC,MAAK,SAAAC,GACJ,GAA8B,IAA1BA,EAAIC,KAAKC,MAAMC,QAA6C,IAA7BH,EAAIC,KAAKC,MAAM,GAAGC,OAAc,CAAC,IAC5DpB,EAAgB,EAAKD,MAArBC,YACAqB,EAAiBC,SAASL,EAAIC,KAAKC,MAAM,GAAG,IAC9CE,EAAiBrB,GACnB,EAAKuB,UAAS,SAAAC,GAAS,MAAK,CAC1BvB,iBACiC,IAA/BuB,EAAUvB,gBAAyBuB,EAAUxB,YAAcqB,EAC7DrB,YAAaqB,EACbnB,MAAO,UAKduB,OAAM,WACL,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BtB,MAAOsB,EAAUtB,MAAQ,a,GA3GTpD,aCkGX4E,G,kDAlFb,WAAY7I,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACX4B,iBAAkB,EAClBzB,MAAO,GALQ,E,qDAanB,WAAqB,IAAD,OAElBvD,KAAKiF,mBACLjF,KAAKyD,SAAWC,aACd,WAAQ,EAAKuB,qBACblR,EAAUsH,oC,kCAOd,WACEsI,cAAc3D,KAAKyD,UACnBzD,KAAKyD,SAAW,O,oBAQlB,WAAU,IAIJyB,EAJG,EACwBlF,KAAK9D,MAA9B8F,EADC,EACDA,UAAWC,EADV,EACUA,UADV,EAE0BjC,KAAKoD,MAAhC4B,EAFC,EAEDA,gBAUN,OANEE,EANK,EAEgB3B,OAGVxP,EAAU2H,wBACL,iBACY,IAArBsJ,EACS,aAEAA,EAAgBG,QAAQ,GAAK,OAG7C,cAAC,GAAD,CACElD,UAAWA,EACXD,UAAWA,EACXI,MAAM,aACNC,MAAO6C,EACPhD,YAAanO,EAAUwF,6B,8BAS7B,WAAoB,IAAD,OAEjB4K,IAAMC,IADG,8DAENC,MAAK,SAAAC,GACJ,GAAmC,IAA/BA,EAAIC,KAAKa,WAAWX,QAAkD,IAAlCH,EAAIC,KAAKa,WAAW,GAAGX,OAAc,CAC3E,IAAMO,EAAkBK,WAAWf,EAAIC,KAAKa,WAAW,GAAG,IAC1D,EAAKR,SAAS,CACZI,gBAAiBA,EACjBzB,MAAO,QAIZuB,OAAM,WACL,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BtB,MAAOsB,EAAUtB,MAAQ,a,GA7FPpD,aCoGbmF,G,kDAnFb,WAAYpJ,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXmC,mBAAoB,EACpBhC,MAAO,GALQ,E,qDAanB,WAAqB,IAAD,OAElBvD,KAAKwF,sBACLxF,KAAKyD,SAAWC,aACd,WAAQ,EAAK8B,wBACbzR,EAAUyH,kC,kCAOd,WACEmI,cAAc3D,KAAKyD,UACnBzD,KAAKyD,SAAW,O,oBAQlB,WAAU,IAIJgC,EAJG,EACwBzF,KAAK9D,MAA9B8F,EADC,EACDA,UAAWC,EADV,EACUA,UADV,EAE4BjC,KAAKoD,MAAlCmC,EAFC,EAEDA,kBAUN,OANEE,EANK,EAEkBlC,OAGZxP,EAAU2H,wBACF,iBACW,IAAvB6J,EACY,aAEAA,EAAkBJ,QAAQ,GAAK,OAGlD,cAAC,GAAD,CACElD,UAAWA,EACXD,UAAWA,EACXI,MAAM,eACNC,MAAOoD,EACPvD,YAAanO,EAAU6F,sB,iCAS7B,WAAuB,IAAD,OAGpBuK,IAAMC,IADJ,0EAECC,MAAK,SAAAC,GACJ,GAA+C,IAA3CA,EAAIC,KAAKmB,uBAAuBjB,QAAgBH,EAAIC,KAAKmB,uBAAuB,GAAGjB,QAAU,EAAG,CAClG,IAAMc,EAAoBF,WAAWf,EAAIC,KAAKmB,uBAAuB,GAAG,IACxE,EAAKd,SAAS,CACZW,kBAAmBA,EACnBhC,MAAO,QAIZuB,OAAM,WACL,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BtB,MAAOsB,EAAUtB,MAAQ,a,GA9FRpD,aChBZ,OAA0B,oCCgI1BwF,G,kDA/Fb,WAAYzJ,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXwC,MAAO,EACPrC,MAAO,GALQ,E,qDAanB,WAAqB,IAAD,OAElBvD,KAAK6F,eACL7F,KAAKyD,SAAWC,aACd,WAAQ,EAAKmC,iBACb9R,EAAU0H,0B,kCAOd,WACEkI,cAAc3D,KAAKyD,UACnBzD,KAAKyD,SAAW,O,oBAQlB,WAAU,IAIJqC,EAJG,EACwB9F,KAAK9D,MAA9B8F,EADC,EACDA,UAAWC,EADV,EACUA,UADV,EAEgBjC,KAAKoD,MAAtBwC,EAFC,EAEDA,MAUN,OANEE,EANK,EAEMvC,OAGAxP,EAAU2H,wBACT,gBACK,IAAVkK,EACK,aAEA,IAAMA,EAAMT,QAAQ,GAGhC,cAAC,GAAD,CACElD,UAAWA,EACXD,UAAWA,EACXI,MAAM,cACNC,MAAOyD,EACP3D,aAAc4D,O,0BASpB,WAAgB,IAAD,OACPC,EAAG,0DAC4CjS,EAAU4H,eADtD,wBAETwI,IAAMC,IAAI4B,GACP3B,MAAK,SAAAC,GACJ,IAAMsB,EAAQP,WAAWf,EAAIC,KAAK,GAAGqB,OACrC,EAAKhB,SAAS,CACZgB,MAAOA,EACPrC,MAAO,OAGVuB,OAAM,WACL,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BtB,MAAOsB,EAAUtB,MAAQ,W,2BAWjC,SAAc0C,GAKZ,OAHsBA,EAAKC,cAAcC,MAAM,KAAK,GAAK,KAGpCC,QAAQ,KAAM,W,GA5GfjG,a,2FCRXkG,GAAcrS,OAAOC,OAAO,CACvCqS,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,IAUC,SAASC,GAAcC,GAC5B,IAAMC,EAAeD,EAAsB7S,EAAUmF,aAAe,EACpE,OAAI4G,OAAOgH,WAAW,gBAAkB/S,EAAU0E,kBAAoBoO,GAAe,OAAOE,QACnFV,GAAYC,GACZxG,OAAOgH,WAAW,gBAAkB/S,EAAU4E,kBAAoBkO,GAAe,OAAOE,QACxFV,GAAYE,GACZzG,OAAOgH,WAAW,gBAAkB/S,EAAU8E,kBAAqBgO,GAAe,OAAOE,QACzFV,GAAYG,GACZ1G,OAAOgH,WAAW,gBAAkB/S,EAAUgF,kBAAoB8N,GAAe,OAAOE,QACxFV,GAAYI,GAEZJ,GAAYK,GAiChB,SAASM,KACd,OAxBK,SAAsCC,GAC3C,OAAQA,GACN,KAAKZ,GAAYC,GACf,OAAOxG,OAAOgH,WAAW,eAAiB/S,EAAUyE,kBAAoB,OAAOuO,QACjF,KAAKV,GAAYE,GACf,OAAOzG,OAAOgH,WAAW,eAAiB/S,EAAU2E,kBAAoB,OAAOqO,QACjF,KAAKV,GAAYG,GACf,OAAO1G,OAAOgH,WAAW,eAAiB/S,EAAU6E,kBAAoB,OAAOmO,QACjF,KAAKV,GAAYI,GACf,OAAO3G,OAAOgH,WAAW,eAAiB/S,EAAU+E,kBAAoB,OAAOiO,QACjF,KAAKV,GAAYK,GACjB,QACE,OAAO5G,OAAOgH,WAAW,eAAiB/S,EAAUiF,kBAAoB,OAAO+N,SAY5EG,CAA6Bb,GAAYG,IC1ClD,IAAMW,GAAchG,YAAOmB,IAAPnB,CAAH,oHAEC,SAAAjF,GAAK,OAAIA,EAAME,MAAMkC,wBAMjCsD,GAAkBT,YAAOU,IAAPV,CAAH,uOAER,SAAAjF,GAAK,OAAIA,EAAME,MAAMkB,gBAKfvJ,EAAUwD,aACZxD,EAAU8D,uBAErB,qBAAGoP,aACYZ,GAAYC,IAA3B,+BACevS,EAAU8D,sBADzB,gBAOAuP,GAAiBjG,YAAOkG,KAAPlG,CAAH,2GAEDpN,EAAUwD,aACZxD,EAAUoE,4BA8LZmP,G,4JAjKb,WAAU,IAAD,SACoCtH,KAAK9D,MAAxC+K,EADD,EACCA,WAAYM,EADb,EACaA,YAAanL,EAD1B,EAC0BA,MAC3BmI,EAAOvE,KAAKwH,UAElB,OACE,eAACL,GAAD,CAAa5E,UAAW,EAAxB,UACE,cAAC,GAAD,CAAiB0E,WAAYA,EAA7B,SAA0CjH,KAAKyH,aAC7ClD,EAAKE,OAAS,GACd,cAACiD,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQL,EAA1C,SACE,eAACH,GAAD,CACE7C,KAAMA,EACNsD,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GAI7CC,MAAO,CAACP,MAAO,GANjB,UAQE,+BACE,iCAAgBQ,GAAG,SAASC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAApD,UACE,sBAAMC,OAAO,KAAKC,UAAWrM,EAAMuC,eAAgB+J,YAAa,KAChE,sBAAMF,OAAO,MAAMC,UAAWrM,EAAMuC,eAAgB+J,YAAa,UAGrE,cAACC,GAAA,EAAD,CACEC,OAAQxM,EAAMqC,eACdoK,UAAU,IAEZ,cAACC,GAAA,EAAD,CACEC,QAAS/I,KAAKgJ,cACdJ,OAAQxM,EAAMoC,eACdyK,KAAM,CAAEC,KAAM9M,EAAMsC,gBACpByK,cAAe,SAACF,GAAD,OAAU,EAAKG,YAAYH,IAC1CI,WAAY,EACZC,SAAU,IAEZ,cAACC,GAAA,EAAD,CACEX,OAAQxM,EAAMoC,eACdyK,KAAM,CAAEC,KAAM9M,EAAMsC,gBACpByK,cAAe,SAACF,GAAD,OAAU,EAAKO,YAAYP,IAC1CQ,UAAU,IAEZ,cAACC,GAAA,EAAD,CACEC,eAAgB,SAACtH,GAAD,OAAW,EAAKuH,eAAevH,IAC/CwH,UAAW,SAACxH,GAAD,MAAW,CAAC,EAAKyH,eAAezH,KAC3C0H,aAAc,CACZC,WAAY5N,EAAMmC,4BAClB0L,OAAQ,KACRC,aAAc,EACdC,SAAUpW,EAAUkE,0BACpBmS,UAAWC,KA9CA,IAgDbC,UAAW,CAAEC,MAAOnO,EAAMuC,gBAC1B6L,WAAY,CAAED,MAAOnO,EAAMkB,eAC3BmN,OAAQ,CACNvB,KAAM,cACNN,OAAQxM,EAAMqC,gBAEhBiM,kBAAmB,MAErB,cAACC,GAAA,EAAD,CACEC,KAAK,WACL7B,QAAS/I,KAAK6K,cACdjC,OAAQxM,EAAMuC,eACdmM,YAAa,EACbC,YAAa,EACb7B,KAAK,eACLwB,kBAAmB1K,KAAKgL,mC,sBActC,WACE,MAAM,IAAI9H,MAAM,0C,qBAQlB,WACE,MAAM,IAAIA,MAAM,yC,yBAQlB,WACE,MAAM,IAAIA,MAAM,6C,yBAQlB,WACE,MAAM,IAAIA,MAAM,6C,yBASlB,SAAYb,GACV,MAAM,IAAIa,MAAM,6C,yBASlB,SAAYb,GACV,MAAM,IAAIa,MAAM,6C,4BASlB,SAAeb,GACb,MAAM,IAAIa,MAAM,gD,4BASlB,SAAeb,GACb,MAAM,IAAIa,MAAM,gD,kCAQjB,WACC,OAAO,Q,GAlLY/C,aC9CjB8K,G,kDAoBJ,WAAY/O,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACX8H,WAAY,GACZC,SAAU,KACV5H,OAAO,GANQ,E,qDAcnB,WAAqB,IAAD,OAElBvD,KAAKoL,uBACLpL,KAAKyD,SAAWC,aACd,WAAQ,EAAK2H,sBACbtX,EAAUqH,iC,kCAOd,WACEuI,cAAc3D,KAAKyD,UACnBzD,KAAKyD,SAAW,O,sBA+ClB,WAAY,IAENrB,EAAQ,SAGZ,OAJkBpC,KAAKoD,MAAfG,QAGNnB,GAAS,oBACJA,I,qBAQT,WAEE,OADuBpC,KAAKoD,MAApB8H,a,yBASV,WACE,MAAO,S,yBAQT,WACE,MAAO,c,yBAST,SAAY7I,GAEV,OAAO,IAAIiJ,KAAKjJ,GAAOkJ,uB,yBASzB,SAAYlJ,GACV,GAAIA,GAAS,IAAM,CACjB,IAAMmJ,EAAInJ,EAAQ,IAClB,OAAOmJ,EAAErG,QAAQsG,OAAOC,UAAUF,GAAK,EAAI,GAAK,IAGhD,OAAOnJ,I,4BASX,SAAeA,GAEb,OAAO,IAAIiJ,KAAKjJ,GAAOkJ,uB,4BASzB,SAAelJ,GACb,MAAM,WAAN,OAAkBA,EAAM6B,oB,kCAQ1B,WACE,OAAO,I,kCAOT,WAAwB,IAAD,OACjByH,EAAU,IAAIL,KAClBK,EAAU,IAAIL,KAAKK,EAAQC,UAAY,KACvC,IAAMC,EAAY,IAAIP,KAAKK,EAAQC,UAAY,MACzCE,EAAU/X,EAAUqH,8BAAgC,IACpD4K,EAAG,sEACwD+F,KAAKC,MAAMH,EAAUD,UAAY,KADzF,gBACsGG,KAAKC,MAAML,EAAQC,UAAY,KADrI,iBACmJE,GAC5J3H,IAAMC,IAAI4B,GACP3B,MAAK,SAAAC,GACJ,IAAI2H,EAAS3H,EAAIC,KAAKC,MAElB0H,EAAaH,KAAKC,MAAMC,EAAO,GAAG,IAChCf,EAAae,EAAOE,MAAM,GAAGC,KAAI,SAAC/J,GACtC,IAAM4D,EAAO,IAAIqF,KAAgB,IAAXjJ,EAAM,IACtBuF,EAASmE,KAAKC,MAAM3J,EAAM,IAC1BgK,EAAYN,KAAKO,IAAI1E,EAASsE,EAAY,GAEhD,OADAA,EAAatE,EACN,CAAC3B,KAAMA,EAAK2F,UAAWS,UAAWA,MAE3C,EAAKzH,SAAS,CACZsG,WAAYA,EACZC,SAAUQ,EACVpI,OAAO,OAGVuB,OAAM,WACL,EAAKF,SAAS,CACZrB,OAAO,S,+BASf,WAAqB,IAAD,OACV4H,EAAanL,KAAKoD,MAAlB+H,SACJQ,EAAU,IAAIL,KAClBK,EAAU,IAAIL,KAAKK,EAAQC,UAAY,KACvC,IAAMC,EAAYV,EAEZnF,EAAG,sEACwD+F,KAAKC,MAAMH,EAAUD,UAAY,KADzF,gBACsGG,KAAKC,MAAML,EAAQC,UAAY,KADrI,iBADO,GAMhBzH,IAAMC,IAAI4B,GACP3B,MAAK,SAAAC,GACJ,IAAM2H,EAAS3H,EAAIC,KAAKC,MACxB,GAAIyH,EAAOxH,QAAU,EAAG,CACtB,IAAMyH,EAAaH,KAAKC,MAAMC,EAAO,GAAG,IAClCM,EAAYR,KAAKC,MAAMC,EAAOA,EAAOxH,OAAS,GAAG,IACjDwB,EAAO,IAAIqF,KAAoC,IAA/BW,EAAOA,EAAOxH,OAAS,GAAG,IAC1C4H,EAAYN,KAAKO,IAAIC,EAAYL,EAAY,GAC7CM,EAAS,CAACvG,KAAMA,EAAK2F,UAAWS,UAAWA,GACjD,EAAKzH,UAAS,SAAAC,GAAS,MAAK,CAC1BqG,WAAYrG,EAAUqG,WAAWiB,MAAM,GAAGM,OAAOD,GACjDrB,SAAUQ,EACVpI,OAAO,UAIZuB,OAAM,WACL,EAAKF,SAAS,CACZrB,OAAO,W,GAhQS+D,IAApB2D,GACGyB,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BtF,YAAaoF,IAAUC,OAAOC,WAI9BzQ,MAAOuQ,IAAUG,OAAOD,YA0PbE,mBAAU9B,I,ICvQnB+B,G,kDAoBJ,WAAY9Q,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACX6J,cAAe,GACf1J,OAAO,GALQ,E,qDAanB,WAAqB,IAAD,OAEZoI,ECxCK,SAA4B1F,GACzC,IAAMiH,EAAoB,MAC1B,OAAO,IAAI5B,KAAKS,KAAKC,MAAM/F,EAAK2F,UAAYsB,GAAqBA,GDsC/CC,CAAmB,IAAI7B,MACjCO,EAAY,IAAIP,KAAKK,EAAQC,WACnCC,EAAUuB,QAAQzB,EAAQ0B,UAAY,GACtC,IACMrH,EAAG,qFACuE+F,KAAKC,MAAMH,EAAUD,UAAY,KADxG,gBACqHG,KAAKC,MAAML,EAAQC,UAAY,KADpJ,iBADY,OAGrBzH,IAAMC,IAAI4B,GACP3B,MAAK,SAAAC,GAEJ,IAAI2H,EAAS3H,EAAIC,KAAK+I,kBAElBC,EAAYxB,KAAKC,MAAMC,EAAO,GAAG,IAC/BgB,EAAgBhB,EAAOE,MAAM,GAAGC,KAAI,SAAC/J,GACzC,IAAM4D,EAAO,IAAIqF,KAAgB,IAAXjJ,EAAM,IACtBmL,EAAQzB,KAAKC,MAAM3J,EAAM,IACzBoL,EAAe1B,KAAKO,IAAIkB,EAAQD,EAAW,GAEjD,OADAA,EAAYC,EACL,CAACvH,KAAMA,EAAK2F,UAAW6B,aAAcA,MAE9C,EAAK7I,SAAS,CACZqI,cAAeA,OAGlBnI,OAAM,WACL,EAAKF,SAAS,CACZrB,OAAO,S,sBAUf,WAAY,IAENnB,EAAQ,YAGZ,OAJkBpC,KAAKoD,MAAfG,QAGNnB,GAAS,oBACJA,I,qBAQT,WAEE,OAD0BpC,KAAKoD,MAAvB6J,gB,yBASV,WACE,MAAO,S,yBAQT,WACE,MAAO,iB,yBAST,SAAY5K,GACV,OAAO,IAAIiJ,KAAKjJ,GAAOqL,mBAAmB,UAAW,CAAEC,SAAU,U,yBASnE,SAAYtL,GACV,GAAIA,GAAS,IAAM,CACjB,IAAMmJ,EAAInJ,EAAQ,IAClB,OAAOmJ,EAAErG,QAAQsG,OAAOC,UAAUF,GAAK,EAAI,GAAK,IAGhD,OAAOnJ,I,4BASX,SAAeA,GACb,OAAO,IAAIiJ,KAAKjJ,GAAOqL,mBAAmB,UAAW,CAAEC,SAAU,U,4BASnE,SAAetL,GACb,MAAM,cAAN,OAAqBA,EAAM6B,sB,GApJFoD,IAAvB0F,GACGN,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BtF,YAAaoF,IAAUC,OAAOC,WAI9BzQ,MAAOuQ,IAAUG,OAAOD,YA4IbE,mBAAUC,I,IEzJnBY,G,kDAoBJ,WAAY1R,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXyK,aAAc,GACd1C,SAAU,KACV5H,OAAO,GANQ,E,qDAmCnB,WAAqB,IAAD,OAGZoI,EC/DK,SAA6B1F,GAC1C,IAAM6H,EAAqB,KAC3B,OAAO,IAAIxC,KAAKS,KAAKC,MAAM/F,EAAK2F,UAAYkC,GAAsBA,GD6DhDC,CAAoB,IAAIzC,MAClCO,EAAY,IAAIP,KAAKK,EAAQC,WACnCC,EAAUuB,QAAQzB,EAAQ0B,UAAY,GACtC,IACMrH,EAAG,gFACkE+F,KAAKC,MAAMH,EAAUD,UAAY,KADnG,gBACgHG,KAAKC,MAAML,EAAQC,UAAY,KAD/I,iBADa,MAGtBzH,IAAMC,IAAI4B,GACP3B,MAAK,SAAAC,GACJ,IAAI2H,EAAS3H,EAAIC,KAAKyJ,eAGlBT,EAAYxB,KAAKC,MAAMC,EAAO,GAAG,IAC/B4B,EAAe5B,EAAOE,MAAM,GAAGC,KAAI,SAAC/J,GACxC,IAAM4D,EAAO,IAAIqF,KAAgB,IAAXjJ,EAAM,IACtBmL,EAAQzB,KAAKC,MAAM3J,EAAM,IACzB4L,EAAclC,KAAKO,IAAIkB,EAAQD,EAAW,GAEhD,OADAA,EAAYC,EACL,CAACvH,KAAMA,EAAK2F,UAAWqC,YAAaA,MAE7C,EAAKrJ,SAAS,CACZiJ,aAAcA,OAGjB/I,OAAM,WACL,EAAKF,SAAS,CACZrB,OAAO,S,sBAUf,WAAY,IAENnB,EAAQ,WAGZ,OAJkBpC,KAAKoD,MAAfG,QAGNnB,GAAS,oBACJA,I,qBAQT,WAEE,OADyBpC,KAAKoD,MAAtByK,e,yBASV,WACE,MAAO,S,yBAQT,WACE,MAAO,gB,yBAST,SAAYxL,GACV,OAAO,IAAIiJ,KAAKjJ,GAAOkJ,mBAAmB,UAAW,CAAE2C,KAAM,UAAWC,OAAQ,c,yBAUlF,SAAY9L,GACV,GAAIA,GAAS,IAAM,CACjB,IAAMmJ,EAAInJ,EAAQ,IAClB,OAAOmJ,EAAErG,QAAQsG,OAAOC,UAAUF,GAAK,EAAI,GAAK,IAGhD,OAAOnJ,I,4BASX,SAAeA,GACb,OAAO,IAAIiJ,KAAKjJ,GAAOkJ,mBAAmB,UAAW,CAAE2C,KAAM,UAAWC,OAAQ,c,4BAUlF,SAAe9L,GACb,MAAM,aAAN,OAAoBA,EAAM6B,sB,GA7KFoD,IAAtBsG,GACGlB,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BtF,YAAaoF,IAAUC,OAAOC,WAI9BzQ,MAAOuQ,IAAUG,OAAOD,YAkPbE,I,SAAAA,eAAUa,I,oBEtPnBzG,GAAchG,YAAOmB,IAAPnB,CAAH,sHAEC,SAAAjF,GAAK,OAAIA,EAAME,MAAMkC,wBAMjCsD,GAAkBT,YAAOU,IAAPV,CAAH,yOAER,SAAAjF,GAAK,OAAIA,EAAME,MAAMkB,gBAKfvJ,EAAUwD,aACZxD,EAAU8D,uBAErB,qBAAGoP,aACYZ,GAAYC,IAA3B,+BACevS,EAAU8D,sBADzB,gBAOAuW,GAAkBjN,YAAOkN,KAAPlN,CAAH,6GAEFpN,EAAUwD,aACZxD,EAAUoE,4BCxCrBmW,G,kDAqBJ,WAAYpS,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXmL,UAAW,GACXhL,OAAO,GALQ,E,qDAanB,WAAqB,IAAD,OAEZsI,EAAY,IAAIP,KACtBO,EAAUuB,QAAQvB,EAAUwB,UAAY,IACxC,IAAMrH,EAAG,gDACkCjS,EAAU4H,eAD5C,2CAC6FqE,KAAKwO,cAAc3C,IACzH1H,IAAMC,IAAI4B,GACP3B,MAAK,SAAAC,GACJ,GAAIA,EAAIC,KAAKE,OAAS,EAAG,CACvB,IAAM8J,EAAYjK,EAAIC,KAAK6H,KAAI,SAACqC,GAC9B,IAAMxI,EAAO,IAAIqF,KAAKmD,EAAOC,WACvB9I,EAAQP,WAAWoJ,EAAOE,OAChC,MAAO,CAAC1I,KAAMA,EAAK2F,UAAWhG,MAAOA,MAEvC,EAAKhB,SAAS,CACZ2J,UAAWA,SAIbK,QAAQC,IAAI,+BAEf/J,OAAM,WACL,EAAKF,SAAS,CACZrB,OAAO,S,sBAUf,WAAY,IAENnB,EAAQ,cAGZ,OAJkBpC,KAAKoD,MAAfG,QAGNnB,GAAS,oBACJA,I,qBAQT,WAEE,OADsBpC,KAAKoD,MAAnBmL,Y,yBASV,WACE,MAAO,S,yBAQT,WACE,MAAO,U,2BAST,SAAcO,GACZ,OAAO/C,KAAKC,MAAM8C,K,2BASpB,SAAcC,GACZ,OAAOhD,KAAKiD,KAAKD,K,yBASnB,SAAY1M,GACV,OAAO,IAAIiJ,KAAKjJ,GAAOqL,mBAAmB,a,yBAS5C,SAAYrL,GACV,MAAM,IAAN,OAAWA,EAAM8C,QAAQ,M,4BAS3B,SAAe9C,GAEb,OAAO,IAAIiJ,KAAKjJ,GAAO6B,eACrB,UACA,CAAC+K,KAAM,UAAWC,MAAO,UAAWC,IAAK,UAAWjB,KAAM,UAAWC,OAAO,c,4BAShF,SAAe9L,GACb,MAAM,SAAN,OAAgBA,EAAM8C,QAAQ,M,2BAShC,SAAcc,GAKZ,OAHsBA,EAAKC,cAAcC,MAAM,KAAK,GAAK,KAGpCC,QAAQ,KAAM,W,+JD5GrC,WAAU,IAAD,SACoCpG,KAAK9D,MAAxC+K,EADD,EACCA,WAAYM,EADb,EACaA,YAAanL,EAD1B,EAC0BA,MAC3BmI,EAAOvE,KAAKwH,UAElB,OACE,eAAC,GAAD,CAAajF,UAAW,EAAxB,UACE,cAAC,GAAD,CAAiB0E,WAAYA,EAA7B,SAA0CjH,KAAKyH,aAC7ClD,EAAKE,OAAS,GACd,cAACiD,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQL,EAA1C,SACE,eAAC6G,GAAD,CACE7J,KAAMA,EACNsD,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GAI7CC,MAAO,CAACP,MAAO,GANjB,UAQE,+BACE,iCAAgBQ,GAAG,SAASC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAApD,UACE,sBAAMC,OAAO,KAAKC,UAAWrM,EAAMuC,eAAgB+J,YAAa,KAChE,sBAAMF,OAAO,MAAMC,UAAWrM,EAAMuC,eAAgB+J,YAAa,UAGrE,cAACC,GAAA,EAAD,CACEC,OAAQxM,EAAMqC,eACdoK,UAAU,IAEZ,cAACC,GAAA,EAAD,CACEC,QAAS/I,KAAKgJ,cACdJ,OAAQxM,EAAMoC,eACdyK,KAAM,CAAEC,KAAM9M,EAAMsC,gBACpByK,cAAe,SAACF,GAAD,OAAU,EAAKG,YAAYH,IAC1CI,WAAY,EACZC,SAAU,IAEZ,cAACC,GAAA,EAAD,CACE6F,OAAQ,CACN,SAAAN,GAAO,OAAI,EAAKO,cAAcP,IAC9B,SAAAC,GAAO,OAAI,EAAKO,cAAcP,KAEhCnG,OAAQxM,EAAMoC,eACdyK,KAAM,CAAEC,KAAM9M,EAAMsC,gBACpByK,cAAe,SAACF,GAAD,OAAU,EAAKO,YAAYP,IAC1CQ,UAAU,IAEZ,cAACC,GAAA,EAAD,CACEC,eAAgB,SAACtH,GAAD,OAAW,EAAKuH,eAAevH,IAC/CwH,UAAW,SAACxH,GAAD,MAAW,CAAC,EAAKyH,eAAezH,KAC3C0H,aAAc,CACZC,WAAY5N,EAAMmC,4BAClB0L,OAAQ,KACRC,aAAc,EACdC,SAAUpW,EAAUkE,0BACpBmS,UAAWC,KAlDA,IAoDbC,UAAW,CAAEC,MAAOnO,EAAMuC,gBAC1B6L,WAAY,CAAED,MAAOnO,EAAMkB,eAC3BmN,OAAQ,CAAE7B,OAAQxM,EAAMqC,gBACxBiM,kBAAmB,MAErB,cAAC6E,GAAA,EAAD,CACE3E,KAAK,WACL7B,QAAS/I,KAAK6K,cACdjC,OAAQxM,EAAMuC,eACdmM,YAAa,EACbC,YAAa,EACb7B,KAAK,eACLsG,UAAW,CAAE5G,OAAQxM,EAAMwC,0BAA2B6Q,EAAG,GACzD/E,kBAAmB,gB,sBAcjC,WACE,MAAM,IAAIxH,MAAM,2C,qBAQlB,WACE,MAAM,IAAIA,MAAM,0C,yBAQlB,WACE,MAAM,IAAIA,MAAM,8C,yBAQlB,WACE,MAAM,IAAIA,MAAM,8C,2BASlB,SAAc4L,GACZ,MAAM,IAAI5L,MAAM,gD,2BASlB,SAAc6L,GACZ,MAAM,IAAI7L,MAAM,gD,yBASlB,SAAYb,GACV,MAAM,IAAIa,MAAM,8C,yBASlB,SAAYb,GACV,MAAM,IAAIa,MAAM,8C,4BASlB,SAAeb,GACb,MAAM,IAAIa,MAAM,iD,4BASlB,SAAeb,GACb,MAAM,IAAIa,MAAM,mD,GA/LI/C,cChDlBmO,GAEG5B,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BtF,YAAaoF,IAAUC,OAAOC,WAI9BzQ,MAAOuQ,IAAUG,OAAOD,YAwKZE,I,8BAAAA,eAAUuB,ICvKpBoB,GAAcvO,YAAOC,IAAPD,CAAH,0HAEGpN,EAAU8G,2BAA6B,KACtC9G,EAAU8G,2BAA6B,KAC1C,WAAagJ,WAAS8L,SAAW,MAAQC,SAAOC,WAC5D,qBAAG5I,aACYZ,GAAYC,IAA3B,kCACkBvS,EAAU6G,oBAAsB,KADlD,qCAEmB7G,EAAU6G,oBAAsB,KAFnD,gBAQAkV,GAAqB3O,YAAOuO,GAAPvO,CAAH,oEAEFpN,EAAU8G,2BAA6B,MAIvDkV,GAAW5O,YAAOC,IAAPD,CAAH,0EAEKpN,EAAU8G,2BAA6B,MACpD,gBAAGoM,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,KAA7D,sCAC0D,EAArC1S,EAAU8G,2BAA6B,EAAI,KADhE,gBAGCoM,IAAeZ,GAAYG,IAAMS,IAAeZ,GAAYE,KAA7D,sCACqBxS,EAAU8G,2BAA2B,EAAI,KAD9D,eAGAoM,IAAeZ,GAAYC,IAA3B,iCACgBvS,EAAU6G,oBAAsB,KADhD,sCAQDoV,GAAY7O,YAAOC,IAAPD,CAAH,0EAEIpN,EAAU8G,2BAA6B,MACpD,gBAAGoM,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,IAAMQ,IAAeZ,GAAYG,KAA9F,sCACqBzS,EAAU8G,2BAA2B,EAAI,KAD9D,gBAGCoM,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,oCAOD2J,GAAa9O,YAAOgC,GAAPhC,CAAH,kFAEE,SAAAjF,GAAK,OAAIA,EAAME,MAAMqB,2BAC1B,SAAAvB,GAAK,OAAIA,EAAME,MAAMkB,iBAI5B4S,GAAgB/O,YAAO4D,GAAP5D,CAAH,kFAED,SAAAjF,GAAK,OAAIA,EAAME,MAAMqB,2BAC1B,SAAAvB,GAAK,OAAIA,EAAME,MAAMkB,iBAW5B6S,GAAehP,YAAOmE,GAAPnE,CAAH,kFAEA,SAAAjF,GAAK,OAAIA,EAAME,MAAMqB,2BAC1B,SAAAvB,GAAK,OAAIA,EAAME,MAAMkB,iBAI5B8S,GAAYjP,YAAOwE,GAAPxE,CAAH,kFAEG,SAAAjF,GAAK,OAAIA,EAAME,MAAMqB,2BAC1B,SAAAvB,GAAK,OAAIA,EAAME,MAAMkB,iBAK5B6J,GAAchG,YAAOmB,IAAPnB,CAAH,kNAMCpN,EAAU8G,2BAA6B,MACnD,qBAAGoM,aACaZ,GAAYC,IAA3B,gCACevS,EAAU6G,oBAAsB,KAD/C,gBAIW,SAAAsB,GAAK,OAAIA,EAAME,MAAMqB,2BAC1B,SAAAvB,GAAK,OAAIA,EAAME,MAAMkB,iBAK5BsE,GAAkBT,YAAOU,IAAPV,CAAH,sJAEH,SAAAjF,GAAK,OAAIA,EAAME,MAAMqB,2BAC1B,SAAAvB,GAAK,OAAIA,EAAME,MAAMkB,gBACfvJ,EAAUwD,cASvB8Y,G,4JAaJ,WACE,OACE,gCAEGrQ,KAAKsQ,kBACLtQ,KAAKuQ,wB,kCAUZ,WACC,IACStJ,EAAejH,KAAK9D,MAApB+K,WAER,OACE,cAACyI,GAAD,CAAalN,WAAS,EACpBC,UAAU,MACVC,QAAQ,SACRC,WAAW,aACXsE,WAAYA,EAJd,SAME,cAAC,GAAD,CAAa1E,UAAW,EAAG0E,WAAYA,EAAvC,SACE,cAAC,GAAD,UACG,iC,6BAYX,WACC,IACSA,EAAejH,KAAK9D,MAApB+K,WAER,OACE,eAACyI,GAAD,CAAalN,WAAS,EACpBC,UAAU,MACVC,QAAQ,gBACRC,WAAW,aACXsE,WAAYA,EAJd,UAME,cAAC8I,GAAD,CAAUlN,MAAI,EAACoE,WAAYA,EAA3B,SACE,cAAC,IAAD,CACEuJ,QAAS,IADX,SAGE,cAACP,GAAD,CAAYjO,UAAW,QAG3B,cAAC+N,GAAD,CAAUlN,MAAI,EAACoE,WAAYA,EAA3B,SACE,cAAC,IAAD,CACEwJ,MAAO,GACPD,QAAS,IAFX,SAIE,cAACN,GAAD,CAAelO,UAAW,QAG9B,cAAC+N,GAAD,CAAUlN,MAAI,EAACoE,WAAYA,EAA3B,SACE,cAAC,IAAD,CACEwJ,MAAO,IACPD,QAAS,IAFX,SAIE,cAACL,GAAD,CAAcnO,UAAW,QAG7B,cAAC+N,GAAD,CAAUlN,MAAI,EAACoE,WAAYA,EAA3B,SACE,cAAC,IAAD,CACEwJ,MAAO,IACPD,QAAS,IAFX,SAIE,cAACJ,GAAD,CAAWpO,UAAW,a,8BAYhC,WACC,IACSiF,EAAejH,KAAK9D,MAApB+K,WAEFM,EAAc,IACpB,OACE,eAAC,WAAD,WACE,eAACmI,GAAD,CAAalN,WAAS,EACpBC,UAAU,MACVC,QAAQ,gBACRC,WAAW,aACXsE,WAAYA,EAJd,UAME,cAAC+I,GAAD,CAAWnN,MAAI,EAACoE,WAAYA,EAA5B,SACE,cAAC,IAAD,CACEuJ,QAAS,IADX,SAGE,cAAC,GAAD,CAAajJ,YAAaA,EAAaN,WAAYA,QAGvD,cAAC+I,GAAD,CAAWnN,MAAI,EAACoE,WAAYA,EAA5B,SACE,cAAC,IAAD,CACEwJ,MAAO,GACPD,QAAS,IAFX,SAIE,cAAC,GAAD,CAAYjJ,YAAaA,EAAaN,WAAYA,WAIxD,eAAC6I,GAAD,CAAoBtN,WAAS,EAC3BC,UAAU,MACVC,QAAQ,gBACRC,WAAW,aACXsE,WAAYA,EAJd,UAME,cAAC+I,GAAD,CAAWnN,MAAI,EAACoE,WAAYA,EAA5B,SACE,cAAC,IAAD,CACEuJ,QAAS,IADX,SAGE,cAAC,GAAD,CAAgBjJ,YAAaA,EAAaN,WAAYA,QAG1D,cAAC+I,GAAD,CAAWnN,MAAI,EAACoE,WAAYA,EAA5B,SACE,cAAC,IAAD,CACEwJ,MAAO,GACPD,QAAS,IAFX,SAIE,cAAC,GAAD,CAAejJ,YAAaA,EAAaN,WAAYA,kB,GAvJ5C7G,GAAjBiQ,GACG3D,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,YA2JlBwD,I,MAAAA,M,uCC7RTzO,GAAkBT,YAAOU,IAAPV,CAAH,wLAER,SAAAjF,GAAK,OAAIA,EAAME,MAAMoB,oBAGfzJ,EAAUwD,aACZxD,EAAUkE,2BAErB,qBAAGgP,aACYZ,GAAYC,IAA3B,+BACevS,EAAU8D,sBADzB,gBAOA6Y,GAAiBvP,YAAOwP,KAAPxP,CAAH,qIAGDpN,EAAUwD,aACZxD,EAAUoE,4BA6GZyY,G,4JA3Eb,WAAU,IAAD,EAC+C5Q,KAAK9D,MAAnD+K,EADD,EACCA,WAAYhF,EADb,EACaA,UAAWsF,EADxB,EACwBA,YAAanL,EADrC,EACqCA,MACtCmI,EAAOvE,KAAKwH,UAElB,OACE,eAAClF,EAAA,EAAD,CAAOL,UAAWA,EAAWM,UAAW,EAAxC,UACE,cAAC,GAAD,CAAiB0E,WAAYA,EAA7B,SAA0CjH,KAAKyH,aAC7ClD,EAAKE,OAAS,GACd,cAACiD,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQL,EAA1C,SACE,eAACmJ,GAAD,CAIExI,MAAO,CAACP,MAAO,GAJjB,UAME,cAACkJ,GAAA,EAAD,CACEtM,KAAMA,EACNwE,QAAQ,QAFV,SAIGxE,EAAK6H,KAAI,SAAA0E,GAAK,OACb,cAACC,GAAA,EAAD,CAEE7H,KAAM4H,EAAM5H,KAGZ6B,YAAa3O,EAAMI,OAAS,GAAM,IAClCoM,OAAQxM,EAAMqC,gBALTqS,EAAME,aASjB,cAACtH,GAAA,EAAD,CACEK,aAAc,CACZC,WAAY5N,EAAMmC,4BAClB0L,OAAQ,KACRC,aAAc,EACdC,SAAUpW,EAAUkE,0BACpBmS,UAAWC,KAjCA,IAmCbC,UAAW,CAAEC,MAAOnO,EAAMuC,gBAC1B6L,WAAY,CAAED,MAAOnO,EAAMkB,eAC3BmN,OAAQ,CACNvB,KAAM,cACNN,OAAQxM,EAAMqC,4B,sBAe9B,WACE,MAAM,IAAIyE,MAAM,0C,qBAYlB,WACE,MAAM,IAAIA,MAAM,2C,GAjGG/C,a,6BCvCR,SAAe8Q,KAA9B,gC,gDAAe,mCAAAC,EAAA,6DAGPC,EAAmB,IAAIC,KACZrQ,IAAI,UAAW,WAChCoQ,EAAiBpQ,IAAI,UAAW,OAChCoQ,EAAiBpQ,IAAI,YAAa,OAClCoQ,EAAiBpQ,IAAI,YAAa,OAClCoQ,EAAiBpQ,IAAI,YAAa,UAClCoQ,EAAiBpQ,IAAI,WAAY,WACjCoQ,EAAiBpQ,IAAI,aAAc,WACnCoQ,EAAiBpQ,IAAI,YAAa,WAClCoQ,EAAiBpQ,IAAI,UAAW,OAChCoQ,EAAiBpQ,IAAI,YAAa,OAClCoQ,EAAiBpQ,IAAI,YAAa,OAClCoQ,EAAiBpQ,IAAI,SAAU,eAC/BoQ,EAAiBpQ,IAAI,SAAU,OAC/BoQ,EAAiBpQ,IAAI,UAAW,OAChCoQ,EAAiBpQ,IAAI,SAAU,eAC/BoQ,EAAiBpQ,IAAI,WAAY,eACjCoQ,EAAiBpQ,IAAI,UAAW,OAChCoQ,EAAiBpQ,IAAI,eAAgB,OACrCoQ,EAAiBpQ,IAAI,YAAa,OAClCoQ,EAAiBpQ,IAAI,SAAU,WAC/BoQ,EAAiBpQ,IAAI,WAAY,OACjCoQ,EAAiBpQ,IAAI,UAAW,OAChCoQ,EAAiBpQ,IAAI,UAAW,OAChCoQ,EAAiBpQ,IAAI,WAAY,OACjCoQ,EAAiBpQ,IAAI,YAAa,aAClCoQ,EAAiBpQ,IAAI,cAAe,aACpCoQ,EAAiBpQ,IAAI,cAAe,aACpCoQ,EAAiBpQ,IAAI,WAAY,OACjCoQ,EAAiBpQ,IAAI,WAAY,OACjCoQ,EAAiBpQ,IAAI,UAAW,UAChCoQ,EAAiBpQ,IAAI,YAAa,UAClCoQ,EAAiBpQ,IAAI,QAAS,OAC9BoQ,EAAiBpQ,IAAI,WAAY,eACjCoQ,EAAiBpQ,IAAI,WAAY,eACjCoQ,EAAiBpQ,IAAI,WAAY,eAtCpB,wEA0COoD,IAAMC,IA1Cb,oEA0CLE,EA1CK,OAuDX+M,GAVIA,EAAY/M,EAAIC,KAAK6H,KAAI,SAAC/J,GAG5B,MAAO,CACLiP,KAFWjP,EAAMkP,KAAKnL,QAAQ,aAAc,IAG5CoL,SAAU7M,SAAStC,EAAMoP,kBAKPC,QAAO,SAACnR,GAC5B,OAAOA,EAASiR,SAAW,KAIvBG,EAAwB,IAAIP,IAClCC,EAAUO,SAAQ,SAAArR,GAChB,IAAIsR,EAAUV,EAAiB/M,IAAI7D,EAAS+Q,MACrB,qBAAZO,IACTA,EAAU,SAEZ,IAAIC,EAAqBH,EAAsBvN,IAAIyN,GACjB,qBAAvBC,IACTA,EAAqB,GACrBH,EAAsB5Q,IAAI8Q,EAASC,IAErCA,EAAmBC,KAAKxR,MAvEf,kBA0EJoR,GA1EI,4DA6EJ,MA7EI,4D,0BCCTK,G,kDAyBJ,WAAY9V,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXuO,sBAAuB,KACvBpO,MAAO,GALQ,E,qDAanB,WACEvD,KAAKiR,0B,sBAQP,WAAY,IAEN7O,EAAQ,0BAGZ,OAJkBpC,KAAKoD,MAAfG,QAGNnB,GAAS,oBACJA,I,qBAYT,WAAW,IACDuP,EAA0B3R,KAAKoD,MAA/BuO,sBACAvV,EAAU4D,KAAK9D,MAAfE,MAER,GAA8B,OAA1BuV,EAAgC,CAElC,IAAMpN,EAAO0N,MAAMC,KAAKP,GAAuB,YAA2B,IAAD,oBAAxBE,EAAwB,KAEvE,MAAO,CACL3I,KAAM,KACN8H,OAAQa,EACRN,KAAMM,EACNxP,MANqE,KACtCoC,WAiBnC,OAPAF,EAAK4N,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEhQ,MAAQ+P,EAAE/P,SAGjCkC,EAAKqN,SAAQ,SAACd,EAAOwB,GACnBxB,EAAM5H,KAAO9M,EAAM+C,cAAcmT,EAAQlW,EAAM+C,cAAcsF,WAGxDF,EAGP,MAAO,K,mCAOX,WAAyB,IAAD,OACtB0M,KACG5M,MAAK,SAAAC,GACJ,EAAKM,SAAS,CACZ+M,sBAAuBrN,EACvBf,MAAO,OAGVuB,OAAM,WACL,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BtB,MAAOsB,EAAUtB,MAAQ,a,GA5GNqN,IAAvBoB,GACGtF,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAK7B5K,UAAW0K,IAAU4F,OAIrBhL,YAAaoF,IAAUC,OAAOC,WAI9BzQ,MAAOuQ,IAAUG,OAAOD,YAiGbE,I,+DAAAA,eAAUiF,I,sEC1GnBQ,GAAerR,YAAOsR,KAAPtR,CAAH,oiBAOH,SAAAjF,GAAK,OAAIA,EAAME,MAAMc,uBAIrB,SAAAhB,GAAK,OAAIA,EAAME,MAAMa,6BAIhB,SAAAf,GAAK,OAAIA,EAAME,MAAMiB,kCAIrB,SAAAnB,GAAK,OAAIA,EAAME,MAAMa,6BAKnCyV,GAAcvR,YAAOwR,KAAPxR,CAAH,iEAEEpN,EAAUwD,cAIvBqb,GAAkBzR,YAAO0R,KAAP1R,CAAH,2NAEG,SAAAjF,GAAK,OAAIA,EAAM4W,YAAc,QAAU,QACvC,SAAA5W,GAAK,OAAIA,EAAM4W,YAAc5W,EAAM4W,YAAc,KAAO,QAC5D,SAAA5W,GAAK,OAAIA,EAAM4W,YAAc5W,EAAME,MAAM2C,oBAAsB,iBACtE,SAAA7C,GAAK,MAAyB,SAArBA,EAAM6W,WACtB7W,EAAME,MAAMoB,kBAAoBtB,EAAME,MAAMkB,gBAC/BvJ,EAAUwD,aACZxD,EAAUkE,2BAErB,gBAAGgP,EAAH,EAAGA,WAAY+L,EAAf,EAAeA,kBAAf,OACE/L,IAAeZ,GAAYC,IAAM0M,GAAlC,+BACcjf,EAAUoE,2BADxB,gBAOD8a,GAAiB9R,YAAO+R,KAAP/R,CAAH,qEAENpN,EAAU4G,gCAAkC,MACpD,qBAAGsM,aACYZ,GAAYC,IAA3B,4BACYvS,EAAU2G,yBAA2B,KADjD,gBAOAyY,GAAiBhS,YAAO8R,GAAP9R,CAAH,4JAEI,SAAAjF,GAAK,OAAIA,EAAME,MAAM2C,sBAG/BhL,EAAU4G,gCAAkC,EAAI,MACxD,qBAAGsM,aACYZ,GAAYC,IAA3B,4BACYvS,EAAU2G,yBAA2B,EAAI,KADrD,gBAOA0Y,GAAkBjS,YAAOyR,GAAPzR,CAAH,2KAID,SAAAjF,GAAK,OAAIA,EAAME,MAAM2C,uBAC5B,SAAA7C,GAAK,MAAyB,SAArBA,EAAM6W,WACtB7W,EAAME,MAAMoB,kBAAoBtB,EAAME,MAAMmB,oBAK5CqE,GAAkBT,YAAOU,IAAPV,CAAH,gOAER,SAAAjF,GAAK,OAAIA,EAAME,MAAMkB,gBAKfvJ,EAAUwD,aACZxD,EAAU8D,uBAkMZwb,G,4JA9Hb,WAAU,IAAD,EACsBrT,KAAK9D,MAA1B+F,EADD,EACCA,UAAWG,EADZ,EACYA,MACnB,OACE,eAACE,EAAA,EAAD,CAAOL,UAAWA,EAAWM,UAAW,EAAxC,UAEsB,qBAAVH,GACN,cAAC,GAAD,UAAkBA,IAEtB,eAACsQ,GAAD,WACE,cAACY,GAAA,EAAD,UACGtT,KAAKuT,wBAER,cAACC,GAAA,EAAD,UACGxT,KAAKyT,uBAER,cAACC,GAAA,EAAD,UACG1T,KAAK2T,gC,iCAYhB,WAAuB,IAAD,EACiC3T,KAAK9D,MAAlD+K,EADY,EACZA,WAAY2M,EADA,EACAA,UAAWC,EADX,EACWA,kBAC/B,MAAyB,qBAAdD,EAEP,cAACX,GAAD,CAAgBhM,WAAYA,EAA5B,SACG2M,EAAUxH,KAAI,SAAC0H,EAAMxB,GACpB,OAGE,aAFA,CAECc,GAAD,CACEL,WAAYe,EAAKC,WAAa,OAAS,QACvCf,kBAAmBa,EACnB5M,WAAYA,EAEZ+M,MAAOF,EAAKG,eAAiB,QAAU,UACvCC,QAAQ,WACRC,KAAK,QAPP,SASGL,EAAKzR,OALDiQ,QAaR,O,gCAQX,WAAsB,IAAD,OAGnB,OADW8B,EADapU,KAAK9D,MAArBkY,eAEIhI,KAAI,SAACiI,EAAS/B,GACxB,OAAO,EAAKgC,kBAAkBD,EAAS/B,Q,+BAW3C,SAAkB+B,EAASE,GAAW,IAAD,EACuBvU,KAAK9D,MAAvD+K,EAD2B,EAC3BA,WAAYuN,EADe,EACfA,eAAgBX,EADD,EACCA,kBACpC,OACE,cAACZ,GAAD,CAAgBhM,WAAYA,EAA5B,SACGoN,EAAQI,MAAMrI,KAAI,SAAC0H,EAAMxB,GACxB,OACE,cAACM,GAAD,CACEG,WAAYe,EAAKC,WAAa,OAAS,QACvCf,kBAAmBa,EACnB5M,WAAYA,EAEZ+M,MAAOF,EAAKG,eAAiB,QAAU,UACvCC,QAAQ,WACRC,KAAK,QACLrB,YAAa0B,EAAkBD,EAAW,EAAI,EAAK,EARrD,SAW2B,qBAAhBT,EAAKY,OACV,8BACE,cAAClC,GAAD,CACEmC,QAASb,EAAKY,OAAOE,UACrBrK,MAAM,UACNsK,KAAMf,EAAKG,eAAiB,MAAQ,QACpC1C,KAAMuC,EAAKY,OAAOnD,KAClBuD,SAAUhB,EAAKY,OAAOI,aAG1BhB,EAAKzR,OAjBJiQ,OAPgC+B,EAAQrD,U,iCAsCzD,WAAuB,IAAD,EACehR,KAAK9D,MAAhC+K,EADY,EACZA,WACR,OACiB,IAHG,EACA8N,YAEK,cAAC5B,GAAD,CAAgBlM,WAAYA,Q,GArLjC9G,aCkBT6U,G,kDA5Gb,WAAY9Y,GAAQ,IAAD,8BACjB,cAAMA,IAGDkY,YAAc,EAAKA,YAAYzU,KAAjB,gBAEnB,EAAKyD,MAAQ,CACXuO,sBAAuB,KACvBpO,MAAO,GARQ,E,qDAgBnB,WACEvD,KAAKiR,0B,oBAQP,WAAU,IAAD,EAC2BjR,KAAK9D,MAA/B+K,EADD,EACCA,WAAYhF,EADb,EACaA,UAEpB,OACE,cAAC,GAAD,CACEgF,WAAYA,EACZhF,UAAWA,EACX2R,UAAW,CACT,CAACvR,MAAO,UAAW0R,YAAY,EAAME,gBAAgB,GACrD,CAAC5R,MAAO,MAAO0R,YAAY,EAAOE,gBAAgB,GAClD,CAAC5R,MAAO,QAAS0R,YAAY,EAAOE,gBAAgB,IAEtDG,YAAapU,KAAKoU,gB,yBAexB,WAAe,IAAD,EAC6BpU,KAAKoD,MAAtCG,EADI,EACJA,MAAOoO,EADH,EACGA,sBAEf,GAAIpO,GAASxP,EAAU2H,wBACrB,MAAO,CAAC,CACNsV,OAAQ,EACRyD,MAAO,CAAC,CAACpS,MAAO,gBAAiB0R,YAAY,EAAOE,gBAAgB,MAGnE,GAA8B,OAA1BtC,GAAiE,IAA/BA,EAAsBwC,KAC/D,MAAO,CAAC,CACNnD,OAAQ,EACRyD,MAAO,CAAC,CAACpS,MAAO,aAAc0R,YAAY,EAAOE,gBAAgB,MAInE,IAAIgB,EAAWhD,MAAMC,KAAKP,GAAuB,YAA2B,IAAD,oBAAxBE,EAAwB,KAAfR,EAAe,KACnE6D,EAAiB7D,EAAU5M,OAC3B+M,EAAWH,EAAUjF,KAAI,SAAA7L,GAAQ,OAAIA,EAASiR,YAAU2D,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,KAClH,MAAO,CACLrE,OAAQa,EACR4C,MAAO,CACL,CAACpS,MAAOwP,EAASkC,YAAY,EAAME,gBAAgB,GACnD,CAAC5R,MAAO6S,EAAehR,iBAAkB6P,YAAY,EAAOE,gBAAgB,GAC5E,CAAC5R,MAAOmP,EAAStN,iBAAkB6P,YAAY,EAAOE,gBAAgB,QAQ5E,OAFAgB,EAAS9C,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEoC,MAAM,GAAGpS,MAAQ+P,EAAEqC,MAAM,GAAGpS,SAEhD4S,I,mCAQX,WAAyB,IAAD,OACtBhE,KACG5M,MAAK,SAAAC,GACJ,EAAKM,SAAS,CACZ+M,sBAAuBrN,EACvBf,MAAO,OAGVuB,OAAM,WACL,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BtB,MAAOsB,EAAUtB,MAAQ,a,GAvHLpD,aC4efmV,G,kDAndb,WAAYpZ,GAAQ,IAAD,8BACjB,cAAMA,IAGDkY,YAAc,EAAKA,YAAYzU,KAAjB,gBAEnB,EAAKyD,MAAQ,CACXmS,YAAa,CAACC,OAAQ,EAAGjS,MAAO,GAChCkS,sBAAuB,CAACD,OAAQ,EAAGjS,MAAO,GAC1CmS,iBAAkB,CAACF,OAAQ,EAAGjS,MAAO,GACrCoS,oBAAqB,CAACH,OAAQ,EAAGjS,MAAO,GACxCqS,cAAe,CAACJ,OAAQ,EAAGjS,MAAO,GAClCsS,sBAAuB,CAACL,OAAQ,EAAGjS,MAAO,GAC1CuS,gBAAiB,CAACN,OAAQ,EAAGjS,MAAO,IAbrB,E,qDAqBnB,WACEvD,KAAK+V,yBACL/V,KAAKgW,2BACLhW,KAAKiW,qBACLjW,KAAKkW,mBACLlW,KAAKmW,2BACLnW,KAAKoW,sBACLpW,KAAKqW,mB,oBAQP,WAAU,IAAD,EAC2BrW,KAAK9D,MAA/B+K,EADD,EACCA,WAAYhF,EADb,EACaA,UAEpB,OACE,cAAC,GAAD,CACEgF,WAAYA,EACZhF,UAAWA,EACXmS,YAAapU,KAAKoU,gB,yBAexB,WAAe,IAAD,EAQRpU,KAAKoD,MANPqS,EAFU,EAEVA,sBACAC,EAHU,EAGVA,iBACAC,EAJU,EAIVA,oBACAC,EALU,EAKVA,cACAC,EANU,EAMVA,sBACAC,EAPU,EAOVA,gBAGF,MAAO,CACL,CACE9E,OAAQ,EACRyD,MAAOzU,KAAKsW,YAAYX,EAAqB,iBAE/C,CACE3E,OAAQ,EACRyD,MAAOzU,KAAKsW,YAAYT,EAAuB,mBAEjD,CACE7E,OAAQ,EACRyD,MAAOzU,KAAKsW,YAAYR,EAAiB,YAE3C,CACE9E,OAAQ,EACRyD,MAAOzU,KAAKsW,YAAYV,EAAe,iBAEzC,CACE5E,OAAQ,EACRyD,MAAOzU,KAAKsW,YAAYb,EAAuB,mBAEjD,CACEzE,OAAQ,EACRyD,MAAOzU,KAAKsW,YAAYZ,EAAkB,cAE5C,CACE1E,OAAQ,EACRyD,MAAOzU,KAAKuW,0BAEd,CACEvF,OAAQ,EACRyD,MAAOzU,KAAKwW,uBAEd,CACExF,OAAQ,EACRyD,MAAOzU,KAAKyW,uBAEd,CACEzF,OAAQ,EACRyD,MAAOzU,KAAK0W,wBAEd,CACE1F,OAAQ,GACRyD,MAAOzU,KAAK2W,kC,4BASlB,WAAkB,IAAD,OAEfxS,IAAMC,IADG,mEAENC,MAAK,SAAAC,GACJ,GAAwC,IAApCA,EAAIC,KAAKqS,gBAAgBnS,QAAuD,IAAvCH,EAAIC,KAAKqS,gBAAgB,GAAGnS,OAAc,CACrF,IAAM8Q,EAAc,CAClBC,MAAO7Q,SAASL,EAAIC,KAAKqS,gBAAgB,GAAG,IAC5CrT,MAAO,GAET,EAAKqB,SAAS,CACZ2Q,YAAaA,QAIlBzQ,OAAM,WACL,EAAKF,UAAS,gBAAG2Q,EAAH,EAAGA,YAAH,MAAsB,CAClCA,YAAY,2BACPA,GADM,IAEThS,MAAOgS,EAAYhS,MAAQ,a,sCAUrC,WAA4B,IAAD,OAEzBY,IAAMC,IADG,wEAENC,MAAK,SAAAC,GACJ,GAA6C,IAAzCA,EAAIC,KAAKsS,qBAAqBpS,OAAc,CAC9C,IAAMgR,EAAwB,CAC5BD,MAAO7Q,SAASL,EAAIC,KAAKsS,qBAAqB,IAC9CtT,MAAO,GAET,EAAKqB,SAAS,CACZ6Q,sBAAuBA,QAI5B3Q,OAAM,WACL,EAAKF,UAAS,gBAAG6Q,EAAH,EAAGA,sBAAH,MAAgC,CAC5CA,sBAAsB,2BACjBA,GADgB,IAEnBlS,MAAOkS,EAAsBlS,MAAQ,a,iCAU/C,WAAuB,IAAD,OAEpBY,IAAMC,IADG,gEAENC,MAAK,SAAAC,GACJ,GAAqC,IAAjCA,EAAIC,KAAKuS,aAAarS,QAAoD,IAApCH,EAAIC,KAAKuS,aAAa,GAAGrS,OAAc,CAC/E,IAAMiR,EAAmB,CACvBF,MAAO7Q,SAASL,EAAIC,KAAKuS,aAAa,GAAG,IACzCvT,MAAO,GAET,EAAKqB,SAAS,CACZ8Q,iBAAkBA,QAIvB5Q,OAAM,WACL,EAAKF,UAAS,gBAAG8Q,EAAH,EAAGA,iBAAH,MAA2B,CACvCA,iBAAiB,2BACZA,GADW,IAEdnS,MAAOmS,EAAiBnS,MAAQ,a,oCAU1C,WAA0B,IAAD,OAEvBY,IAAMC,IADG,qDAENC,MAAK,SAAAC,GAEJ,IAAI+M,EAAY/M,EAAIC,KAAK6H,KAAI,SAAC/J,GAC5B,MAAO,CACLmP,SAAU7M,SAAStC,EAAMoP,iBASvBkE,EAAsB,CAC1BH,OALFnE,EAAYA,EAAUK,QAAO,SAACnR,GAC5B,OAAOA,EAASiR,SAAW,MAIV/M,OACjBlB,MAAO,GAET,EAAKqB,SAAS,CACZ+Q,oBAAqBA,OAG1B7Q,OAAM,WACL,EAAKF,UAAS,gBAAG+Q,EAAH,EAAGA,oBAAH,MAA8B,CAC1CA,oBAAoB,2BACfA,GADc,IAEjBpS,MAAOoS,EAAoBpS,MAAQ,a,8BAU3C,WAAoB,IAAD,OAEjBY,IAAMC,IADG,kEAENC,MAAK,SAAAC,GACJ,GAAuC,IAAnCA,EAAIC,KAAKwS,eAAetS,QAAsD,IAAtCH,EAAIC,KAAKwS,eAAe,GAAGtS,OAAc,CACnF,IAAMmR,EAAgB,CACpBJ,MAAO7Q,SAASL,EAAIC,KAAKwS,eAAe,GAAG,IAC3CxT,MAAO,GAET,EAAKqB,SAAS,CACZgR,cAAeA,QAIpB9Q,OAAM,WACL,EAAKF,UAAS,gBAAGgR,EAAH,EAAGA,cAAH,MAAwB,CACpCA,cAAc,2BACTA,GADQ,IAEXrS,MAAOqS,EAAcrS,MAAQ,a,sCAUtC,WAA4B,IAAD,OAE1BY,IAAMC,IADG,gEAENC,MAAK,SAAAC,GACJ,GAAuC,IAAnCA,EAAIC,KAAKyS,eAAevS,OAAc,CACxC,IAAMoR,EAAwB,CAC5BL,MAAO7Q,SAASL,EAAIC,KAAKyS,eAAe,GAAGA,gBAC3CzT,MAAO,GAET,EAAKqB,SAAS,CACZiR,sBAAuBA,QAI5B/Q,OAAM,WACL,EAAKF,UAAS,gBAAGiR,EAAH,EAAGA,sBAAH,MAAgC,CAC5CA,sBAAsB,2BACjBA,GADgB,IAEnBtS,MAAOsS,EAAsBtS,MAAQ,a,gCAU/C,WAAsB,IAAD,OAEnBY,IAAMC,IADG,mEAENC,MAAK,SAAAC,GACJ,GAAwC,IAApCA,EAAIC,KAAK0S,gBAAgBxS,OAAc,CACzC,IAAMqR,EAAkB,CACtBN,MAAO7Q,SAASL,EAAIC,KAAK0S,gBAAgB,IACzC1T,MAAO,GAET,EAAKqB,SAAS,CACZkR,gBAAiBA,QAItBhR,OAAM,WACL,EAAKF,UAAS,gBAAGkR,EAAH,EAAGA,gBAAH,MAA0B,CACtCA,gBAAgB,2BACXA,GADU,IAEbvS,MAAOuS,EAAgBvS,MAAQ,a,yBAazC,SAAY2T,EAAUC,GASpB,MAAO,CACL,CAAC9U,MAAO8U,EAAapD,YAAY,EAAME,gBAAgB,GACvD,CAAC5R,MATC6U,EAAS3T,OAASxP,EAAU2H,wBAClB,iBACe,IAApBwb,EAAS1B,MACJ,aAEA0B,EAAS1B,MAAMtR,iBAIR6P,YAAY,EAAOE,gBAAgB,M,iCAS1D,WAAuB,IAGjBmD,EAHgB,EACwBpX,KAAKoD,MAAzCsS,EADY,EACZA,iBAAkBE,EADN,EACMA,cAG1B,GAAIF,EAAiBnS,OAASxP,EAAU2H,yBACtCka,EAAcrS,OAASxP,EAAU2H,wBACjC0b,EAAe,qBACZ,IAAgC,IAA5B1B,EAAiBF,QAAyC,IAAzBI,EAAcJ,MACtD4B,EAAe,iBACZ,CACH,IAAMC,EAAW3B,EAAiBF,MAAQI,EAAcJ,MACxD4B,EAAerL,KAAKuL,MAAMD,GAAUnT,iBAGtC,MAAO,CACL,CAAC7B,MAAO,iBAAkB0R,YAAY,EAAME,gBAAgB,GAC5D,CAAC5R,MAAO+U,EAAcrD,YAAY,EAAOE,gBAAgB,M,kCAS7D,WAAwB,IAGlBsD,EAHiB,EACkBvX,KAAKoD,MAApCmS,EADa,EACbA,YAAaK,EADA,EACAA,cAGrB,GAAIL,EAAYhS,OAASxP,EAAU2H,yBACjCka,EAAcrS,OAASxP,EAAU2H,wBACjC6b,EAAgB,qBACb,IAA2B,IAAvBhC,EAAYC,QAAyC,IAAzBI,EAAcJ,MACjD+B,EAAgB,iBACb,CAEHA,GADoBhC,EAAYC,MAAQI,EAAcJ,MAAQ,MAClCrQ,QAAQ,GAAK,KAG3C,MAAO,CACL,CAAC9C,MAAO,kBAAmB0R,YAAY,EAAME,gBAAgB,GAC7D,CAAC5R,MAAOkV,EAAexD,YAAY,EAAOE,gBAAgB,M,iCAS9D,WAAuB,IAGjBuD,EAHgB,EAC2BxX,KAAKoD,MAA5CuS,EADY,EACZA,oBAAqBC,EADT,EACSA,cAG7B,GAAID,EAAoBpS,OAASxP,EAAU2H,yBACzCka,EAAcrS,OAASxP,EAAU2H,wBACjC8b,EAAe,qBACZ,IAAmC,IAA/B7B,EAAoBH,QAAyC,IAAzBI,EAAcJ,MACzDgC,EAAe,iBACZ,CACH,IAAMC,EAAW7B,EAAcJ,MAAQG,EAAoBH,MACrDkC,EAAkB/B,EAAoBH,MAAQI,EAAcJ,MAAQ,IAC1EgC,EACEzL,KAAKuL,MAAMG,GAAUvT,iBAAmB,KAAOwT,EAAgBvS,QAAQ,GAAK,KAGhF,MAAO,CACL,CAAC9C,MAAO,eAAgB0R,YAAY,EAAME,gBAAgB,GAC1D,CAAC5R,MAAOmV,EAAczD,YAAY,EAAOE,gBAAgB,M,oCAS7D,WAA0B,IAGpB0D,EAFIpC,EAAgBvV,KAAKoD,MAArBmS,YAGR,GAAIA,EAAYhS,OAASxP,EAAU2H,wBACjCic,EAAkB,qBACf,IAA2B,IAAvBpC,EAAYC,MACnBmC,EAAkB,iBACf,CAEHA,GADsBpC,EAAYC,MAAQ,MACVrQ,QAAQ,GAAK,KAG/C,MAAO,CACL,CAAC9C,MAAO,SAAU0R,YAAY,EAAME,gBAAgB,GACpD,CAAC5R,MAAOsV,EAAiB5D,YAAY,EAAOE,gBAAgB,M,yCAShE,WAA+B,IAAD,EAC6BjU,KAAK9D,MAAtD0b,EADoB,EACpBA,6BACR,MAAO,CACL,CAACvV,MAAO,aAAc0R,YAAY,EAAME,gBAAgB,GACxD,CACEF,YAAY,EACZE,gBAAgB,EAChBS,OAAQ,CACNE,UARsB,EACUiD,eAQhCtG,KAAM,aACNuD,SAAU8C,S,GAreYzX,a,8BCoFjB2X,G,kDA3Db,WAAY5b,GAAQ,IAAD,8BACjB,cAAMA,IAGDkY,YAAc,EAAKA,YAAYzU,KAAjB,gBAJF,E,0CAYnB,WAAU,IAAD,EACiCK,KAAK9D,MAArC+K,EADD,EACCA,WAAYqK,EADb,EACaA,KAAMrP,EADnB,EACmBA,UAE1B,OACE,cAAC,GAAD,CACEgF,WAAYA,EACZhF,UAAWA,EACX2R,UAAW,CACT,CAACvR,MAAO,cAAe0R,YAAY,EAAME,gBAAgB,GACzD,CAAC5R,MAAO,QAAS0R,YAAY,EAAOE,gBAAgB,IAEtDG,YAAapU,KAAKoU,YAClBP,mBAAmB,EACnBzR,MAAOkP,EAAKC,S,yBAelB,WAAe,IAET0D,EADajV,KAAK9D,MAAdoV,KACYyG,YAAY3L,KAAI,SAAC4L,EAAY1F,GAC/C,MAAO,CACLtB,OAAQsB,EACRmC,MAAO,CACL,CAACpS,MAAO2V,EAAWzG,KAAMwC,YAAY,EAAME,gBAAgB,GAC3D,CAAC5R,MAAO2V,EAAWxG,SAAStN,iBAAkB6P,YAAY,EAAOE,gBAAgB,QAQvF,OAFAgB,EAAS9C,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEoC,MAAM,GAAGpS,MAAQ+P,EAAEqC,MAAM,GAAGpS,SAEhD4S,M,GAlFsB9U,aCA3B8X,GAAW9W,IAAOG,IAAV,gHAQR4W,GAAW/W,IAAOG,IAAV,iYAEDvN,EAAUyG,+CAAiD,MAI5D,SAAA0B,GAAK,OAAIA,EAAMkW,EAAI,QACpB,SAAAlW,GAAK,OAAIA,EAAMmW,EAAI,QAIxB,gBAAGpL,EAAH,EAAGA,WAAYL,EAAf,EAAeA,oBAAqBwL,EAApC,EAAoCA,EAApC,OACEnL,IAAeZ,GAAYE,IAAMK,GAAlC,0BACSwL,EAAIre,EAAUmF,aAAe,KADtC,cAGA+N,IAAeZ,GAAYC,IAA3B,2BACUvS,EAAU0G,wCAA0C,KAD9D,gBAOD0d,GAAoBhX,YAAO2W,GAAP3W,CAAH,iEAEL,SAAAjF,GAAK,OAAIA,EAAME,MAAMwB,kCAOjCwa,G,4JAgDJ,WAAU,IAAD,EACuEpY,KAAK9D,MAA3E+K,EADD,EACCA,WAAYqK,EADb,EACaA,KAAM1J,EADnB,EACmBA,OAAQhB,EAD3B,EAC2BA,oBAAqBxK,EADhD,EACgDA,MAAOuL,EADvD,EACuDA,MAAOyK,EAD9D,EAC8DA,EAAGC,EADjE,EACiEA,EAElEgG,EAAmBpR,IAAeZ,GAAYC,GAClDvS,EAAU0G,wCACV1G,EAAUyG,+CAGN8d,EAAe,GAGfC,EAAanG,EAAIzK,EAAQ,EAAI,GAAK,EAExC,OACU,MAAR2J,GACE,eAAC,WAAD,WACE,cAAC2G,GAAD,UACE,cAAC,KAAD,CAAOtQ,MAAOA,EAAOC,OAAQA,EAA7B,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CACEwK,EAAGA,EACHC,EAAGA,EACH1K,MAhBY,GAiBZC,OAjBY,GAkBZsB,KAAM9M,EAAM2B,wBACZ6K,OAAQxM,EAAM2B,0BAEhB,cAAC,KAAD,CACEqU,EAAGA,EACHC,EAAGA,EACH1K,MAvBY6Q,GAwBZ5Q,OAxBY4Q,GAyBZ5P,OAAQxM,EAAM2B,0BAEhB,cAAC,KAAD,CACEqU,EAAGA,EACHC,EAAGA,EACHoG,QAAQ,QACRC,SAAS,QACTC,OAAQ,CACN,EACA,EACAJ,EAAaD,GACb,GACAC,GAAcF,EAAmBC,EAAe,IAChD,IAEF1P,OAAQxM,EAAM2B,iCAKtB,cAACma,GAAD,CACEjR,WAAYA,EACZL,oBAAqBA,EACrBwL,EACiB,IAAfmG,EACEnG,EAAIkG,EACJlG,EAAImG,EAAaD,EAAeD,EAGpChG,EAAGA,EAAI,IAAMpL,IAAeZ,GAAYC,GAAK,EAAI,GATnD,SAWE,cAAC6R,GAAD,CAAmBlR,WAAYA,EAAYqK,KAAMA,a,GA/GlCnR,aAuHZ4M,eAAUqL,IC5KV,OAA0B,8CCA1B,OAA0B,gDCuBnCQ,G,4JA8BJ,WAAU,IAAD,EACyE5Y,KAAK9D,MAA7E+K,EADD,EACCA,WAAYL,EADb,EACaA,oBAAqBiR,EADlC,EACkCA,eAAgBgB,EADlD,EACkDA,YAAazc,EAD/D,EAC+DA,MAEtE,OACE,cAAC,UAAD,UAAS,YAAe,IAIlBwL,EAJMuM,EAAW,EAAXA,KAGJxM,EAA+B,qBAAfwM,EAAKxM,MAAyBwM,EAAKxM,MAAQ,EAWjE,OAPEC,EAFEX,IAAeZ,GAAYK,IAC7BO,IAAeZ,GAAYI,IAAMQ,IAAeZ,GAAYG,GACxC,IAAVmB,EACRA,GACG5T,EAAUmF,aAAenF,EAAUwG,+CACtC,EAGOoN,EAET,cAAC,GAAD,CACEV,WAAYA,EACZW,OAAQA,EACRhB,oBAAqBA,EACrBiR,eAAgBA,EAChBgB,YAAaA,EACbzc,MAAOA,EACPuL,MAAOA,W,GAxDgBxH,aAoE7B2Y,G,kDAqCJ,WAAY5c,GAAQ,IAAD,8BACjB,cAAMA,IAED6c,QAAU,KACf,EAAKC,gBAAkB,KAGvB,EAAKC,WAAa,EAAKA,WAAWtZ,KAAhB,gBAMlB,EAAKuZ,oBAAsBrZ,YAAS,KAAK,EAAM,EAAKoZ,YAEpD,EAAK7V,MAAQ,CACX+V,OAAQ,GACRC,WAAY,GACZC,WAAY,EACZC,YAAa,KACb/V,OAAO,GApBQ,E,qDA4BnB,WAAqB,IAAD,OACG,OAAjBvD,KAAK+Y,UAMP/Y,KAAK+Y,QAAQQ,YAAYxlB,EAAU6H,yBAA0B,GAI7DoE,KAAK4E,SAAS,CACZyU,WAAY,KAKhBlV,IAAMC,IADG,qDAENC,MAAK,SAAAC,GAEJ,IAAI+M,EAAY/M,EAAIC,KAAK6H,KAAI,SAAC/J,GAE5B,IAAMiP,EAAOjP,EAAMkP,KAAKnL,QAAQ,aAAc,IAI9C,MAF4B,uBAAxB/D,EAAMmX,gBACRnX,EAAMmX,cAAgB,mBACjB,CACLC,IAAKpX,EAAMoX,IACX5d,IAAKwG,EAAMqX,SACX5d,IAAKuG,EAAMsX,UACXrI,KAAMA,EACNsI,GAAIvX,EAAMmX,cACVhI,SAAU7M,SAAStC,EAAMoP,iBAK7BJ,EAAYA,EAAUK,QAAO,SAACnR,GAC5B,OAAOA,EAASiR,SAAW,KAI7B,IAAMqI,EAAqB,IAAIzI,IAC/BC,EAAUO,SAAQ,SAACrR,GACjB,IAAIuZ,EAAkBD,EAAmBzV,IAAI7D,EAAS+Q,MACvB,qBAApBwI,IACTA,EAAkB,GAClBD,EAAmB9Y,IAAIR,EAAS+Q,KAAMwI,IAExCA,EAAgB/H,KAAKxR,MAMvB,IAAM4Y,EAAS,GACfU,EAAmBjI,SAAQ,SAACkI,GAC1B,IAAIC,EAAqB,GACzBD,EAAgBlI,SAAQ,SAACrR,GAEvB,IAAI+Q,EAAOyI,EAAmBC,MAAK,SAAA1I,GAAI,OACrC,EAAK2I,kBAAkB1Z,EAAS1E,IAAK0E,EAASzE,IAAKwV,EAAKzV,IAAKyV,EAAKxV,MAAQ,OAIxD,qBAATwV,IACTA,EAAO,CACLC,KAAMhR,EAAS+Q,KACfzV,IAAK0E,EAAS1E,IACdC,IAAKyE,EAASzE,IACdic,YAAa,IAEfgC,EAAmBhI,KAAKT,IAI1BA,EAAKyG,YAAYhG,KAAK,CAACR,KAAMhR,EAASqZ,GAAIpI,SAAUjR,EAASiR,cAI/D2H,EAAOpH,KAAP,MAAAoH,EAAeY,MAQjB,IAJA,IAEMG,EAAU,IAAIC,IAChBC,EAAI,EAFgB,IAGjBF,EAAQ/F,MAA0B,CACvC,IAAIkG,EAAQpI,MAAMZ,EAAU5M,QAAQyE,OAAOkD,KAAI,SAACkO,EAAGhI,GAAJ,OAAcA,KAM7D,GALA+H,EAAMlI,MAAK,kBAAMpG,KAAKwO,SAAW,OACjCF,EAAQA,EAAMlO,MAAM,EAPC,IAQfgG,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAIC,KAC1B6H,EAAQM,IAAIH,GAERD,IAAgB,GAAVF,EACR,MAMJ,IAAIO,EAAc,EACZrB,EAAa,GACnBc,EAAQtI,SAAQ,SAAC8I,GACf,IAAK,IAAIN,EAAI,EAAGA,EAAIM,EAAOjW,OAAQ2V,IACjC,IAAK,IAAIO,EAAIP,EAAI,EAAGO,EAAID,EAAOjW,OAAQkW,IACjCtJ,EAAUqJ,EAAON,IAAIve,MAAQwV,EAAUqJ,EAAOC,IAAI9e,KACpDwV,EAAUqJ,EAAON,IAAIte,MAAQuV,EAAUqJ,EAAOC,IAAI7e,KAElDsd,EAAWrH,KAAK,CACd0I,YAAaA,EACbG,SAAUvJ,EAAUqJ,EAAON,IAAIve,IAC/Bgf,SAAUxJ,EAAUqJ,EAAON,IAAIte,IAC/Bgf,OAAQzJ,EAAUqJ,EAAOC,IAAI9e,IAC7Bkf,OAAQ1J,EAAUqJ,EAAOC,IAAI7e,IAC7Bkf,kBAAmBjP,KAAKwO,WAKhCE,OAGF,EAAK7V,SAAS,CACZuU,OAAQA,EACRC,WAAYA,OAGftU,OAAM,WACL,EAAKF,SAAS,CACZrB,OAAO,S,kCASf,WAE+B,OAAzBvD,KAAKgZ,kBACPrV,cAAc3D,KAAKgZ,iBACnBhZ,KAAKgZ,gBAAkB,Q,oBAS3B,WAAU,IAoCJiC,EACAC,EArCG,SASHlb,KAAK9D,MAPP+K,EAFK,EAELA,WACAW,EAHK,EAGLA,OACAhB,EAJK,EAILA,oBACAiR,EALK,EAKLA,eACAgB,EANK,EAMLA,YACAzc,EAPK,EAOLA,MACAuL,EARK,EAQLA,MARK,EAcH3H,KAAKoD,MAHP+V,EAXK,EAWLA,OACAC,EAZK,EAYLA,WACAC,EAbK,EAaLA,WAEIC,EAAgBtZ,KAAKoD,MAArBkW,YAEA6B,EAAatC,EAAc,IAAO,GAClCuC,EAAYjC,EAAO1U,OAAS,EAG5B4W,EAAM,4BAAwBF,EAAxB,KACNG,EAAI,6BAAyBH,EAAzB,KACJI,EAAU,4BAAwBJ,EAAxB,KACVK,EAAW,6BAAyBL,EAAzB,KACXM,EAAI,6BAAyBN,EAAzB,KACNO,EAAgB,CAClB,CAACD,EAAMA,GACP,CAACJ,EAAQC,GACT,CAACC,EAAYC,GACb,CAACC,EAAMA,GACP,CAACH,EAAMD,GACP,CAACG,EAAaD,IAMhB,GAAoB,OAAhBjC,GAAyC,OAAjBtZ,KAAK+Y,QAAkB,CACjD,IAAM4C,EACJ3b,KAAK+Y,QAAQ6C,gBAAgBtC,EAAYzd,IAAKyd,EAAYxd,IAAKwd,EAAYtW,KAC7EiY,EAAWU,EAAOvJ,EAClB8I,EAAWS,EAAOtJ,OAGlBiH,EAAc,KACd2B,EAAW,EACXC,EAAW,EAOb,OACE,eAAC,WAAD,WACE,cAAC,GAAD,CACEjU,WAAYA,EACZqK,KAAMgI,EACN1S,oBAAqBA,EACrBe,MAAOA,EACPC,OAAQA,EACRwK,EAAG6I,EACH5I,EAAG6I,IAEL,cAAC,IAAD,CACE1K,QAAS,IACTqL,KAAMT,EAFR,SAIE,cAAC,KAAD,CACEU,IAAK,SAACC,GAAS,EAAKhD,QAAUgD,GAE9BC,cAAenD,EAAcoD,GAAoBC,GACjDd,UAAWA,EACXe,iBAAgBtD,GAAcuC,EAC9BgB,gBAAiBhgB,EAAMyB,gCACvBwe,mBAAoB,IACpBC,aAAc,WACS,OAAjB,EAAKvD,UACP,EAAKA,QAAQwD,WAAWC,YAAc,MAE1CC,WAAW,EACXC,gBAAgB,gBAChB/U,MAAOA,EACPC,OAAQA,EACR+U,OAAQ3c,KAAKkZ,oBACb0D,oBAAqB,SAAAC,GAGnB,IAAMC,EACkB,qBAAfD,EAAIE,QAAyC,OAAfF,EAAIE,QACX,QAA9BF,EAAIE,OAAOC,eACPC,EACW,qBAARJ,GAA+B,OAARA,GAAuC,WAAvBA,EAAIG,eACpD,OAAQF,IAAUG,GAGpBC,SAAUrF,EAAiBuB,EAAa,GACxC+D,UAAW,GACXC,cAAe,GACfC,WAAY,EACZrC,kBAAmB,SAAAsC,GAAS,OAAIA,EAAUtC,mBAC1CuC,mBAAoB,IACpBC,SAAU,SAAAF,GAAS,OAAI5B,EAAc4B,EAAU7C,YAAciB,EAAcjX,SAC3EgZ,uBAAwB,EAExBC,WAAYvE,EACZwE,WAAY,kCACZC,UAAW,iBAAM,IASjBC,eAAgB,EAChBC,aAAc,SAAAxM,GACC,OAATA,GAEF,EAAK1M,SAAS,CACZ0U,YAAahI,IAOc,OAAzB,EAAK0H,kBACP,EAAKA,gBAAkBtV,aAAY,kBAAM,EAAKxD,gBAAe,QAIlC,OAAzB,EAAK8Y,kBACPrV,cAAc,EAAKqV,iBACnB,EAAKA,gBAAkB,MAIzB,EAAKpU,SAAS,CACZ0U,YAAa,SAKnByE,WAAY5E,EACZ6E,WAAY,GACZC,WAAY,kBAAM7hB,EAAM0B,4BACxBogB,cAAe,KACfC,YAAa,GAAM9E,EACnB+E,aAAa,W,wBAevB,SAAWC,GACTre,KAAK4E,SAAS,CACZyU,WAAYtN,KAAKuS,IAAID,EAAItiB,SAAWhI,EAAU6H,yBAAyBG,SAAU,O,+BAarF,SAAkBwiB,EAAMC,EAAMC,EAAMC,GAClC,GAAIH,IAASE,GAAQD,IAASE,EAC5B,OAAO,EAET,IAAMC,EAAO3e,KAAK4e,QAAQH,EAAKF,GACzBM,EAAO7e,KAAK4e,QAAQF,EAAKF,GACzBtN,EACJnF,KAAK+S,IAAIH,EAAK,GAAK5S,KAAK+S,IAAIH,EAAK,GACjC5S,KAAKgT,IAAI/e,KAAK4e,QAAQL,IAASxS,KAAKgT,IAAI/e,KAAK4e,QAAQH,IACrD1S,KAAK+S,IAAID,EAAK,GAAK9S,KAAK+S,IAAID,EAAK,GAInC,OAFsB,MADZ,EAAI9S,KAAKiT,MAAMjT,KAAKkT,KAAK/N,GAAInF,KAAKkT,KAAK,EAAE/N,O,qBAYrD,SAAQgO,GACN,OAAOA,EAAMnT,KAAKoT,GAAK,Q,GAtaAhf,aA2aZ4M,eAAU6L,ICnfnBwG,GAAiBje,YAAO6Q,GAAP7Q,CAAH,iEAEF,SAAAjF,GAAK,OAAIA,EAAME,MAAMwB,kCAIjCyhB,GAAYle,IAAOG,IAAV,6DAMTge,GAAYne,YAAOC,IAAPD,CAAH,6FAEFpN,EAAUwG,8CAAgD,KAClDxG,EAAU6G,oBAAsB,MAC/C,gBAAGqM,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYE,IAA5B,wCACiBxS,EAAU8G,2BAA6B,KADxD,qCAEkB9G,EAAU8G,2BAA6B,KAFzD,oCAKCoM,IAAeZ,GAAYC,IAA5B,uCACiBvS,EAAU6G,oBAAsB,KADjD,qCAEkB7G,EAAU6G,oBAAsB,KAFlD,sCASD2kB,GAAgBpe,YAAOC,IAAPD,CAAH,6EAEGpN,EAAU8G,2BAA6B,MACvD,gBAAGoM,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,IAAMQ,IAAeZ,GAAYG,GAA9F,iCAGCS,IAAeZ,GAAYE,IAA5B,4CACqBxS,EAAU8G,2BAA2B,EAAI,KAD9D,gBAGCoM,IAAeZ,GAAYC,IAA5B,yCACmBvS,EAAU6G,oBAAsB,KADnD,sCAQD4kB,GAAqBre,YAAOoe,GAAPpe,CAAH,0EAELpN,EAAU8G,2BAA6B,MACpD,gBAAGoM,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,yCAODmZ,GAAoBte,YAAOoe,GAAPpe,CAAH,oEAEDpN,EAAU8G,2BAA6B,MAIvD6kB,GAAiBve,YAAO6T,GAAP7T,CAAH,iEAEF,SAAAjF,GAAK,OAAIA,EAAME,MAAMwB,kCAIjC+hB,GAAmBxe,YAAOmU,GAAPnU,CAAH,iEAEJ,SAAAjF,GAAK,OAAIA,EAAME,MAAMwB,kCAIjCgiB,GAAeze,IAAOG,IAAV,6HAGW,OAASvN,EAAUwG,8CAAgD,MAK1FslB,GAAW1e,IAAOG,IAAV,uHAQRwe,GAAW3e,IAAOG,IAAV,wIAYRye,G,kDAgBJ,WAAY7jB,GAAQ,IAAD,8BACjB,cAAMA,IACDkH,MAAQ,CACXyU,gBAAgB,GAIlB,EAAKD,6BAA+B,EAAKA,6BAA6BjY,KAAlC,gBAPnB,E,qDAcnB,WACE,2EAIAqgB,EADuChgB,KAAK9D,MAApC8jB,6BACmB,K,kCAO7B,YAGEA,EADuChgB,KAAK9D,MAApC8jB,6BACmB,K,oBAQ7B,WAAU,IACA/Y,EAAejH,KAAK9D,MAApB+K,WAER,OAAIA,IAAeZ,GAAYK,IAC7BO,IAAeZ,GAAYI,IAAMQ,IAAeZ,GAAYG,GAE1D,eAACoZ,GAAD,WACE,cAACC,GAAD,UACI7f,KAAKigB,aAET,cAACH,GAAD,UACI9f,KAAKkgB,gBAOX,eAAC,WAAD,WACE,cAACb,GAAD,CAAWxc,MAAI,EAACoE,WAAYA,EAA5B,SACIjH,KAAKigB,aAEPjgB,KAAKkgB,gB,sBAWf,WAAY,IAAD,EACgDlgB,KAAK9D,MAAtD+K,EADC,EACDA,WAAYL,EADX,EACWA,oBAAqBiS,EADhC,EACgCA,YACjChB,EAAmB7X,KAAKoD,MAAxByU,eACR,OACE,cAAC,GAAD,CACE5Q,WAAYA,EACZL,oBAAqBA,EACrBiR,eAAgBA,EAChBgB,YAAaA,M,sBAUnB,WAAY,IACF5R,EAAejH,KAAK9D,MAApB+K,WACA4Q,EAAmB7X,KAAKoD,MAAxByU,eACR,OACE,eAACyH,GAAD,CAAW9c,WAAS,EAClBC,UAAU,MACVC,QAAQ,gBACRC,WAAW,aACXsE,WAAYA,EAJd,UAME,cAACuY,GAAD,CAAoB3c,MAAI,EAACoE,WAAYA,EAArC,SACE,cAAC,IAAD,CACEuJ,QAAS,IADX,SAGE,cAACmP,GAAD,CACE1Y,WAAYA,EACZ2Q,6BAA8B5X,KAAK4X,6BACnCC,eAAgBA,QAItB,cAAC0H,GAAD,CAAe1c,MAAI,EAACoE,WAAYA,EAAhC,SACE,cAAC,IAAD,CACEwJ,MAAO,GACPD,QAAS,IAFX,SAIE,cAACkP,GAAD,CAAgBzY,WAAYA,QAGhC,cAACwY,GAAD,CAAmB5c,MAAI,EAACoE,WAAYA,EAApC,SACE,cAAC,IAAD,CACEwJ,MAAO,IACPD,QAAS,IAFX,SAIE,cAAC4O,GAAD,CACEnY,WAAYA,EACZM,YAAaxT,EAAUwG,yD,0CAclC,SAA6B4lB,GAC5BngB,KAAK4E,SAAS,CACZiT,eAAgBsI,EAAMC,OAAOzL,c,GA5JLvU,GAAxB2f,GACGrT,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BjG,oBAAqB+F,IAAU0T,KAAKxT,YAwJzBkT,U,iFCnRTO,G,OAAUC,GAAW,CAAEC,QAAQ,IAKxBC,GAAmBzsB,OAAOC,OAAO,CAC5CysB,SAAU,EACVC,QAAS,EACTC,aAAc,IAMHC,GAAb,kDAME,WAAYC,EAASC,GAAS,IAAD,EAE3B,OAF2B,oBAC3B,cAAMD,GACEC,GACR,KAAK,IACH,EAAKC,UAAYP,GAAiBE,QAClC,MACF,KAAK,IACH,EAAKK,UAAYP,GAAiBC,SAClC,MACF,QACE,EAAKM,UAAYP,GAAiBG,aAVT,SAN/B,uBAAkC1d,QAyBrB+d,GAOX,WAAYC,EAAoBC,GAAa,oBAC3CnhB,KAAKmhB,WAAaA,EAClBnhB,KAAKohB,KAAOF,EAAmBG,uBAAuBD,KACtD,IAAME,EAAcJ,EAAmBK,SAAS7S,UAAUpN,IAAI,KAASkgB,WACvExhB,KAAK0O,UAAY,IAAIpD,KAAKgW,GAC1B,IAAMG,EAAaP,EAAmBO,WAClCA,EAAWhd,QAAU,GACvBzE,KAAK4K,KAAO6W,EAAW,GAAG7W,KAC1B5K,KAAK+gB,OAASU,EAAW,GAAGV,OAC5B/gB,KAAK0hB,gBAAkBD,EAAW,GAAGE,QAAQC,QAC7C5hB,KAAK6hB,OAAS,IAAIC,KAAUL,EAAW,GAAGI,OAAOxf,OAErB,gBAAvBof,EAAW,GAAG7W,MAAiD,SAAvB6W,EAAW,GAAG7W,MACxD5K,KAAK6hB,OAAOE,WACb/hB,KAAK6hB,OAAS7hB,KAAK6hB,OAAOG,aAI5BhiB,KAAK4K,KAAO,GACZ5K,KAAK+gB,OAAS,GACd/gB,KAAK0hB,gBAAkB,GACvB1hB,KAAK6hB,OAAS,IAAIC,KAAU,IAE1BL,EAAWhd,QAAU,GAA4B,gBAAvBgd,EAAW,GAAG7W,KAC1C5K,KAAKiiB,gBAAkBR,EAAW,GAAGE,QAAQC,QAE7C5hB,KAAKiiB,gBAAkB,GACrBR,EAAWhd,QAAU,GAA4B,QAAvBgd,EAAW,GAAG7W,KAC1C5K,KAAKkiB,IAAM,IAAIJ,MAAWL,EAAW,GAAGI,OAAOxf,OAE/CrC,KAAKkiB,IAAM,IAAIJ,KAAU,GAC3B9hB,KAAKmiB,KAAO,IAAIL,KAAUZ,EAAmBK,SAASY,OAOrCC,G,WAInB,aAAe,oBACbpiB,KAAKmE,MAAQA,IAAMke,OAAO,CACxBC,QAAS,4CACTC,OAAQ,OACRC,iBAAkB,SAACje,GAAD,OAAU+b,GAAQmC,UAAUle,IAC9Cme,kBAAmB,SAACne,GAAD,OAAU+b,GAAQqC,MAAMpe,IAC3Cqe,QAAS,CAAE,eAAgB,oCAG7B5iB,KAAK6iB,kBAAoB7iB,KAAK8iB,eAAeze,MAAK,SAAAC,GAAG,OACnDA,EAAIye,oBAAoB/I,MACtB,SAAA6I,GAAiB,MAAqC,sBAAjCA,EAAkBG,iB,8FAW7C,WAAwBC,GAAxB,kBAAA/R,EAAA,+EAE2BlR,KAAKkjB,wBAAwBD,GAFxD,cAEUE,EAFV,yBAGW,IAAIrB,KAAUqB,EAASC,SAAS,GAAG/gB,QAH9C,yDAOW,IAAIwe,GACT,KAAMC,QAAS3c,IAAMkf,aAAN,4CAA4B,KAAOF,gBAAnC,aAA4B,EAAiBpC,YAASuC,IAR3E,yD,+HAgBA,+BAAApS,EAAA,+EAE2BlR,KAAKujB,gBAFhC,cAEUJ,EAFV,yBAGWA,EAASK,yBAAyBlR,OAH7C,yDAOW,IAAIuO,GACT,KAAMC,QAAS3c,IAAMkf,aAAN,4CAA4B,KAAOF,gBAAnC,aAA4B,EAAiBpC,YAASuC,IAR3E,yD,2HAkBA,WAAqBG,GAArB,kBAAAvS,EAAA,+EAEuClR,KAAK0jB,mBAAmBD,GAF/D,UAGqD,KAD3CE,EAFV,QAG6BC,aAAanf,OAH1C,yCAIa,IAAIoc,GAAa,yBAA0B,MAJxD,gCAMW,IAAII,GACT0C,EAAqBC,aAAa,GAAGC,YACrCF,EAAqBC,aAAa,GAAGE,iBAAiBxR,QAR5D,yDAYW,IAAIuO,GACT,KAAMC,QAAS3c,IAAMkf,aAAN,4CAA4B,KAAOF,gBAAnC,aAA4B,EAAiBpC,YAASuC,IAb3E,yD,6HA2BA,WAAsBS,EAAOC,EAAexb,GAA5C,0BAAA0I,EAAA,mEAKQ8S,EALR,gBAMM7C,EAAa6C,EANnB,sCAS6BhkB,KAAKujB,gBATlC,OASYJ,EATZ,OAUMhC,EAAagC,EAASK,yBAAyBlR,MAVrD,OAYQ9J,IACF2Y,EAAapV,KAAKO,IAAI6U,EAAa3Y,GAAS,IACxCyb,EAAmBlY,KAAKuS,IAAIyF,EAAO5C,EAAa,GAChDyC,EAAe,GACZxJ,EAAI,EAhBjB,aAgBoBA,EAAI6J,GAhBxB,6BAiBML,EAjBN,UAiB8B5jB,KAAKkkB,sBAAsB/C,EAAa/G,GAjBtE,yBAiBmBrI,KAjBnB,wBAgB0CqI,IAhB1C,iDAkBWwJ,GAlBX,2DAsBW,IAAI/C,GACT,KAAMC,QAAS3c,IAAMkf,aAAN,4CAA4B,KAAOF,gBAAnC,aAA4B,EAAiBpC,YAASuC,IAvB3E,0D,0IAkCA,WAA+BL,GAA/B,oBAAA/R,EAAA,+EAE2BlR,KAAKmkB,sBAAsBlB,GAFtD,cAEUE,EAFV,gBAG+BiB,QAAQC,IACjClB,EAASS,aAAaxX,KAAI,SAACkY,GACzB,OAAO,IAAIrD,GACTqD,EAAiBT,YAAaS,EAAiBR,iBAAiBxR,WAN1E,cAGUsR,EAHV,yBASWA,EAAaW,WATxB,2DAaW,IAAI1D,GACT,KAAMC,QAAS3c,IAAMkf,aAAN,4CAA4B,KAAOF,gBAAnC,aAA4B,EAAiBpC,YAASuC,IAd3E,0D,mIAwBA,WAA4BnC,GAA5B,gBAAAjQ,EAAA,sEACyBlR,KAAKwkB,aAAarD,GAD3C,cACQgC,EADR,yBAES,IAAIlC,GAAYkC,EAAS3e,MAAMof,aAAa,GAAIzC,IAFzD,gD,qHAYA,WAAcnb,EAAKzB,GAAnB,UAAA2M,EAAA,sEACgBlR,KAAKmE,MAAMsgB,QAAQ,CAAEze,IAAKA,EAAKzB,KAAMA,IADrD,uCAC8DA,MAD9D,gD,mFAUA,WACE,OAAOvE,KAAKykB,QAAQ,gBAAiB,M,oEAQvC,6BAAAvT,EAAA,sEACkClR,KAAK6iB,kBADvC,cACQA,EADR,yBAES7iB,KAAKykB,QACV,kBAAmB,CACjBC,mBAAoB7B,KAJ1B,gD,oIAeA,WAA8BI,GAA9B,gBAAA/R,EAAA,sEACkClR,KAAK6iB,kBADvC,cACQA,EADR,yBAES7iB,KAAKykB,QACV,mBAAoB,CAClBC,mBAAoB7B,EACpB8B,mBAAoB,CAAC/C,QAASqB,MALpC,gD,0HAiBA,WAAmB9B,GAAnB,gBAAAjQ,EAAA,sEACkClR,KAAK6iB,kBADvC,cACQA,EADR,yBAES7iB,KAAKykB,QACV,SAAU,CACRC,mBAAoB7B,EACpBiB,iBAAkB,CAACxR,MAAO6O,MALhC,gD,mIAiBA,WAA4B8B,GAA5B,gBAAA/R,EAAA,sEACkClR,KAAK6iB,kBADvC,cACQA,EADR,yBAES7iB,KAAKykB,QACV,uBAAwB,CACtBC,mBAAoB7B,EACpB8B,mBAAoB,CAAC/C,QAASqB,MALpC,gD,gIAgBA,WAAyBQ,GAAzB,gBAAAvS,EAAA,sEACkClR,KAAK6iB,kBADvC,cACQA,EADR,yBAES7iB,KAAKykB,QACV,uBAAwB,CACtBC,mBAAoB7B,EACpBxB,uBAAwB,CAACD,KAAMqC,MALrC,gD,8DCnUa,SAASmB,GAAcxD,EAAcyD,GAGlD,YAFkBvB,IAAduB,IACFA,EAAY,IACI,IAAdA,GAAmBzD,EAAK3c,OAASogB,EACrBzD,EAAK0D,UAAU,EAAG/Y,KAAKO,IAAIuY,EAAY,EAAG,IAEzC,MADFzD,EAAK2D,OAAO3D,EAAK3c,OAAS,GAIhC2c,ECRI,SAAS4D,GACtBC,EAA0BC,GAQ1B,OANID,aAAkBnD,KACdoD,EACJD,EAAOE,mBAAmB,KAAW3D,WAAayD,EAAO3jB,IAAI,KAAWkgB,WAGpE0D,EAAcnZ,KAAKuL,MAAM2N,EAAS,KAAaA,EAAS,KACrD/gB,oBAAeof,EAAW,CAAC,sBAAyB,EAAG,sBAAyB,I,wBCd7F8B,KAAQC,iBAAiBC,IACzB,I,qBACeC,GADC,IAAIH,KAAQ,SCatB1V,GAAcvO,YAAOC,IAAPD,CAAH,2KAEEpN,EAAU8G,2BAA6B,KACpC9G,EAAU8G,2BAA6B,KACzC9G,EAAU8G,2BAA6B,KACtC9G,EAAU8G,2BAA6B,KAC1C,WAAagJ,WAAS8L,SAAW,MAAQC,SAAOC,WAC5D,qBAAG5I,aACYZ,GAAYC,IAA3B,iCACiBvS,EAAU6G,oBAAsB,KADjD,sCAEoB7G,EAAU6G,oBAAsB,KAFpD,oCAGkB7G,EAAU6G,oBAAsB,KAHlD,qCAImB7G,EAAU6G,oBAAsB,KAJnD,gBAUA4qB,GAAsBrkB,IAAOG,IAAV,mSAKVmkB,KAAOC,OAEhB,qBAAGze,aACYZ,GAAYC,IAA3B,6CAOAqf,GAAyBxkB,YAAOykB,KAAPzkB,CAAH,4DAEf,SAAAjF,GAAK,OAAIA,EAAME,MAAMa,6BAI5B8S,GAAW5O,YAAOC,IAAPD,CAAH,6DAMR0kB,GAAY1kB,YAAOkS,GAAPlS,CAAH,iEAEG,SAAAjF,GAAK,OAAIA,EAAME,MAAMqB,2BAIjCqoB,GAAiB3kB,YAAOU,IAAPV,CAAH,kIAEDpN,EAAUwD,aACZxD,EAAUiE,2BAEd,SAAAkE,GAAK,OAAIA,EAAME,MAAMmB,oBAiB5BwoB,IAba5kB,YAAO6kB,IAAP7kB,CAAH,iJAEH,SAAAjF,GAAK,OAAIA,EAAME,MAAMoB,qB,kDA2BhC,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACX6iB,SAAU,KACVC,WAAW,EACXC,aAAc,KACdtC,YAAa,MAIf,EAAKzP,YAAc,EAAKA,YAAYzU,KAAjB,gBAXF,E,8FAkBnB,uCAAAuR,EAAA,yDACE,0EAEQkQ,EAASphB,KAAK9D,MAAMkqB,MAAMC,OAA1BjF,KACRphB,KAAKsmB,WAAa,IAAIlE,IAClBhB,EALN,wBAMIphB,KAAK4E,SAAS,CACZshB,WAAW,IAPjB,SAS8BlmB,KAAKsmB,WAAWC,eAAenF,GAT7D,aASUyC,EATV,kBAU+BhD,IAV/B,iBAWM7gB,KAAK4E,SAAS,CACZshB,WAAW,EACXC,aAActC,IAbtB,+BAiBY7d,EAjBZ,0DAkB2DjS,EAAU4H,eAlBrE,kCAmB2BwI,IAAMC,IAAI4B,GAnBrC,QAmBYwgB,EAnBZ,OAoBYP,EAAW5gB,WAAU,OAACmhB,QAAD,IAACA,GAAD,UAACA,EAAQjiB,KAAK,UAAd,aAAC,EAAiBqB,OAE7C5F,KAAK4E,SAAS,CACZqhB,WAAUA,WACVC,WAAW,EACXC,aAAc,KACdtC,YAAaA,IA1BrB,iD,0EAqCA,WAAU,IACA5c,EAAejH,KAAK9D,MAApB+K,WADD,EAE0CjH,KAAKoD,MAA9C8iB,EAFD,EAECA,UAAWC,EAFZ,EAEYA,aAActC,EAF1B,EAE0BA,YAE7B4C,EAAe,GACnB,GAAIN,EACF,OAAQA,EAAanF,WACnB,KAAKH,GAAaH,SAChB+F,EAAe,gCACf,MACF,KAAK5F,GAAaF,QAChB8F,EAAe,kDACf,MACF,QACEA,EAAe,0DAKrB,OACE,cAAC,GAAD,CAAajkB,WAAS,EACpBC,UAAU,SACVC,QAAQ,aACRC,WAAW,SACXsE,WAAYA,EAJd,SAMGkf,EACC,cAAC/kB,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAACijB,GAAD,UAAiBW,MAEnB,eAAC,WAAD,WACE,cAAC,KAAD,CAAMC,GAAIR,EAAW1V,QAAS3M,WAAS8L,SAAUgX,cAAY,EAACC,eAAa,EAA3E,SACE,cAACpB,GAAD,CAAqBve,WAAYA,EAAjC,SACE,cAAC0e,GAAD,CAAwBxR,KAAMpgB,EAAUsE,uCAG3CwrB,GACC,cAAC,GAAD,CAAUhhB,MAAI,EAACoE,WAAYA,EAA3B,SACE,cAAC,KAAD,CACEuJ,QAAS,IADX,SAGE,cAACqV,GAAD,CACE5e,WAAYA,EACZmN,YAAapU,KAAKoU,YAClBW,YAAY,EACZP,gBAAgB,EAChBpS,MAAM,2B,yBAqBxB,WAAe,IAITykB,EAQAC,EAOAlc,EACAsH,EAEA6U,EArBI9f,EAAejH,KAAK9D,MAApB+K,WADI,EAEsBjH,KAAKoD,MAA/BygB,EAFI,EAEJA,YAAaoC,EAFT,EAESA,SAInBY,EADE5f,IAAeZ,GAAYC,GACb,GACTW,IAAeZ,GAAYE,GAClB,GAEA,EAIhBugB,EADE7f,IAAeZ,GAAYC,GACtBud,EAAYnV,UAAUxK,iBAEzB,UAAMqhB,GAAQyB,OAAOnD,EAAYnV,UAAU9C,WAA3C,aAA0DiY,EAAYnV,UAAUxK,iBAAhF,KAQmB,SAArB2f,EAAYjZ,MACdA,EAAO,OACPsH,EAAO0S,GAAcf,EAAYnC,gBAAiBmF,GAElDE,EAAKhzB,EAAUiH,sBAEa,SAArB6oB,EAAYjZ,MACnBA,EAAO,OACPsH,EAAOne,EAAUiH,qBACjB+rB,EAAKnC,GAAcf,EAAYnC,gBAAiBmF,KAIhDjc,EAAO,WACPsH,EAAO0S,GAAcf,EAAYnC,gBAAiBmF,GAElDE,EAAKnC,GAAcf,EAAY5B,gBAAiB4E,IAIlD,IAAIhF,EAASmD,GAAoBnB,EAAYhC,QAAU,OACnDoE,IAEFpE,GAAU,OADQoE,EAAWpC,EAAYhC,OAAOvgB,IAAI,KAAWkgB,YAEnDtd,oBACRof,EAAW,CAAC,sBAAyB,EAAG,sBAAyB,IAAM,KAG7E,IAAIpB,EAAM8C,GAAoBnB,EAAY3B,KAAO,OAC7C+D,IAEF/D,GAAO,OADQ+D,EAAWpC,EAAY3B,IAAI5gB,IAAI,KAAWkgB,YAEhDtd,oBACLof,EAAW,CAAC,sBAAyB,EAAG,sBAAyB,IAAM,KAG7E,MAAO,CACL,CACEtS,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,QAAU,CAAEA,MAAOuiB,GAAcf,EAAYzC,KAAMyF,MAEvE,CACE7V,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,QAAU,CAAEA,MAAOuI,KAEvC,CACEoG,OAAQ,EACRyD,MAAO,CACL,CAAEpS,MAAO,UACT,CAAEA,MAA8B,cAAvBwhB,EAAY9C,OAAyB,YAAc8C,EAAY9C,UAG5E,CACE/P,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,SAAW,CAAEA,MAAOwhB,EAAY1C,WAAWjd,oBAE/D,CACE8M,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,aAAe,CAAEA,MAAOykB,KAE5C,CACE9V,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,QAAU,CAAEA,MAAO6P,KAEvC,CACElB,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,MAAQ,CAAEA,MAAO0kB,KAErC,CACE/V,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,UAAY,CAAEA,MAAOwf,KAEzC,CACE7Q,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,OAAS,CAAEA,MAAO6f,KAEtC,CACElR,OAAQ,EACRyD,MAAO,CAAE,CAAEpS,MAAO,QAAU,CAAEA,MAAOwhB,EAAY1B,KAAKje,yB,GAhPhC9D,IAAxB2lB,GACGrZ,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BuZ,MAAOzZ,IAAUG,OAAOD,YA6ObkZ,I,qEAAAA,M,oKC3TTnT,GAAkBzR,YAAO0R,KAAP1R,CAAH,oHASf8lB,GAAgB9lB,YAAO+lB,KAAP/lB,CAAH,oIAEN,SAAAjF,GAAK,OAAIA,EAAME,MAAMmB,oBAO5B4pB,GAAoBhmB,YAAOU,IAAPV,CAAH,gOAEJpN,EAAUwD,aACZxD,EAAUoE,4BAGrB,qBAAG8O,aACYZ,GAAYC,IAA3B,4CAOA8gB,GAAiBjmB,YAAOgmB,GAAPhmB,CAAH,2HAKd,gBAAG8F,EAAH,EAAGA,WAAH,OACCA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,0CAOA+gB,GAAkBlmB,YAAOgmB,GAAPhmB,CAAH,oGAIf,gBAAG8F,EAAH,EAAGA,WAAH,OACCA,IAAeZ,GAAYE,GAA3B,uCAGAU,IAAeZ,GAAYC,IAA3B,sEAQDghB,GAAenmB,aAAO,gBAAMomB,EAAN,2BACxB,cAACC,GAAA,EAAD,aACEC,QAAS,CACPC,KAAM,OACNC,KAAM,OACNC,WAAY,eAEVL,MAPWpmB,CAAH,yyBAWL,SAAAjF,GAAK,OAAIA,EAAME,MAAMmB,mBAEfxJ,EAAUwD,aACZxD,EAAUoE,4BAEZ,SAAA+D,GAAK,OAAIA,EAAME,MAAMmB,oBAE5B,qBAAG0J,aACYZ,GAAYC,IAA3B,qCAsBFuhB,GAAiB1mB,YAAO2mB,KAAP3mB,CAAH,wGAEP,SAAAjF,GAAK,OAAIA,EAAME,MAAMmB,mBACfxJ,EAAUwD,aACZxD,EAAUkE,2BAIrB8vB,GAAmB5mB,YAAO6mB,KAAP7mB,CAAH,uTAGdpN,EAAUgH,2BAA6BhH,EAAUuE,mCAAqC,EAAK,MAE7F,qBAAG2O,aACYZ,GAAYC,IAA3B,8BAEMvS,EAAU+G,oBAAsB/G,EAAUuE,mCAAqC,EAAK,KAF1F,gBAOS,SAAA4D,GAAK,OAAI+rB,gBAAK/rB,EAAME,MAAMmB,iBAAkBrB,EAAME,MAAMkD,0BAGnD,SAAApD,GAAK,OAAI+rB,gBAAK/rB,EAAME,MAAMyC,qBAAsB3C,EAAME,MAAMmD,uBACjE,SAAArD,GAAK,OAAIA,EAAME,MAAMyC,wBAU9BqpB,GAA0B/mB,YAAO4mB,GAAP5mB,CAAH,mEAWvBgnB,G,4JA8BJ,WAAU,IAAD,EAQHnoB,KAAK9D,MANP+K,EAFK,EAELA,WACAuO,EAHK,EAGLA,MACA4S,EAJK,EAILA,aACAC,EALK,EAKLA,UACAC,EANK,EAMLA,SACGf,EAPE,6EAUDgB,EAAWxc,KAAKiD,KAAKwG,EAAQ8S,GAAY,EAC/C,OACE,gDAASf,GAAT,cACE,cAACW,GAAD,CACEjhB,WAAYA,EACZsD,MAAM,UACNie,QAAS,kBAAMJ,EAAa,IAC5BK,SAAwB,IAAdJ,EACVK,aAAW,aALb,SAOE,cAAC,KAAD,MAEF,cAACR,GAAD,CACEjhB,WAAYA,EACZsD,MAAM,UACNie,QAAS,kBAAMJ,EAAaC,EAAY,IACxCI,SAAwB,IAAdJ,EACVK,aAAW,gBALb,SAOE,cAAC,KAAD,MAEF,cAACR,GAAD,CACEjhB,WAAYA,EACZsD,MAAM,UACNie,QAAS,kBAAMJ,EAAaC,EAAY,IACxCI,SAAUJ,GAAaE,EACvBG,aAAW,YALb,SAOE,cAAC,KAAD,MAEF,cAACX,GAAD,CACE9gB,WAAYA,EACZsD,MAAM,UACNie,QAAS,kBAAMJ,EAAarc,KAAKO,IAAI,EAAGic,KACxCE,SAAUJ,GAAaE,EACvBG,aAAW,YALb,SAOE,cAAC,KAAD,c,GA7EsBvoB,aA6F1BwoB,G,wKA4CJ,WAAsB,IAAD,EACkC3oB,KAAK9D,MAAlDsZ,EADW,EACXA,MAAO4S,EADI,EACJA,aAAcC,EADV,EACUA,UAAWC,EADrB,EACqBA,SAClCM,EAAc7c,KAAKO,IAAI,EAAGP,KAAKiD,KAAKwG,EAAQ8S,GAAY,GAC1DD,EAAYO,GACdR,EAAaQ,K,oBASjB,WAEE,OACE,cAAC,GAAD,CAAiBC,QAFH,IAEqB3U,QAAQ,WAA3C,SACGlU,KAAK8oB,iB,wBAUZ,WAEE,OADuB9oB,KAAK9D,MAApB+K,aAESZ,GAAYC,GAEzB,cAAC2gB,GAAD,UACE,eAAC7lB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,SAASC,QAAQ,aAAaC,WAAW,SAAnE,UACE,cAACvB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAASC,KAAK,SAA1E,SACG5C,KAAK+oB,uBAER,cAAC3nB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAASC,KAAK,SAA1E,SACG5C,KAAKgpB,oBAKZ,cAAC/B,GAAD,UACE,eAAC7lB,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,WAAWC,WAAW,SAASC,KAAK,SAA5E,UACG5C,KAAK+oB,qBACL/oB,KAAKgpB,oB,gCAWhB,WAAsB,IAAD,EAOfhpB,KAAK9D,MALP+K,EAFiB,EAEjBA,WACAgiB,EAHiB,EAGjBA,iBACAX,EAJiB,EAIjBA,SACAY,EALiB,EAKjBA,mBACA9sB,EANiB,EAMjBA,MAEI+sB,EAAYliB,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,GAC5E,QAAU,iBACZ,OACE,eAAC,WAAD,WACG4iB,EAAmBzkB,OAAS,GAC3B,eAAC,WAAD,WACE,cAAC2iB,GAAD,CAAgBngB,WAAYA,EAAYsD,MAAM,UAA9C,SACG4e,IAEH,cAAC7B,GAAD,CACErgB,WAAYA,EACZmiB,MAAO,cAACC,GAAA,EAAD,IACPhnB,MAAOimB,EACPxT,SAAU,SAAAqL,GAAK,OAAI8I,EAAiB9I,EAAMC,OAAO/d,QAEjDinB,UAAW,CACTC,WAAY,CAACrhB,MAAO,CAAC8B,WAAY5N,EAAM0C,+BAP3C,SAUGoqB,EAAmB9c,KAAI,SAAAod,GAAiB,OACvC,cAAC3B,GAAD,CAEExlB,MAAOmnB,EAFT,SAIGA,GAHIA,WASf,cAACnC,GAAD,CAAiBpgB,WAAYA,EAAYsD,MAAM,UAA/C,SACGvK,KAAKypB,sB,0BAWd,WAAgB,IAWVjc,EAXS,EAMTxN,KAAK9D,MAJP+K,EAFW,EAEXA,WACAuO,EAHW,EAGXA,MACA6S,EAJW,EAIXA,UACAC,EALW,EAKXA,SAGIpW,EAAiB,IAAVsD,EAAc,EAAI6S,EAAYC,EAAW,EAChDvB,EAAKhb,KAAKuS,IAAI9I,GAAQ6S,EAAY,GAAKC,GAG7C,GAAIrhB,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,GAC9D,GAAIkP,GAAS,IAAY,CACvB,IAAMkU,EAAIlU,EAAQ,IAClBhI,EAAQkc,EAAEvkB,QAAQsG,OAAOC,UAAUge,GAAK,EAAI,GAAK,SAE9C,GAAIlU,GAAS,IAAS,CACzB,IAAMmU,EAAInU,EAAQ,IAClBhI,EAAQmc,EAAExkB,QAAQsG,OAAOC,UAAUie,GAAK,EAAI,GAAK,SAE9C,GAAInU,GAAS,IAAM,CACtB,IAAMhK,EAAIgK,EAAQ,IAClBhI,EAAQhC,EAAErG,QAAQsG,OAAOC,UAAUF,GAAK,EAAI,GAAK,SAGnDgC,EAAQgI,EAAMrQ,QAAQ,QAGtBqI,EAAQgI,EAAMtR,iBAEhB,MAAM,GAAN,OAAUgO,EAAKhO,iBAAf,YAAmC6iB,EAAG7iB,iBAAtC,eAA6DsJ,K,wBAQ/D,WAAc,IAAD,EAOPxN,KAAK9D,MALP+K,EAFS,EAETA,WACAuO,EAHS,EAGTA,MACA4S,EAJS,EAITA,aACAC,EALS,EAKTA,UACAC,EANS,EAMTA,SAEF,OACE,cAAC,GAAD,CACErhB,WAAYA,EACZuO,MAAOA,EACP4S,aAAcA,EACdC,UAAWA,EACXC,SAAUA,Q,GA5MOnoB,aAmNV4M,eAAU4b,ICncnBxhB,GAAchG,YAAOmB,IAAPnB,CAAH,iEAEC,SAAAjF,GAAK,OAAIA,EAAME,MAAM0C,+BAIjC8C,GAAkBT,YAAOU,IAAPV,CAAH,gOAER,SAAAjF,GAAK,OAAIA,EAAME,MAAMkB,gBAKfvJ,EAAUwD,aACZxD,EAAU8D,uBAKrB2tB,GAAsBrkB,IAAOG,IAAV,2QAIVmkB,KAAOC,OAEhB,qBAAGze,aACYZ,GAAYC,IAA3B,6CAOAqf,GAAyBxkB,YAAOykB,KAAPzkB,CAAH,4DAEf,SAAAjF,GAAK,OAAIA,EAAME,MAAMa,6BAI5ByV,GAAcvR,YAAOwR,KAAPxR,CAAH,2JAGC,WAAa0C,WAAS8L,SAAW,MAAQC,SAAOC,WACnD,SAAA3T,GAAK,OAAIA,EAAM0tB,QAAU,GAAM,IAC3B71B,EAAUwD,cACvB,qBAAG0P,aACcZ,GAAYC,IAA5B,yCAOD2M,GAAiB9R,YAAO+R,KAAP/R,CAAH,qEAENpN,EAAUgH,2BAA6B,MAC/C,qBAAGkM,aACYZ,GAAYC,IAA3B,4BACYvS,EAAU+G,oBAAsB,KAD5C,gBAOAqY,GAAiBhS,YAAO8R,GAAP9R,CAAH,iIAEI,SAAAjF,GAAK,OAAIA,EAAME,MAAM2C,uBAMvC6T,GAAkBzR,YAAO0R,KAAP1R,CAAH,mKAED,SAAAjF,GAAK,OAAIA,EAAME,MAAM2C,uBAC5B,SAAA7C,GAAK,OAAIA,EAAME,MAAMkB,gBACfvJ,EAAUwD,aACZxD,EAAUkE,2BAErB,qBAAGgP,aACYZ,GAAYC,IAA3B,+BACevS,EAAUwE,mBADzB,gBAOA6a,GAAkBjS,YAAOyR,GAAPzR,CAAH,mJAIR,SAAAjF,GAAK,OAAIA,EAAME,MAAMmB,oBAK5BssB,GAAa1oB,YAAO6kB,IAAP7kB,CAAH,iJAEH,SAAAjF,GAAK,OAAIA,EAAME,MAAMoB,qBA2PnBssB,GA7JI,SAAC,GAaM,IAXtB7iB,EAWqB,EAXrBA,WACA8iB,EAUqB,EAVrBA,aACAvU,EASqB,EATrBA,MACApB,EAQqB,EARrBA,YACAR,EAOqB,EAPrBA,UACAsS,EAMqB,EANrBA,UACAkC,EAKqB,EALrBA,aACAa,EAIqB,EAJrBA,iBACAZ,EAGqB,EAHrBA,UACAC,EAEqB,EAFrBA,SACAlmB,EACqB,EADrBA,MAkDImR,EAAsB,WAC1B,OACE,cAAC,GAAD,CAAgBtM,WAAYA,EAA5B,SACG2M,EAAUxH,KAAI,SAAC0H,EAAMxB,GACpB,OAGE,aAFA,CAEC,GAAD,CACErL,WAAYA,EAEZ+M,MAAOF,EAAKkW,UAAY,QAAU,UAClC9V,QAAQ,WACRC,KAAK,QALP,SAOGL,EAAKmW,KACJ,cAAC,GAAD,CAAYlD,GAAIjT,EAAKmW,KAArB,SAA4BnW,EAAKzR,QACjCyR,EAAKzR,OAPFiQ,SAoBXmB,EAAqB,WAEzB,OADuCW,IAC3BhI,KAAI,SAACiI,GACf,OAAOC,EAAkBD,OASvBC,EAAoB,SAACD,GACzB,OACE,cAAC,GAAD,CAAgBpN,WAAYA,EAA5B,SACGoN,EAAQI,MAAMrI,KAAI,SAAC0H,EAAMxB,GACxB,OACE,cAAC,GAAD,CACErL,WAAYA,EAEZ+M,MAAOF,EAAKkW,UAAY,QAAU,UAClC9V,QAAQ,WACRC,KAAK,QALP,SAOGL,EAAKmW,KACJ,cAAC,GAAD,CAAYlD,GAAIjT,EAAKmW,KAArB,SAA4BnW,EAAKzR,QACjCyR,EAAKzR,OAPFiQ,OALgC+B,EAAQrD,SAyBnD2C,EAAsB,WAC1B,IAAMuW,EAAO1U,EAAQ,EACrB,OACE,cAAC,KAAD,CAAMkR,GAAIwD,EAAM1Z,QAAS3M,WAAS8L,SAAlC,SACE,cAAC,GAAD,CAAgB1I,WAAYA,EAA5B,SACE,cAAC,GAAD,CACEA,WAAYA,EACZiiB,mBAAoB,CAAC,GAAI,GAAI,IAC7B1T,MAAOA,EACP4S,aAAcA,EACda,iBAAkBA,EAClBZ,UAAWA,EACXC,SAAUA,SAOpB,OACE,eAAC,GAAD,CAAa/lB,UAAW,EAAxB,UACE,cAAC,GAAD,UAAkBH,IAjIlB,eAAChB,EAAA,EAAD,CAAMoB,WAAS,EACbC,UAAU,SACVC,QAAQ,SACRC,WAAW,SAHb,UAKE,cAAC,KAAD,CAAM+jB,GAAIR,EAAW1V,QAAS3M,WAAS8L,SAAUgX,cAAY,EAACC,eAAa,EAA3E,SACE,cAAC,GAAD,CAAqB3f,WAAYA,EAAjC,SACE,cAAC,GAAD,CAAwBkN,KAAMpgB,EAAUsE,uCAG5C,cAAC8xB,GAAA,EAAD,UACE,eAAC,GAAD,CAAaljB,WAAYA,EAAY2iB,QAAS1D,EAAY,EAAI,EAA9D,UACE,mCACG6D,EAAa3d,KAAI,SAACzE,EAAO2K,GAGxB,OACE,qBAAiB3K,MAAOA,GAAd2K,QAIhB,cAACgB,GAAA,EAAD,UACGC,MAEH,cAACC,GAAA,EAAD,UACGC,MAEH,cAACC,GAAA,EAAD,UACGC,kBCxPTmS,GAAiB3kB,YAAOU,IAAPV,CAAH,kIAEDpN,EAAUwD,aACZxD,EAAUiE,2BAEd,SAAAkE,GAAK,OAAIA,EAAME,MAAMmB,oBAkNnB6sB,GApKgB,SAAC,GAUM,IARlCnjB,EAQiC,EARjCA,WACAojB,EAOiC,EAPjCA,sBACAC,EAMiC,EANjCA,gBACAlC,EAKiC,EALjCA,aACAa,EAIiC,EAJjCA,iBACAZ,EAGiC,EAHjCA,UACAC,EAEiC,EAFjCA,SACAiC,EACiC,EADjCA,kBACiC,EACDC,oBAAkB,GADjB,oBAC5BtE,EAD4B,KACjBuE,EADiB,OAEKD,mBAA4B,MAFjC,oBAE5BrE,EAF4B,KAEduE,EAFc,OAGKF,mBAA6B,IAHlC,oBAG5B5G,EAH4B,KAGd+G,EAHc,KAKnCC,qBAAU,WACR,IAAMC,EAAS,yCAAG,WAAOriB,GAAP,gBAAA0I,EAAA,6DAChBuZ,GAAa,GADG,SAE4CH,EAAgB9hB,EAAQ8f,GAFpE,OAEV1E,EAFU,OAGhB6G,GAAa,GACT7G,aAAwB/C,GAC1B6J,EAAgB9G,IAEhB+G,EAAgB/G,GAChB8G,EAAgB,OARF,2CAAH,sDAYTliB,EAAoC,OAAd6f,EAAqBA,EAAYC,EAAW,KACzD,OAAX9f,GACFqiB,EAAUriB,KACX,CAAC8hB,EAAiBjC,EAAWC,IAOhC,IAsFIyB,EACAnW,EAbA6S,EAAuB,GAC3B,GAAIN,EACF,OAAQA,EAAanF,WACnB,KAAKP,GAAiBE,QACpB8F,EAAe,mDACf,MACF,QACEA,EAAe,2DA0BrB,OAnBIxf,IAAeZ,GAAYC,IAC7ByjB,EAAe,CAAC,MAAO,OACvBnW,EAAY,CACV,CAACvR,MAAO,OAAQ2nB,WAAW,GAC3B,CAAC3nB,MAAO,SAAU2nB,WAAW,MAI/BD,EAAe,CAAC,MAAO,KAAM,KAAM,MAAO,MAAO,OACjDnW,EAAY,CACV,CAACvR,MAAO,OAAQ2nB,WAAW,GAC3B,CAAC3nB,MAAO,OAAQ2nB,WAAW,GAC3B,CAAC3nB,MAAO,OAAQ2nB,WAAW,GAC3B,CAAC3nB,MAAO,OAAQ2nB,WAAW,GAC3B,CAAC3nB,MAAO,KAAM2nB,WAAW,GACzB,CAAC3nB,MAAO,SAAU2nB,WAAW,KAK/B7D,EACE,cAAC,GAAD,UAAiBM,IACjB,cAAC,GAAD,CACExf,WAAYA,EACZ7E,MAAM,eACN2nB,aAAcA,EACdnW,UAAWA,EACX4B,MAAO+U,GAAwC,EAC/CrE,UAAWA,EACX9R,YArHc,WAuElB,OArEInN,IAAeZ,GAAYC,GAClBsd,EAAaxX,KAAI,SAAAyX,GAC1B,IAAMzC,EAAewD,GAAcf,EAAYzC,MACzC0J,EAAgB,cAAUjH,EAAYzC,MACtCS,EAAiBmD,GAAoBnB,EAAYhC,QAAU,OAEjE,MAAO,CACL7Q,OAAQ6S,EAAYzC,KACpB3M,MAAO,CACL,CAACpS,MAAO+e,EAAM4I,WAAW,EAAOC,KAAMa,GACtC,CAACzoB,MAAOwf,EAAQmI,WAAW,QAMtBpG,EAAaxX,KAAI,SAAAyX,GAE1B,IAEIjZ,EAEAsH,EAEA6U,EANE3F,EAAewD,GAAcf,EAAYzC,MACzC0J,EAAgB,cAAUjH,EAAYzC,MAEtC0F,EAAevB,GAAQyB,OAAOnD,EAAYnV,UAAU9C,WAEtDmf,OAA6BzH,EAE7B0H,OAA2B1H,EACzBzB,EAAiBmD,GAAoBnB,EAAYhC,QAAU,OA6BjE,MA5ByB,SAArBgC,EAAYjZ,MACdA,EAAO,OACPsH,EAAO0S,GAAcf,EAAYnC,iBAC7BmC,EAAYnC,kBAAoB2I,IAClCU,EAAQ,gBAAYlH,EAAYnC,kBAClCqF,EAAKhzB,EAAUiH,sBAEa,SAArB6oB,EAAYjZ,MACnBA,EAAO,OACPsH,EAAOne,EAAUiH,qBACjB+rB,EAAKnC,GAAcf,EAAYnC,iBAC3BmC,EAAYnC,kBAAoB2I,IAClCW,EAAM,gBAAYnH,EAAYnC,oBAGhC9W,EAAO,WACPsH,EAAO0S,GAAcf,EAAYnC,iBAC7BmC,EAAYnC,kBAAoB2I,IAClCU,EAAQ,gBAAYlH,EAAYnC,kBAClCqF,EAAKnC,GAAcf,EAAY5B,iBAC3B4B,EAAY5B,kBAAoBoI,IAClCW,EAAM,gBAAYnH,EAAY5B,mBAIlC8I,OAAWzH,EACX0H,OAAS1H,EAEF,CACLtS,OAAQ6S,EAAYzC,KACpB3M,MAAO,CACL,CAACpS,MAAO+e,EAAM4I,WAAW,EAAOC,KAAMa,GACtC,CAACzoB,MAAOuI,EAAMof,WAAW,GACzB,CAAC3nB,MAAOykB,EAAMkD,WAAW,GACzB,CAAC3nB,MAAO6P,EAAM8X,WAAW,EAAOC,KAAMc,GACtC,CAAC1oB,MAAO0kB,EAAIiD,WAAW,EAAOC,KAAMe,GACpC,CAAC3oB,MAAOwf,EAAQmI,WAAW,SAqD/B5B,aAAcA,EACda,iBAAkBA,EAClBZ,UAAWA,EACXC,SAAUA,KCpNZ5Y,GAAcvO,YAAOC,IAAPD,CAAH,4FAEFpN,EAAU8G,2BAA6B,KACpC,WAAagJ,WAAS8L,SAAW,MAAQC,SAAOC,WAC5D,qBAAG5I,aACYZ,GAAYC,IAA3B,iCACiBvS,EAAU6G,oBAAsB,KADjD,sCAEoB7G,EAAU8G,2BAA6B,KAF3D,oCAGkB9G,EAAU6G,oBAAsB,KAHlD,qCAImB7G,EAAU6G,oBAAsB,KAJnD,gBAUAqwB,GAAiB9pB,YAAOC,IAAPD,CAAH,6DAMd2kB,GAAiB3kB,YAAOU,IAAPV,CAAH,kIAEDpN,EAAUwD,aACZxD,EAAUiE,2BAEd,SAAAkE,GAAK,OAAIA,EAAME,MAAMmB,oBA6InB2tB,G,kDAjIb,WAAYhvB,GAAQ,IAAD,8BACjB,cAAMA,IAEDkH,MAAQ,CACXilB,UAAW,KACXC,SAAU,GACViC,kBAAmB,KACnBpE,aAAc,MAIhB,EAAKmE,gBAAkB,EAAKA,gBAAgB3qB,KAArB,gBACvB,EAAKwrB,iBAAmB,EAAKA,iBAAiBxrB,KAAtB,gBACxB,EAAKyrB,qBAAuB,EAAKA,qBAAqBzrB,KAA1B,gBAbX,E,8FAoBnB,6BAAAuR,EAAA,6DACE,0EAEAlR,KAAKsmB,WAAa,IAAIlE,GAHxB,SAI8BpiB,KAAKsmB,WAAW+E,oBAJ9C,QAIQrH,EAJR,kBAK+BnD,GAC3B7gB,KAAK4E,SAAS,CACZuhB,aAAcnC,IAIhBhkB,KAAK4E,SAAS,CACZyjB,UAAW,EACXkC,kBAAmBvG,EAAgB,EACnCmC,aAAc,OAdpB,gD,0EAwBA,WAAU,IACAlf,EAAejH,KAAK9D,MAApB+K,WADD,EAE0DjH,KAAKoD,MAA9DilB,EAFD,EAECA,UAAWC,EAFZ,EAEYA,SAAUnC,EAFtB,EAEsBA,aAAcoE,EAFpC,EAEoCA,kBAEvC9D,EAAe,GACnB,GAAIN,EACF,OAAQA,EAAanF,WACnB,KAAKH,GAAaF,QAChB8F,EAAe,yDACf,MACF,QACEA,EAAe,iEAKrB,OACE,cAAC,GAAD,CAAajkB,WAAS,EACpBC,UAAU,MACVC,QAAQ,gBACRC,WAAW,aACXsE,WAAYA,EAJd,SAMGkf,EACC,cAAC/kB,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAAC,GAAD,UAAiB4jB,MAEnB,cAACwE,GAAD,CAAgBpoB,MAAI,EAACoE,WAAYA,EAAjC,SACE,cAAC,IAAD,CAAMuJ,QAAS,IAAf,SACE,cAAC,GAAD,CACEvJ,WAAYA,EACZqjB,gBAAiBtqB,KAAKsqB,gBACtBlC,aAAcpoB,KAAKmrB,iBACnBlC,iBAAkBjpB,KAAKorB,qBACvB/C,UAAWA,EACXC,SAAUA,EACViC,kBAAmBA,Y,sEAgBjC,WAAsB/hB,EAAQub,GAA9B,gBAAA7S,EAAA,yDAE4B,QADlBqZ,EAAsBvqB,KAAKoD,MAA3BmnB,mBADV,gCAGiBvqB,KAAKsmB,WAAWgE,gBAAgBvG,EAAOwG,EAAoB,EAAG/hB,GAH/E,wEAKW,IALX,gD,uFAaA,SAAiB6f,GACfroB,KAAK4E,SAAS,CACZyjB,UAAWA,M,kCASd,SAAqBC,GAEpBtoB,KAAK4E,SAAS,CACZyjB,UAAW,EACXC,SAAUA,Q,GAjIeloB,G,0FCvChB,SAASkrB,GAAaxnB,EAAOC,GAC1C,OAAOgI,KAAKC,MCFC,SAAyBlI,EAAOC,GAC7C,OAAOgI,KAAKwO,UAAYxW,EAAMD,GAASA,EDCrBynB,CAAgBznB,EAAOC,I,gEEwuB5BynB,G,kDAltBb,WAAYtvB,GAAQ,IAAD,8BACjB,cAAMA,IAGDuvB,YAAc,EAAKA,YAAY9rB,KAAjB,gBACnB,EAAK+rB,QAAU,EAAKA,QAAQ/rB,KAAb,gBACf,EAAKgsB,UAAY,EAAKA,UAAUhsB,KAAf,gBACjB,EAAKsJ,KAAO,EAAKA,KAAKtJ,KAAV,gBACZ,EAAKisB,OAAS,EAAKA,OAAOjsB,KAAZ,gBAWd,EAAKksB,MAAQ,KACb,EAAKC,SAAW,KAChB,EAAKC,cAAgB,KAKrB,EAAKC,gBAAkB,EAAK9vB,MAAM+vB,SAAW,IAAM,IACnD,EAAKC,iBAAmB,IACxB,EAAKC,sBAAwB,EAE7B,EAAKC,QAAU,EAAKJ,gBAAkB,EACtC,EAAKK,QAAU,EAAKH,iBAAmB,EACvC,EAAKI,cAAgB,EAAKN,gBAAkB,EAAI,GAKhD,EAAKO,eAAiB,EAAKrwB,MAAM+vB,SAAW,GAAK,GACjD,EAAKO,YAAc,EAAKtwB,MAAM+vB,SAAW,GAAK,EAC9C,EAAKza,SAAW,EAAK+a,eAAiB,EAAKC,YAO3C,EAAKC,iCAAmC,EACxC,EAAKC,oCAAsC,EAAKxwB,MAAM+vB,UAAY,MAAQ,EAI1E,EAAKU,aAAe,EAAKzwB,MAAM+vB,SAAW,GAAK,GAG/C,EAAKW,gBAAkB,EACvB,EAAKC,WAAa,IAClB,EAAKC,mBAAqB,EAAK5wB,MAAM+vB,SAAW,GAAK,IAGrD,EAAKc,2BAA6B,CAAC,IAAK,IAAK,KAC7C,EAAKC,6BAA+B,CAAC,IAAK,IAAK,KAC/C,EAAKC,YAAc,GACnB,EAAKC,oBAAsB,IAC3B,EAAKC,gBAAkB,EAAKjxB,MAAM+vB,SAAW,EAAI,EACjD,EAAKmB,mCAAqC,EAAKlxB,MAAM+vB,SAAW,IAAM,EAItE,EAAKoB,uBAAyB,EAAKnxB,MAAM+vB,SAAW,MAAQ,SAK5D,EAAKqB,aAAe,EAAKf,eAAiB,EAAI,IAG9C,EAAKgB,aAAe,KAGpB,EAAKC,aAAe,EAAKtxB,MAAM+vB,SAAW,EAAI,MAG9C,EAAKwB,mBAAqB,EAG1B,EAAKC,sBAAwB,KAC7B,EAAKC,uBAAyB,KAC9B,EAAKC,oBAAsB,IAC3B,EAAKC,qBAAuB,KAxFX,E,qDA+FnB,WAME7tB,KAAKmsB,sBAAwBnsB,KAAK9D,MAAMyL,MAAQ3H,KAAK9D,MAAMyL,MAAQ3H,KAAKgsB,gBAAkB,EAG1FhsB,KAAK8tB,S,kCAOP,WAEE9tB,KAAK8rB,SAASiC,UACd/tB,KAAK6rB,MAAMkC,Y,gCAQb,WAAsB,IAAD,OAEb5B,EAAwBnsB,KAAK9D,MAAMyL,MAAQ3H,KAAK9D,MAAMyL,MAAQ3H,KAAKgsB,gBAAkB,EACvFhsB,KAAKmsB,wBAA0BA,IACjCnsB,KAAKmsB,sBAAwBA,EAG7BnsB,KAAKguB,qBAGDhuB,KAAKiuB,WACPjuB,KAAKiuB,UAAUrc,SAAQ,SAACsc,GAAW,EAAKC,aAAaD,S,oBAU3D,WAAU,IAAD,OACP,OAAO,qBAAKpS,IAAK,SAACC,GAAS,EAAKqS,QAAUrS,O,kBAO5C,WAEE/b,KAAKquB,WACLruB,KAAKsuB,WAGLtuB,KAAKuuB,mBAGLvuB,KAAKwuB,c,yBAOP,WAEE,GAAIxuB,KAAK0tB,sBAAuB,CAC5B,IAAMQ,EAAOluB,KAAKiuB,UAAUjuB,KAAKytB,mBACjCztB,KAAKmuB,aAAaD,GAItBluB,KAAKytB,kBAAoBnC,GAAa,EAAGtrB,KAAKwR,SAAW,GACzDxR,KAAK0tB,sBAAwB1tB,KAAK2tB,uBAAyB,IAAIriB,O,sBAOjE,WAIEtL,KAAKiuB,UAAY,GACjB,IAAK,IAAI7T,EAAI,EAAGA,EAAIpa,KAAKusB,eAAgBnS,IAAK,CAC5C,IAAMqU,EAAMzuB,KAAK0uB,gBAAgBtU,GACjCpa,KAAKiuB,UAAUlc,KAAK,CAClB,GAAO0c,EAAI,GACX,GAAOA,EAAI,GACX,IAAQA,EAAI,GACZ,IAAQA,EAAI,GACZ,UAAc,IAIlB,IAAK,IAAIrU,EAAIpa,KAAKusB,eAAgBnS,EAAIpa,KAAKwR,SAAU4I,IACnDpa,KAAKiuB,UAAUlc,KAAK,CAAC,UAAc,M,6BAUvC,SAAgBO,GACd,IAAMoX,EACJ,EAAI3d,KAAKoT,KAAO7M,EAAQtS,KAAKstB,cAAgBttB,KAAKusB,gBAAkBvsB,KAAKusB,eACrEoC,EAAQ,GAAK,EAAI5iB,KAAKgT,IAAI,EAAI2K,IAKpC,MAAO,CAJI1pB,KAAKosB,QAAUuC,EAAQ5iB,KAAKgT,IAAI2K,GAAK1pB,KAAKssB,cAEnDtsB,KAAKqsB,QACLsC,EAAQ5iB,KAAK+S,IAAI,EAAI4K,GAAK1pB,KAAKqtB,uBAAyB,EAAIrtB,KAAKssB,iB,sBAQrE,WACEtsB,KAAK4uB,UAAY,GACjB,IAAK,IAAIxU,EAAI,EAAGA,EAAIpa,KAAKusB,eAAgBnS,IAAK,CAE5C,IAAMyU,EAAczU,EACd0U,GAAmB1U,EAAI,GAAKpa,KAAKusB,eACvCvsB,KAAK+uB,QAAQF,EAAaC,EAAiB,EAAG,GAG9C,IAAME,EAAiBhvB,KAAKwsB,YAAc,EACpCyC,EAAgBD,EAAiBhvB,KAAKusB,eAAiBnS,EACvD8U,EACJF,EAAiBhvB,KAAKusB,gBAAkBnS,EAAI,GAAKpa,KAAKusB,eACxDvsB,KAAK+uB,QAAQE,EAAeC,EAAmB,EAAG,GAOlD,IACMC,GADuBH,EAAiB,GACKhvB,KAAKusB,eAAiBnS,EACzEpa,KAAK+uB,QAAQI,EAAqBN,EAAa,EAAG,GAElD,IAAK,IAAIlU,EAAI,EAAGA,EAAI3a,KAAKwsB,YAAa7R,IAAK,CAEzC,IAAMrI,EAAQqI,EAAI3a,KAAKusB,eAAiBnS,EAClCgV,GAAkB9c,EAAQtS,KAAKusB,gBAAkBvsB,KAAKwR,SAC5DxR,KAAK+uB,QAAQzc,EAAO8c,EAAgB,EAAG,IAIvC,IAAMC,GACH1U,EAAI,GAAK3a,KAAKwsB,YAAcxsB,KAAKusB,gBAAkBnS,EAAI,GAAKpa,KAAKusB,eACpEvsB,KAAK+uB,QAAQzc,EAAO+c,EAAiB,IAAM,IAC3CrvB,KAAK+uB,QAAQzc,EAAO+c,EAAiB,IAAM,Q,qBAajD,SAAQC,EAAaC,EAAaC,EAAUC,GAC1CzvB,KAAK4uB,UAAU7c,KAAK,CAClB,OAAUud,EAAYI,WACtB,OAAUH,EAAYG,WACtB,UAAcF,EACd,QAAYC,EACZ,SAAaA,IACfzvB,KAAKiuB,UAAUqB,GAAaK,YAC5B3vB,KAAKiuB,UAAUsB,GAAaI,c,8BAQ9B,WAAoB,IAAD,OAEjB3vB,KAAK4vB,WAAaC,KAAmB7vB,KAAKiuB,WAG1CjuB,KAAK4vB,WACFE,MAAM,SAAUD,OACdL,UAAS,SAAC1sB,GACT,OAAOA,EAAEwP,MAAQ,EAAKia,eACpB,EAAKE,iCAAmC,EAAKC,wCAElDoD,MAAM,SAAUD,KAAe7vB,KAAKgsB,gBAAkB,EAAGhsB,KAAKksB,iBAAmB,IAIpF,IAAM6D,EAAcF,KAAa7vB,KAAK4uB,WACnCY,UAAS,SAAC1sB,GACT,OAAOA,EAAEktB,UAAY,EACnBltB,EAAEktB,UACF,EAAIjkB,KAAKuS,IAAIxb,EAAEmtB,OAAON,UAAW7sB,EAAEsd,OAAOuP,cAE7CO,SAASlwB,KAAK2sB,cACf3sB,KAAK4vB,WAAWE,MAAM,QAASC,GAGjC/vB,KAAK4vB,WAAWO,GAAG,OAAQnwB,KAAKiJ,MAGhCjJ,KAAK4vB,WAAWQ,WAAW,GAGvBpwB,KAAKwtB,cACPqC,KAAY7vB,KAAK4rB,OAAQ5rB,KAAKutB,gB,uBAOlC,WAAa,IAAD,OAEV8C,SAAWC,YAKXtwB,KAAK6rB,MAAQ,IAAIwE,aACjBrwB,KAAK8rB,SAAWuE,sBACdrwB,KAAKgsB,gBAAkBhsB,KAAKmsB,sBAC5BnsB,KAAKksB,iBAAmBlsB,KAAKmsB,sBAC7B,CAACoE,WAAW,EAAMC,aAAa,EAAMC,WAAY,IAEnDzwB,KAAK8rB,SAAS4E,YAAa,EAC3B1wB,KAAKguB,qBACLhuB,KAAKouB,QAAQuC,YAAY3wB,KAAK8rB,SAAS8E,MAGvC5wB,KAAKiuB,UAAUrc,SAAQ,SAACsc,GACtBA,EAAK2C,SAAW,IAAIR,YACpB,EAAKlC,aAAaD,GAClB,EAAKrC,MAAMiF,SAAS5C,EAAK2C,aAI3BhB,KAAU7vB,KAAK8rB,SAAS8E,MACrBG,KAAKlB,OACHrtB,UAAUxC,KAAK8rB,SAAS8E,MACxBI,SAAQ,kBAAM,EAAKpB,WAAW5V,KAAK6V,KAASzd,EAAGyd,KAASxd,MACxD8d,GAAG,QAASnwB,KAAKyrB,aACjB0E,GAAG,OAAQnwB,KAAK0rB,SAChByE,GAAG,MAAOnwB,KAAK2rB,YAGpB3rB,KAAK+rB,cAAgB,IAAIsE,YACzBrwB,KAAK6rB,MAAMiF,SAAS9wB,KAAK+rB,iB,gCAO1B,WACC/rB,KAAK8rB,SAASmF,OACZjxB,KAAKgsB,gBAAkBhsB,KAAKmsB,sBAC5BnsB,KAAKksB,iBAAmBlsB,KAAKmsB,yB,0BAQjC,SAAa+B,GAAO,IACZ9b,EAAmB8b,EAAnB9b,EAAGC,EAAgB6b,EAAhB7b,EAAgB6b,EAAb2C,SACHK,SACP,IAAIb,SAAWje,EAAIpS,KAAKmsB,sBAAuB9Z,EAAIrS,KAAKmsB,yB,0BAW5D,SAAa+B,GAAkC,IACzCiD,EACAC,EACAnE,EACAJ,EAJawE,EAA2B,uDAAH,EAKrCA,GAEFF,EAAkBnxB,KAAKsxB,mBACrBtxB,KAAKuxB,cACHvxB,KAAKgtB,6BACLhtB,KAAKwxB,wBAAwBtD,GAC7BmD,IACJD,EAAgBpxB,KAAKsxB,mBACnBtxB,KAAKuxB,cACHvxB,KAAK+sB,2BAEL/sB,KAAKwxB,wBAAwBtD,GAE7BmD,IACJpE,EACEjtB,KAAKitB,aAAejtB,KAAKktB,oBAAsBltB,KAAKitB,aAAeoE,EACrExE,EACE7sB,KAAK6sB,YAAc7sB,KAAK8sB,mBAAqB9sB,KAAK6sB,YAAcwE,IAKlED,EAFAD,EAAkBnxB,KAAKsxB,mBAAmBtxB,KAAKwxB,wBAAwBtD,IAOvEjB,EAAcjtB,KAAKitB,YACnBJ,EAAa7sB,KAAK6sB,YAGpBqB,EAAK2C,SAASY,QACdvD,EAAK2C,SAASa,UACZ1xB,KAAK4sB,gBAAkB5sB,KAAKmsB,sBAC5BgF,EACAlE,GACFiB,EAAK2C,SAASc,UAAUP,EAAenE,GAErCiB,EAAK2C,SAASe,QADZP,EACsB,CACtB,IAAIO,KACF,EACA,EAAIP,EACJ,EACAF,EACA,KAIoB,KAC1BjD,EAAK2C,SAASgB,WAAW,EAAG,EAAGhF,EAAa7sB,KAAKmsB,yB,0BAUnD,SAAalC,EAAM6H,GAAgB,IAC3B7B,EAA4BhG,EAA5BgG,OAAQ7P,EAAoB6J,EAApB7J,OACR2R,EAD4B9H,EAAZwF,QACQ,KAAQzvB,KAAK9D,MAAM+vB,SAAW,EAAI6F,GAChE9xB,KAAK+rB,cAAciG,MAAQD,EAC3B/xB,KAAK+rB,cAAc2F,WAChB1xB,KAAKmtB,gBAAkBntB,KAAKotB,mCAAqC0E,GAChE9xB,KAAKmsB,sBACPnsB,KAAKsxB,mBAAmBtxB,KAAKiyB,cAAchI,EAAK3X,MAAOtS,KAAK4uB,UAAUnqB,UACtEzE,KAAK+rB,cAAcmG,OACjBjC,EAAO7d,EAAIpS,KAAKmsB,sBAAuB8D,EAAO5d,EAAIrS,KAAKmsB,uBACzDnsB,KAAK+rB,cAAcoG,OACjB/R,EAAOhO,EAAIpS,KAAKmsB,sBAAuB/L,EAAO/N,EAAIrS,KAAKmsB,yB,2BAU7D,SAAc7Z,EAAO8f,GAEnB,IAAM/W,EAAS,CAAC,GAAG,GAAG,KAChBC,EAAO,CAAC,IAAI,GAAG,KACfC,EAAa,CAAC,IAAI,GAAG,IACrBC,EAAc,CAAC,IAAI,IAAI,IACvBC,EAAO,CAAC,GAAG,IAAI,KAKf4W,EAFyB,IAEAD,EACzBE,EAF2B,GAEAF,EAG3BG,EAA+B,IAAbH,EAAoBE,EACtCE,EACJD,EAAkBD,EAAwC,IAAbF,EAAoBC,EAC7DI,EACJD,EAAgBH,EAAsC,IAAbD,EAAoBE,EACzDI,EACJD,EAAsBH,EAAwC,IAAbF,EAAoBC,EACjEM,EACJD,EAAuBL,EAAsC,GAAbD,EAAmBC,EAGrE,GAAI/f,GAASigB,EACX,OAAOlX,EACJ,GAAI/I,GAASigB,EAAkBD,EACpC,CACE,IAAMM,GAActgB,EAAQigB,GAAmBD,EAC/C,OAAOtyB,KAAKuxB,cAAcjW,EAAMD,EAAQuX,GAErC,GAAItgB,GAASkgB,EAChB,OAAOlX,EACJ,GAAIhJ,GAASkgB,EAAgBH,EAClC,CACE,IAAMO,GAActgB,EAAQkgB,GAAiBH,EAC7C,OAAOryB,KAAKuxB,cAAchW,EAAYD,EAAMsX,GAEzC,GAAItgB,GAASmgB,EAChB,OAAOlX,EACJ,GAAIjJ,GAASmgB,EAAsBH,EACxC,CACE,IAAMM,GAActgB,EAAQmgB,GAAuBH,EACnD,OAAOtyB,KAAKuxB,cAAc/V,EAAaD,EAAYqX,GAEhD,GAAItgB,GAASogB,EAChB,OAAOlX,EACJ,GAAIlJ,GAASogB,EAAuBL,EACzC,CACE,IAAMO,GAActgB,EAAQogB,GAAwBL,EACpD,OAAOryB,KAAKuxB,cAAc9V,EAAMD,EAAaoX,GAE1C,GAAItgB,GAASqgB,EAChB,OAAOlX,EAGP,IAAMmX,GAActgB,EAAQqgB,GAAiBN,EAC7C,OAAOryB,KAAKuxB,cAAclW,EAAQI,EAAMmX,K,2BAY5C,SAAcC,EAAQC,EAAQC,GAC5B,IAAMC,EAAKD,EACLE,EAAK,EAAID,EAKf,MAJY,CACVjnB,KAAKuL,MAAMub,EAAO,GAAKG,EAAKF,EAAO,GAAKG,GACxClnB,KAAKuL,MAAMub,EAAO,GAAKG,EAAKF,EAAO,GAAKG,GACxClnB,KAAKuL,MAAMub,EAAO,GAAKG,EAAKF,EAAO,GAAKG,M,gCAU5C,SAAmBC,GACjB,IAAI3oB,EAAQ,EAIZ,OAHA2oB,EAAMthB,SAAQ,SAAAwc,GACZ7jB,GAASA,GAAS,GAAK6jB,KAElB3iB,OAAOlB,K,qCAShB,SAAwB2jB,GACtB,OAAOluB,KAAKiyB,cAAc/D,EAAK5b,MAAQtS,KAAKusB,eAAgBvsB,KAAKusB,kB,yBAQnE,SAAYzpB,GAEyB,IAA/B9C,KAAKmsB,wBAGoD,IAAjCnsB,KAAK4vB,WAAWQ,cAErCP,KAASsD,QACZnzB,KAAK4vB,WAAWwD,YAAY,IAAKC,UAErCxD,KAASmB,QAAQsC,GAAKzD,KAASmB,QAAQ5e,EACvCyd,KAASmB,QAAQuC,GAAK1D,KAASmB,QAAQ3e,K,qBAQzC,SAAQvP,GAE6B,IAA/B9C,KAAKmsB,wBAGT0D,KAASmB,QAAQsC,GAAKzD,KAASzd,EAC/Byd,KAASmB,QAAQuC,GAAK1D,KAASxd,K,uBAQjC,SAAUvP,GAE2B,IAA/B9C,KAAKmsB,wBAGoD,IAAjCnsB,KAAK4vB,WAAWQ,cAErCP,KAASsD,QACZnzB,KAAK4vB,WAAWwD,YAAY,GAEhCvD,KAASmB,QAAQsC,GAAKzD,KAASmB,QAAQwC,IACvC3D,KAASmB,QAAQuC,GAAK1D,KAASmB,QAAQyC,O,kBAOzC,WAAQ,IAAD,OAML,GAJAzzB,KAAKiuB,UAAUrc,SAAQ,SAACsc,GAAW,EAAKwF,aAAaxF,MAInB,MAA9BluB,KAAK0tB,sBAA+B,CACtC,IAAMQ,EAAOluB,KAAKiuB,UAAUjuB,KAAKytB,mBAC3BkG,EAAY,IAAIroB,KAAStL,KAAK0tB,sBACpC,GAAIiG,EAAY3zB,KAAK4tB,oBAEnB5tB,KAAKmuB,aAAaD,GAGlBluB,KAAK0tB,sBAAwB,SAE1B,CAEH,IAAM2D,GACHsC,GAAa3zB,KAAK4tB,oBAAsB,EACvC+F,EACA3zB,KAAK4tB,oBAAsB+F,IAC5B3zB,KAAK4tB,oBAAsB,GAG9B5tB,KAAKmuB,aAAaD,EAAMmD,IAK5B,IAAIS,EAAgB,EACpB,GAAmC,MAA/B9xB,KAAK2tB,uBAAgC,CACvC,IAAMgG,EAAY,IAAIroB,KAAStL,KAAK2tB,uBAChCgG,EAAY3zB,KAAK6tB,qBAEnB7tB,KAAK2tB,uBAAyB,KAI9BmE,EACE6B,GAAa3zB,KAAK6tB,qBAAuB,EACvC8F,GAAa3zB,KAAK6tB,qBAAuB,IACxC7tB,KAAK6tB,qBAAuB8F,IACE,EAA5B3zB,KAAK6tB,qBAA2B,GAK3C7tB,KAAK+rB,cAAc0F,QACnBzxB,KAAK4uB,UAAUhd,SAAQ,SAACqY,GACtB,EAAK2J,aAAa3J,EAAM6H,MAE1B9xB,KAAK+rB,cAAc8H,UAEnB7zB,KAAK8rB,SAASgI,OAAO9zB,KAAK6rB,S,oBAQ5B,SAAOkI,GAUL,IAAK,IAAI3Z,EAAI,EAAGA,EAAIpa,KAAKusB,eAAgBnS,IAAK,CAC5Cpa,KAAKstB,cAAgBttB,KAAKwtB,aAC1B,IAAMiB,EAAMzuB,KAAK0uB,gBAAgBtU,GACjCpa,KAAKiuB,UAAU7T,GAAGkZ,GAAKtzB,KAAKiuB,UAAU7T,GAAGoZ,IAAM/E,EAAI,GACnDzuB,KAAKiuB,UAAU7T,GAAGmZ,GAAKvzB,KAAKiuB,UAAU7T,GAAGqZ,IAAMhF,EAAI,Q,GAluB3BtuB,a,UCiNf6zB,G,kDA/Kb,aAAe,IAAD,8BACZ,gBAEK5wB,MAAQ,CAAC6wB,OAAQ,GAAIC,UAAW,GAHzB,E,qDAUd,WACEl0B,KAAKm0B,gC,gCASP,SAAmBxzB,GAEjB,IAAIyzB,GAAkB,EACdC,EAAer0B,KAAK9D,MAApBm4B,WACJA,EAAW5vB,SAAW9D,EAAU0zB,WAAW5vB,OAC7C4vB,EAAWziB,SAAQ,SAAC0iB,EAAWhiB,GACzBgiB,EAAUvxB,MAAQpC,EAAU0zB,WAAW/hB,GAAOvP,KAC9CuxB,EAAU1sB,SAAWjH,EAAU0zB,WAAW/hB,GAAO1K,SACnDwsB,GAAkB,MAItBA,GAAkB,EAIhBA,GACFp0B,KAAKm0B,gC,oBAQT,WA2BE,IA3BQ,IAAD,EAOHn0B,KAAK9D,MALP+F,EAFK,EAELA,UACAoyB,EAHK,EAGLA,WACAE,EAJK,EAILA,WACAC,EALK,EAKLA,kBACAC,EANK,EAMLA,OAEMR,EAAWj0B,KAAKoD,MAAhB6wB,OAKFS,EAAkB10B,KAAKoD,MAAM8wB,UAAY,EAY3CS,EAAgB,GAChBC,EAAiB3iB,MAAMwiB,GAAQvrB,KAAK,GAC/BkR,EAAI,EAAGA,EAAIia,EAAW5vB,QAAS,CAGtC,IAFA,IAAIowB,EAAM,GACJC,EAAaT,EAAW5vB,OAAS2V,EAAIqa,EAClC9Z,EAAI,EAAGA,EAAI8Z,GAAUra,EAAIia,EAAW5vB,OAAQkW,KAE9Cma,GAAcb,EAAO7Z,KACxBwa,EAAeja,GAAK5O,KAAKO,IAAI2nB,EAAO7Z,GAAIwa,EAAeja,KACzDka,EAAI9iB,KAAKsiB,EAAWja,MAEtBua,EAAc5iB,KAAK8iB,GAGrB,OACE,qBAAK5yB,UAAWA,EAAhB,SACG0yB,EAAcvoB,KAAI,SAACyoB,EAAKtgB,GACvB,IAAMugB,EAAaD,EAAIpwB,OAASgwB,EAChC,OACE,cAACrzB,EAAA,EAAD,CAAMoB,WAAS,EACbC,UAAU,MAEVC,QAASoyB,EAAa,eAAkBP,GAAc,gBACtD5xB,WAAW,SAEXuF,MAAO,CAAE6sB,UAAYxgB,GAAYigB,EAAqBA,EAAoB,GAN5E,SAQGK,EAAIzoB,KAAI,SAACkoB,EAAWU,GACnB,IAAM1iB,EAAQiC,EAAWkgB,EAASO,EAClC,OACE,cAAC5zB,EAAA,EAAD,CAAMoB,WAAS,EACbC,UAAU,SACVC,QAAQ,SACRC,WAAW,SAIXuF,MAAO,CACLP,MAAOmtB,EAAab,EAAO3hB,GAASsiB,EAAeI,GACnDptB,OAAQ8sB,GATZ,SAYE,cAACtzB,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,mBAAGoyB,KAAMX,EAAUW,KAAM7U,OAAO,SAAS8U,IAAI,sBAA7C,SACE,cAAC,IAAD,CACEjtB,QAAM,EACNwI,MAAe,GAAR6B,EACP9B,QAAS,IAHX,SAKE,qBACEzN,IAAKuxB,EAAUvxB,IACf6E,OAAQ0sB,EAAU1sB,OAClB5E,IAAKsxB,EAAUtxB,aAlBlBgyB,OAVNzgB,U,yCAiDjB,WAA+B,IAAD,OACpB8f,EAAer0B,KAAK9D,MAApBm4B,WACRr0B,KAAK4E,SAAS,CACZqvB,OAAQhiB,MAAMoiB,EAAW5vB,QAAQyE,KAAK,GACtCgrB,UAAW,IAIbG,EAAWziB,SAAQ,SAAC0iB,EAAWhiB,GAC7B,IAAM9Q,EAAM,IAAI2zB,MAChB3zB,EAAI4zB,OAAS,SAAAjV,GAAU,IAAD,EACoBA,EAAMkV,cAAtCC,EADY,EACZA,aAAcC,EADF,EACEA,cACtB,GAAIA,EAAe,CAEjB,IAAM5tB,EAAQ2sB,EAAU1sB,OAAS2tB,EAAgBD,EACjD,EAAK1wB,UAAS,SAAAC,GAAS,MAAK,CAC1BovB,OAAO,GAAD,oBACDpvB,EAAUovB,OAAO9nB,MAAM,EAAGmG,IADzB,CAEJ3K,GAFI,aAGD9C,EAAUovB,OAAO9nB,MAAMmG,EAAQ,KAEpC4hB,UAAWnoB,KAAKO,IAAIgoB,EAAU1sB,OAAQ/C,EAAUqvB,iBAMtD1yB,EAAIuB,IAAMuxB,EAAUvxB,W,GA5ME5C,aChBb,OAA0B,6CCA1B,OAA0B,wDCA1B,OAA0B,mDCA1B,OAA0B,oDCA1B,OAA0B,2CCA1B,OAA0B,6CCA1B,OAA0B,kDCA1B,OAA0B,mDCA1B,OAA0B,4CCA1B,OAA0B,6DCA1B,OAA0B,8DCqCnCq1B,GAAgBr0B,YAAOmB,IAAPnB,CAAH,oJAED,SAAAjF,GAAK,OAAIA,EAAME,MAAME,uBAMjCm5B,GAAet0B,YAAOC,IAAPD,CAAH,wEAGZ,qBAAG8F,aACYZ,GAAYC,IAA3B,6CAOAovB,GAAqBv0B,YAAOU,IAAPV,CAAH,yIAELpN,EAAUwD,aACZxD,EAAU4D,uBAEd,SAAAuE,GAAK,OAAIA,EAAME,MAAMO,wBAC5B,gBAAGsK,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,KAA7D,kCACiB1S,EAAUsG,qBAAuB,KADlD,qCAEkBtG,EAAUsG,qBAAuB,KAFnD,cAIA4M,IAAeZ,GAAYG,IAA3B,kCACiBzS,EAAUqG,qBAAuB,KADlD,qCAEkBrG,EAAUqG,qBAAuB,KAFnD,cAIA6M,IAAeZ,GAAYE,IAA3B,kCACiBxS,EAAUoG,qBAAuB,KADlD,qCAEkBpG,EAAUoG,qBAAuB,KAFnD,iCAGcpG,EAAU6D,sBAHxB,cAKAqP,IAAeZ,GAAYC,IAA3B,kCACiBvS,EAAUmG,qBAAuB,KADlD,qCAEkBnG,EAAUmG,qBAAuB,KAFnD,iCAGcnG,EAAU8D,sBAHxB,gBASD6X,GAAcvO,YAAOC,IAAPD,CAAH,4HAIC,WAAa0C,WAAS8L,SAAW,MAAQC,SAAOC,WAC5D,gBAAG5I,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,KAA7D,kCACiB1S,EAAUsG,qBAAuB,KADlD,qCAEkBtG,EAAUsG,qBAAuB,KAFnD,cAIA4M,IAAeZ,GAAYG,IAA3B,kCACiBzS,EAAUqG,qBAAuB,KADlD,qCAEkBrG,EAAUqG,qBAAuB,KAFnD,cAIA6M,IAAeZ,GAAYE,IAA3B,kCACiBxS,EAAUoG,qBAAuB,KADlD,qCAEkBpG,EAAUoG,qBAAuB,KAFnD,cAIA8M,IAAeZ,GAAYC,IAA3B,6FAGiBvS,EAAUmG,qBAAuB,KAHlD,qCAIkBnG,EAAUmG,qBAAuB,KAJnD,gBAUDy7B,GAAqBx0B,YAAOuO,GAAPvO,CAAH,iEAEN,SAAAjF,GAAK,OAAIA,EAAME,MAAMK,+BAIjCm5B,GAAuBz0B,YAAOuO,GAAPvO,CAAH,iEAER,SAAAjF,GAAK,OAAIA,EAAME,MAAMM,iCAIjCm5B,GAAW10B,YAAOC,IAAPD,CAAH,oDAER,gBAAG8F,EAAH,EAAGA,WAAH,OACEA,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,KAA7D,sCACqB1S,EAAUsG,qBAAqB,EAAI,KADxD,eAGA4M,IAAeZ,GAAYG,IAA3B,sCACqBzS,EAAUqG,qBAAqB,EAAI,KADxD,gBAGC6M,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,oCAODwvB,GAAgB30B,YAAO00B,GAAP10B,CAAH,0DAMb40B,GAAiB50B,YAAO00B,GAAP10B,CAAH,mEAGd,gBAAG8F,EAAH,EAAGA,WAAH,OACCA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,iCAOA0vB,GAAiB70B,YAAO20B,GAAP30B,CAAH,oDAEd,qBAAG8F,aACYZ,GAAYC,IAA3B,8EAQA2vB,GAAW90B,YAAO00B,GAAP10B,CAAH,oDAER,gBAAG8F,EAAH,EAAGA,WAAH,OACDA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,yCAOE4vB,GAAe/0B,YAAO80B,GAAP90B,CAAH,mEAGZ,gBAAG8F,EAAH,EAAGA,WAAH,OACCA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,iCAOA6vB,GAAgBh1B,YAAO80B,GAAP90B,CAAH,mEAGb,gBAAG8F,EAAH,EAAGA,WAAH,OACCA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,iCAOA8vB,GAAoBj1B,YAAOU,IAAPV,CAAH,uIAEJpN,EAAUwD,aACZxD,EAAU4D,uBAEd,SAAAuE,GAAK,OAAIA,EAAME,MAAMkB,iBAC5B,qBAAG2J,aACYZ,GAAYC,IAA3B,+BACevS,EAAU6D,sBADzB,uBASAkuB,GAAiB3kB,YAAOU,IAAPV,CAAH,kIAEDpN,EAAUwD,aACZxD,EAAUiE,2BAEd,SAAAkE,GAAK,OAAIA,EAAME,MAAMmB,oBAI5B84B,GAAUl1B,IAAO+P,EAAV,yKAEA,SAAAhV,GAAK,OAAIA,EAAME,MAAMoB,qBAS5B84B,GAAan1B,IAAOK,IAAV,yFAOV+0B,GAAYp1B,IAAOq1B,KAAV,4DAEF,SAAAt6B,GAAK,OAAIA,EAAME,MAAMoB,qBAI5Bi5B,GAAet1B,YAAOmB,IAAPnB,CAAH,0EAEA,SAAAjF,GAAK,OAAIA,EAAME,MAAMQ,+BACjC,gBAAGqK,EAAH,EAAGA,WAAH,OACCA,IAAeZ,GAAYE,IAAMU,IAAeZ,GAAYC,KAA7D,gEAQAowB,GAAsBv1B,YAAO6yB,GAAP7yB,CAAH,gEAEPpN,EAAUkH,gCAAgC,EAAI,MAO1D07B,G,4JAqBJ,WACE,OACE,gCACG32B,KAAK42B,YACL52B,KAAK62B,oBACL72B,KAAK82B,uBACL92B,KAAK+2B,sBACL/2B,KAAKg3B,yBACLh3B,KAAKi3B,wB,uBAUZ,WACC,IACShwB,EAAejH,KAAK9D,MAApB+K,WAER,OACE,cAACuuB,GAAD,CAAejzB,UAAW,EAA1B,SACE,cAAC,IAAD,CAAMiO,QAAS,KAAf,SACE,cAAC,YAAD,CAAU0mB,QAASC,GAAgBC,WAAW,SAASC,aAAc,CAACtC,UAAW,UAAWvF,SAAU,IAAtG,SACE,cAACiG,GAAD,CAAcjzB,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,aAAasE,WAAYA,EAAhG,SACE,cAAC7F,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,eAAC6yB,GAAD,CAAoBzuB,WAAYA,EAAhC,mDAEE,uBAFF,+C,+BAkBd,WACC,IAAD,EACsCjH,KAAK9D,MAAjC+K,EADV,EACUA,WAAY4R,EADtB,EACsBA,YAEpB,OACE,eAAC8c,GAAD,CAAoBnzB,WAAS,EAACC,UAAU,MAAMC,QAAQ,gBAAgBC,WAAW,SAASsE,WAAYA,EAAtG,UACE,cAAC+uB,GAAD,CAAgBnzB,MAAI,EAACoE,WAAYA,EAAjC,SACE,cAAC7F,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAA5D,SACE,cAAC,GAAD,CACEgF,MAAO3H,KAAKs3B,0BACZze,YAAaA,QAInB,cAACsd,GAAD,CAAetzB,MAAI,EAACoE,WAAYA,EAAhC,SACE,eAAC,IAAD,CAAMgB,QAAM,EAACuI,QAAS,IAAtB,UACE,cAAC4lB,GAAD,CAAmBnvB,WAAYA,EAA/B,qBAGA,uBACA,eAAC,GAAD,WACG,0DACA,iFACA,mFACA,oCAEH,uBACA,eAAC,GAAD,WACE,cAACovB,GAAD,CAASpB,KAAMlhC,EAAUK,kBAAmBgsB,OAAO,SAAS8U,IAAI,sBAAhE,qBACC,+FACA,2BACD,cAACmB,GAAD,CAASpB,KAAMlhC,EAAUc,kBAAmBurB,OAAO,SAAS8U,IAAI,sBAAhE,mDACC,sFACA,gFANH,oC,kCAoBV,WACC,IACSjuB,EAAejH,KAAK9D,MAApB+K,WAER,OACE,eAAC2uB,GAAD,CAAsBpzB,WAAS,EAACC,UAAU,MAAMC,QAAQ,gBAAgBC,WAAW,SAASsE,WAAYA,EAAxG,UACE,cAACivB,GAAD,CAAcrzB,MAAI,EAACoE,WAAYA,EAA/B,SACE,eAAC,IAAD,CAAMgB,QAAM,EAACuI,QAAS,IAAtB,UACE,cAAC4lB,GAAD,CAAmBnvB,WAAYA,EAA/B,wCAGA,uBACA,eAAC,GAAD,WACG,wDACD,cAACovB,GAAD,CAASpB,KAAMlhC,EAAUa,uBAAwBwrB,OAAO,SAAS8U,IAAI,sBAArE,yBACC,0DAEH,uBACA,eAAC,GAAD,WACG,+EACA,8EACA,0EAIP,cAACa,GAAD,CAAgBlzB,MAAI,EAACoE,WAAYA,EAAjC,SACE,cAAC7F,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAA5D,SACE,cAAC,KAAD,CAAMoF,OAAK,EAACyI,QAAS,IAArB,SACE,cAAC8lB,GAAD,CACEvzB,IAAKw0B,GACLv0B,IAAI,oB,iCAclB,WACC,IAAD,EACsChD,KAAK9D,MAAjC+K,EADV,EACUA,WAEF7K,EAHR,EACsByc,YAEQ,OAAS,QACrC,OACE,eAAC8c,GAAD,CAAoBnzB,WAAS,EAACC,UAAU,MAAMC,QAAQ,gBAAgBC,WAAW,SAASsE,WAAYA,EAAtG,UACE,cAAC6uB,GAAD,CAAejzB,MAAI,EAACoE,WAAYA,EAAhC,SACE,cAAC,IAAD,CAAMuJ,QAAS,IAAf,SAEE,cAACimB,GAAD,CAAcl0B,UAAW,EAAG0E,WAAYA,EAAxC,SACE,cAAC,KAAD,CACEuwB,WAAW,UACXC,WAAW,kBACXr7B,MAAOA,EACPs7B,QAAS,CAAC9vB,OAAQ,KAOlB+vB,UAAQ,EACRnH,aAAW,GAFNp0B,SAOb,cAAC+5B,GAAD,CAAetzB,MAAI,EAACoE,WAAYA,EAAhC,SACE,eAAC,IAAD,CAAMgB,QAAM,EAACuI,QAAS,IAAtB,UACE,cAAC4lB,GAAD,CAAmBnvB,WAAYA,EAA/B,uBAGA,uBACA,eAAC,GAAD,WACG,UACD,cAACovB,GAAD,CAASpB,KAAMlhC,EAAUe,6BAA8BsrB,OAAO,SAAS8U,IAAI,sBAA3E,8BACC,+FAEH,uBACA,eAAC,GAAD,WACG,mCACD,cAACmB,GAAD,CAASpB,KAAMlhC,EAAUW,oCAAqC0rB,OAAO,SAAS8U,IAAI,sBAAlF,oBACC,iB,oCAab,WACC,IACSjuB,EAAejH,KAAK9D,MAApB+K,WAER,OACE,eAAC2uB,GAAD,CAAsBpzB,WAAS,EAC7BC,UAAU,MACVC,QAAQ,gBACRC,WAAW,SACXsE,WAAYA,EAJd,UAME,cAACivB,GAAD,CAAcrzB,MAAI,EAACoE,WAAYA,EAA/B,SACE,eAAC,IAAD,CAAMgB,QAAM,EAACuI,QAAS,IAAtB,UACE,cAAC4lB,GAAD,CAAmBnvB,WAAYA,EAA/B,0BAGA,uBACA,eAAC,GAAD,WACG,uDACD,cAACsvB,GAAD,qBACC,OACD,cAACF,GAAD,CAASpB,KAAMlhC,EAAUY,iBAAkByrB,OAAO,SAAS8U,IAAI,sBAA/D,uBACC,4BACD,cAACmB,GAAD,CAASpB,KAAMlhC,EAAUU,wBAAyB2rB,OAAO,SAAS8U,IAAI,sBAAtE,0BACC,gFACA,sDAIP,cAACa,GAAD,CAAgBlzB,MAAI,EAACoE,WAAYA,EAAjC,SACE,cAAC7F,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAA5D,SACE,cAAC,KAAD,CAAYoF,OAAK,EAACyI,QAAS,IAA3B,SACE,cAAC8lB,GAAD,CACEvzB,IAAK60B,GACL50B,IAAI,8B,8BAclB,WAAmB,IA+Cb60B,EA/Ca,EAEmB73B,KAAK9D,MAAjC+K,EAFS,EAETA,WAAY4R,EAFH,EAEGA,YAIdif,EAA0D,IAA5C/jC,EAAUkH,gCACxB88B,EAAqE,IAA5ChkC,EAAUkH,gCACnC+8B,EAAmBjkC,EAAUkH,gCAC7Bg9B,EAA2D,GAA5ClkC,EAAUkH,gCACzBi9B,EAA4D,IAA5CnkC,EAAUkH,gCAG1Bo5B,EAAa,CACjB,CACEtxB,IAAKo1B,GACLvwB,OAAQkwB,EACR90B,IAAK,aACLiyB,KAAMlhC,EAAUQ,iBAElB,CACEwO,IAAK8V,EAAcuf,GAA2BC,GAC9CzwB,OAAQmwB,EACR/0B,IAAK,yBACLiyB,KAAMlhC,EAAUS,6BAElB,CACEuO,IAAKu1B,GACL1wB,OAAQowB,EACRh1B,IAAK,mBACLiyB,KAAMlhC,EAAUO,uBAElB,CACEyO,IAAK8V,EAAc0f,GAAiBC,GACpC5wB,OAAQqwB,EACRj1B,IAAK,cACLiyB,KAAMlhC,EAAUM,kBAElB,CACE0O,IAAK8V,EAAc4f,GAAkBC,GACrC9wB,OAAQswB,EACRl1B,IAAK,eACLiyB,KAAMlhC,EAAUK,oBAMpB,OAAQ6S,GACN,KAAKZ,GAAYC,GACfuxB,EAAe,EACf,MACF,KAAKxxB,GAAYE,GACfsxB,EAAe,EACf,MACF,QACEA,EAAe,EAInB,OACE,eAAClC,GAAD,CAAoBnzB,WAAS,EAC3BC,UAAU,SACVC,QAAQ,aACRC,WAAW,UACXsE,WAAYA,EAJd,UAME,cAAC7F,EAAA,EAAD,CAAMoB,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAA5D,SACE,cAACvB,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAAC,IAAD,CAAMoF,QAAM,EAACuI,QAAS,IAAtB,SACE,cAAC4lB,GAAD,CAAmBnvB,WAAYA,EAA/B,sCAIN,cAAC7F,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAAC6zB,GAAD,CACErC,WAAYA,EACZI,OAAQoD,EACRtD,WAAYttB,IAAeZ,GAAYC,GAAK,SAAW,gBACvDkuB,kBAAmBzgC,EAAUkH,gCAAkC,W,qCAYzE,WAA2B,IAIrB0M,EAJoB,EACoB3H,KAAK9D,MAAzC+K,EADgB,EAChBA,WAAYL,EADI,EACJA,oBACd+xB,EAAgB74B,OAAO84B,YAAchyB,EAAsB7S,EAAUmF,aAAe,GAG1F,OAAQ+N,GACN,KAAKZ,GAAYC,GACfqB,EAAQgxB,EAA8C,EAA/B5kC,EAAUmG,qBACjC,MACF,KAAKmM,GAAYE,GACfoB,EAAQgxB,EAA8C,EAA/B5kC,EAAUoG,qBACjC,MACF,KAAKkM,GAAYG,GACfmB,EAAqB,GAAbgxB,EAAkD,EAA/B5kC,EAAUqG,qBAAuB,EAG5DuN,GAAS,IACT,MACF,QACEA,EAAqB,GAAbgxB,EAAkD,EAA/B5kC,EAAUsG,qBAAuB,EAC5DsN,GAAS,IAGb,OAAOA,M,GAxXavH,GAAlBu2B,GACGjqB,UAAY,CAIjBzF,WAAY0F,IAAUC,OAAOC,WAI7BjG,oBAAqB+F,IAAU0T,KAAKxT,WAIpCgM,YAAalM,IAAU0T,KAAKxT,YA+WjB8pB,I,gDAAAA,M,6KC3oBA,OAA0B,kDC6CnCkC,GAAe13B,YAAO23B,KAAP33B,CAAH,sHAEA,SAAAjF,GAAK,OAAIA,EAAME,MAAMS,wBAExB4oB,KAAOsT,OAAS,GAIzB9R,GAAgB9lB,YAAO+lB,KAAP/lB,CAAH,uGAIb,qBAAG8F,aACYZ,GAAYC,IAA3B,uEAQA0yB,GAAiB73B,IAAOK,IAAV,4EAGd,qBAAGyF,aACYZ,GAAYC,IAA3B,yCASA2yB,GAAoB93B,YAAOU,IAAPV,CAAH,2LAOjB,qBAAG8F,aACYZ,GAAYC,IAA3B,wCAOA4yB,GAAoB/3B,YAAO83B,GAAP93B,CAAH,wHAIV,SAAAjF,GAAK,OAAIA,EAAME,MAAMW,0BAC5B,qBAAGkK,aACYZ,GAAYC,IAA3B,2EAaA6yB,GAAmBh4B,IAAOG,IAAV,gHAIF,SAAApF,GAAK,MAAI,aAAeA,EAAME,MAAMW,0BAClD,qBAAGkK,aACYZ,GAAYC,IAA3B,uCAOA8yB,GAAqBj4B,YAAO83B,GAAP93B,CAAH,yHAIX,SAAAjF,GAAK,OAAIA,EAAME,MAAMY,2BAC5B,qBAAGiK,aACYZ,GAAYC,IAA3B,4EAuEAyhB,GAAmB5mB,YAAO6mB,KAAP7mB,CAAH,8PAET,SAAAjF,GAAK,OAAIA,EAAME,MAAMU,yBAGd,SAAAZ,GAAK,OAAI+rB,gBAAK/rB,EAAME,MAAMyC,qBAAsB3C,EAAME,MAAMmD,uBACjE,SAAArD,GAAK,OAAIA,EAAME,MAAMyC,wBAInB,SAAA3C,GAAK,OAAIA,EAAME,MAAMU,yBAMhCu8B,GAAiBl4B,YAAOm4B,KAAPn4B,CAAH,gFAOdo4B,GAAwBp4B,aAAO,gBAAMomB,EAAN,2BACnC,cAACiS,GAAA,EAAD,2BAAqBjS,GAArB,IAA4BE,QAAS,CAAEgS,MAAO,cADlBt4B,CAAH,uFAIdpN,EAAUmF,aAAe,MACpB,SAAAgD,GAAK,OAAIA,EAAME,MAAM4B,yBAIjC07B,GAAev4B,aAAO,gBAAMomB,EAAN,2BAC1B,cAACoS,GAAA,EAAD,2BAAYpS,GAAZ,IAAmBE,QAAS,CAAEgS,MAAO,cADlBt4B,CAAH,6HAILpN,EAAUmF,aAAe,MAE9B,SAAAgD,GAAK,MAAyC,SAArCA,EAAM09B,2BACf19B,EAAME,MAAM6B,iCAAmC/B,EAAME,MAAM4B,yBAE3D,SAAA9B,GAAK,OAAIA,EAAME,MAAMI,OAAZ,oBAAkCN,EAAME,MAAME,qBAAwB,SAIjFu9B,GAAgB14B,YAAO24B,KAAP34B,CAAH,iEAED,SAAAjF,GAAK,OAAIA,EAAME,MAAM8B,sBAIjC67B,GAAqB54B,YAAO64B,KAAP74B,CAAH,4BAElB84B,GAAgB94B,YAAOO,IAAPP,CAAH,wGAQb+4B,GAAqB/4B,aAAO,gBAAMomB,EAAN,2BAChC,cAAC4S,GAAA,EAAD,2BAAkB5S,GAAlB,IAAyBE,QAAS,CAAE2S,QAAS,gBADpBj5B,CAAH,4BAIlBk5B,GAAiBl5B,YAAOm5B,KAAPn5B,CAAH,0UAId44B,IAGE,SAAA79B,GAAK,OAAIA,EAAMq+B,SACbr+B,EAAME,MAAMgC,4BACZlC,EAAME,MAAM+B,kBAGhB+7B,GAGiBnmC,EAAUwD,aACZxD,EAAUmE,2BACR,SAAAgE,GAAK,OAAIA,EAAMq+B,SAAW,IAAM,OAE7C,SAAAr+B,GAAK,OAAIA,EAAMq+B,SACbr+B,EAAME,MAAMgC,4BACZlC,EAAME,MAAMiC,mBAoClBm8B,G,kDAwCJ,aAAe,IAAD,8BACZ,gBAEKC,cAAgBC,IAAMC,YAG3B,EAAKC,cAAgB,EAAKA,cAAcj7B,KAAnB,gBANT,E,0CAcd,WACE,OACE,eAAC,WAAD,WAEE,qBAAKmc,IAAK9b,KAAKy6B,cAAf,SACE,cAACvT,GAAA,EAAD,MAEF,cAAC,KAAD,CAAMR,IAAI,EAAMlW,QAAS,IAAKmW,cAAY,EAACC,eAAa,EAAxD,SACE,cAACiS,GAAD,CAAct2B,UAAW,EAAzB,SACGvC,KAAK66B,+BAGT76B,KAAK86B,iB,+BASZ,WACE,0EAGI96B,KAAK9D,MAAM6+B,oBACb/6B,KAAK9D,MAAM6+B,mBAAmB/6B,KAAKy6B,cAAcO,QAAQC,gB,gCAO7D,WACE,2EAGIj7B,KAAK9D,MAAM6+B,oBACb/6B,KAAK9D,MAAM6+B,mBAAmB/6B,KAAKy6B,cAAcO,QAAQC,cAIvDj0B,MAAyBhH,KAAK9D,MAAMg/B,oBACtCl7B,KAAK9D,MAAMi/B,gC,sCAQf,WACE,IAAMl0B,EAAaN,KACnB,OACE,cAAC,GAAD,CAAeM,WAAYA,EAA3B,SACE,eAAC7F,EAAA,EAAD,CAAMoB,WAAS,EAACG,WAAW,SAASC,KAAK,SAAzC,UACE,cAACxB,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACG7C,KAAKo7B,kBAEPp7B,KAAKq7B,qB,2BAWd,WAAiB,IAAD,EACwDr7B,KAAK9D,MAAnEi/B,EADM,EACNA,4BAA6BG,EADvB,EACuBA,6BACrC,OACE,cAACC,GAAA,EAAD,CAAM7U,IAAI,EAAMlW,QAAS,IAAzB,SACE,cAAC,GAAD,CACEgY,QACExhB,KAAwBs0B,EAA+BH,EAF3D,SAKE,cAAC9B,GAAD,U,yBAWR,WACE,IAAMpyB,EAAaN,KACnB,OACE,cAAC,IAAD,CACEuB,MAAO,CAAEszB,eAAgB,QACzBzU,GAAG,IAFL,SAIE,cAAC3lB,EAAA,EAAD,CAAMoB,WAAS,EAACG,WAAW,SAASD,QAAQ,aAAaE,KAAK,SAA9D,SACE,eAAC,IAAD,CAAY4N,QAAS,IAArB,UACE,cAACpP,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAACm2B,GAAD,CACEj2B,IAAKw0B,GACL3vB,OAAQ5H,KAAKy7B,uBACbz4B,IAAI,OACJiE,WAAYA,MAIhB,cAAC7F,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAACq2B,GAAD,CAAmBjyB,WAAYA,EAA/B,uBAEF,cAAC,KAAD,CAAYuJ,QAAS,IAArB,SACE,cAACpP,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAACs2B,GAAD,CAAkBlyB,WAAYA,QAGlC,cAAC7F,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAACu2B,GAAD,CAAoBnyB,WAAYA,EAAhC,iC,kCAaZ,WACE,OhDhbG,SAAmCA,GACxC,OAAQA,GACN,KAAKZ,GAAYC,GACf,OAAOxG,OAAOgH,WAAW,eAAiB/S,EAAU0E,kBAAoB,OAAOsO,QACjF,KAAKV,GAAYE,GACf,OAAOzG,OAAOgH,WAAW,eAAiB/S,EAAU4E,kBAAoB,OAAOoO,QACjF,KAAKV,GAAYG,GACf,OAAO1G,OAAOgH,WAAW,eAAiB/S,EAAU8E,kBAAoB,OAAOkO,QACjF,KAAKV,GAAYI,GACf,OAAO3G,OAAOgH,WAAW,eAAiB/S,EAAUgF,kBAAoB,OAAOgO,QACjF,KAAKV,GAAYK,GACjB,QACE,OAAO5G,OAAOgH,WAAW,eAAiB/S,EAAU2nC,kBAAoB,OAAO30B,SgDoa7E40B,CAA0Bt1B,GAAYC,IACjC,KAEA,K,uBAQX,WAAY,MASNtG,KAAK9D,MAJPi/B,EALQ,EAKRA,4BACAv0B,EANQ,EAMRA,oBACAg1B,EAPQ,EAORA,2BACAV,EARQ,EAQRA,mBAEF,OAAIl0B,KAEA,cAAC0yB,GAAD,CACEmC,QAAQ,aACRC,KAAMl1B,EACNgzB,2BAA4BgC,EAA6B,OAAS,QAHpE,SAKG57B,KAAK+7B,qBAMR,cAACxC,GAAD,CACEuC,KAAMZ,EACNc,OAAQb,EACRc,QAASd,EAHX,SAKE,qBAAK3S,QAAS2S,EAAd,SACGn7B,KAAK+7B,yB,8BAYhB,WAEE,OACE,eAAC,WAAD,WAEE,cAAC7U,GAAA,EAAD,IACA,eAACgV,GAAA,EAAD,WAKE,eAAC7B,GAAD,CAAgB8B,QAAM,EAACC,UAAWpW,IAAMe,GAAG,IAAIwT,SAAUv6B,KAAK46B,cAAc,KAA5E,UACE,cAACb,GAAD,UACE,cAAC,KAAD,MAEF,cAACG,GAAD,CAAoBE,QAAQ,OAAOG,SAAUv6B,KAAK46B,cAAc,UAElE,eAACP,GAAD,CAAgB8B,QAAM,EAACC,UAAWpW,IAAMe,GAAG,eAAewT,SAAUv6B,KAAK46B,cAAc,gBAAvF,UACE,cAACb,GAAD,UACE,cAACE,GAAD,UACE,sBAAMn3B,EAAG/O,EAAU2F,iCAGvB,cAACwgC,GAAD,CAAoBE,QAAQ,oBAE9B,eAACC,GAAD,CAAgB8B,QAAM,EAACC,UAAWpW,IAAMe,GAAG,OAAOwT,SAAUv6B,KAAK46B,cAAc,QAA/E,UACE,cAACb,GAAD,UACE,cAACr4B,EAAA,EAAD,UACE,sBAAMoB,EAAG/O,EAAU6F,wBAGvB,cAACsgC,GAAD,CAAoBE,QAAQ,oBAE9B,cAACP,GAAD,IACA,eAACQ,GAAD,CAAgB8B,QAAM,EAACC,UAAWpW,IAAMe,GAAG,SAASwT,SAAUv6B,KAAK46B,cAAc,UAAjF,UACE,cAACb,GAAD,UACE,cAAC,KAAD,MAEF,cAACG,GAAD,CAAoBE,QAAQ,qB,2BAatC,SAAciC,GACZ,OAAOr8B,KAAK9D,MAAMqE,SAASC,WAAa67B,M,GAjSrB58B,GAAjB+6B,GACG9tB,UAAY,CAIjBquB,mBAAoBpuB,IAAU2vB,KAI9BhB,6BAA8B3uB,IAAU2vB,KAAKzvB,WAI7CsuB,4BAA6BxuB,IAAU2vB,KAAKzvB,WAI5CjG,oBAAqB+F,IAAU0T,KAAKxT,WAIpC+uB,2BAA4BjvB,IAAU0T,KAAKxT,WAI3CquB,mBAAoBvuB,IAAU0T,KAAKxT,WAInCtM,SAAUoM,IAAUG,OAAOD,WAI3B0vB,UAAW5vB,IAAUG,QAoQV0vB,I,iCAAAA,eAAWhC,I,oBCjlBpBiC,GAAgBt7B,YAAO+lB,KAAP/lB,CAAH,0NAKLpN,EAAUoF,cAAgB,MAItB,SAAA+C,GAAK,OAAIA,EAAME,MAAM6C,yBAC1B,SAAA/C,GAAK,OAAIA,EAAME,MAAM8C,uBAI5Bw9B,GAAev7B,YAAOC,IAAPD,CAAH,+DAMZw7B,GAAgBx7B,YAAOu7B,GAAPv7B,CAAH,0EAEApN,EAAUsF,wBAA0B,MACjD,qBAAG4N,aACYZ,GAAYC,IAA3B,iCACiBvS,EAAUqF,iBAAmB,KAD9C,gBAOAwjC,GAAiBz7B,YAAOu7B,GAAPv7B,CAAH,2EAEApN,EAAUsF,wBAA0B,MAClD,qBAAG4N,aACYZ,GAAYC,IAA3B,kCACkBvS,EAAUqF,iBAAmB,KAD/C,gBAOAyjC,GAAmB17B,YAAOU,IAAPV,CAAH,uFAEHpN,EAAUwD,cAKvBulC,GAAU37B,IAAO+P,EAAV,2IAEA,SAAAhV,GAAK,OAAIA,EAAME,MAAM8C,uBAQ5B69B,GAAwB57B,YAAOC,IAAPD,CAAH,4FAGrB,qBAAG8F,aACYZ,GAAYC,IAA3B,wCAOA02B,GAAoB77B,YAAO6mB,KAAP7mB,CAAH,+OAGH,SAAAjF,GAAK,OAAI+rB,gBAAK/rB,EAAME,MAAMyC,qBAAsB3C,EAAME,MAAMmD,uBACjE,SAAArD,GAAK,OAAIA,EAAME,MAAMyC,wBAU9Bo+B,GAAc97B,YAAO+7B,KAAP/7B,CAAH,iEAMXg8B,GAAgBh8B,YAAOi8B,KAAPj8B,CAAH,iSAIN,SAAAjF,GAAK,OAAIA,EAAME,MAAM8C,uBAEd,SAAAhD,GAAK,OAAI+rB,gBAAK/rB,EAAME,MAAMyC,qBAAsB3C,EAAME,MAAMmD,uBACjE,SAAArD,GAAK,OAAIA,EAAME,MAAMyC,wBAInB,SAAA3C,GAAK,OAAIA,EAAME,MAAM8C,uBAMhCm+B,GAAel8B,YAAOO,IAAPP,CAAH,wFAUZm8B,G,uKAoBJ,WACE,0EAEAC,kBAAQxpC,EAAUG,qBAAsBspC,SAASC,cAAc,2B,oBAQjE,WACE,IAAMx2B,EAAaN,KACnB,OACE,eAAC81B,GAAD,WACE,cAACE,GAAD,CACEn6B,WAAS,EACTC,UAAU,MACVC,QAAQ,aACRC,WAAW,SACXsE,WAAYA,EALd,SAOE,cAAC7F,EAAA,EAAD,CAAMyB,MAAI,EAAV,SACE,cAACg6B,GAAD,CAAkBtyB,MAAM,UAAxB,SACGvK,KAAK09B,yBAIZ,cAAChB,GAAD,CAAcl6B,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,SAAvE,SACqC,MAAjC3C,KAAK9D,MAAMqE,SAASC,UACpB,eAACY,EAAA,EAAD,CAAMyB,MAAI,EAAV,UACE,cAACg6B,GAAD,CAAkBtyB,MAAM,UAAxB,oCACA,eAACsyB,GAAD,CAAkBtyB,MAAM,UAAxB,UACG,IACD,cAACuyB,GAAD,CAAS7H,KAAMlhC,EAAUM,iBAAkB+rB,OAAO,SAAS8U,IAAI,sBAA/D,SACGl1B,KAAK29B,kBAEP,YAKT,eAACf,GAAD,CACEp6B,WAAS,EAACC,UAAU,MACpBC,QAAQ,WACRC,WAAW,SACXC,KAAK,SACLqE,WAAYA,EALd,UAOE,cAAC81B,GAAD,CAAuBl6B,MAAI,EAACoE,WAAYA,EAAxC,SACE,cAAC+1B,GAAD,CACEzyB,MAAM,UACN0qB,KAAMlhC,EAAUe,6BAChBsrB,OAAO,SACP8U,IAAI,sBAJN,SAME,cAAC+H,GAAD,CAAah7B,UAAU,sBAG3B,cAAC86B,GAAD,CAAuBl6B,MAAI,EAACoE,WAAYA,EAAxC,SACE,cAAC+1B,GAAD,CACEzyB,MAAM,UACN0qB,KAAMlhC,EAAUW,oCAChB0rB,OAAO,SACP8U,IAAI,sBAJN,SAME,cAAC+H,GAAD,CAAah7B,UAAU,qBAG3B,cAAC86B,GAAD,CAAuBl6B,MAAI,EAACoE,WAAYA,EAAxC,SACE,cAACk2B,GAAD,CACE5yB,MAAM,UACNoK,QAAS3U,KAAK9D,MAAM2c,YACpB6O,KACE,cAAC2V,GAAD,UACE,sBAAMv6B,EAAG/O,EAAUiG,8BAGvB4jC,YACE,cAACP,GAAD,UACE,sBAAMv6B,EAAG/O,EAAUkG,6BAGvB6a,SAAU9U,KAAK9D,MAAM2hC,8B,8BAahC,WAEC,OADmBl3B,MAEjB,KAAKN,GAAYC,GACf,MAAO,wBACT,KAAKD,GAAYE,GACf,MAAO,uCACT,QACE,MAAO,gE,2BASb,WAEE,OADmBI,MAEjB,KAAKN,GAAYC,GACf,MAAO,yBACT,QACE,MAAO,2D,GA3IM7G,GAAf69B,GACG5wB,UAAY,CAIjBmM,YAAalM,IAAU0T,KAAKxT,WAI5BgxB,kBAAmBlxB,IAAU2vB,KAAKzvB,WAIlCtM,SAAUoM,IAAUG,OAAOD,YAmIhB2vB,I,SAAAA,eAAWc,IC3P1Bx8B,IAAQg9B,WAAW/pC,EAAUmH,8BAC7B4F,IAAQC,IAAI,CAAEg9B,aAAa,IAE3B,IAAMC,GAAa78B,IAAOG,IAAV,4fAIE,SAAApF,GAAK,MACjB,gBACCA,EAAM0K,oBAAsB/C,WAASo6B,eAAiBp6B,WAASq6B,eAChE,MACAtuB,SAAOC,aAKP,gBAAG5I,EAAH,EAAGA,WAAYL,EAAf,EAAeA,oBAAqBzK,EAApC,EAAoCA,kBAApC,OACE8K,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,IAAMQ,IAAeZ,GAAYG,KAA9F,iCACiBI,IAAwBzK,EAAqBpI,EAAUmF,aAAe,KAAO,MAD9F,cAGC+N,IAAeZ,GAAYE,IAA5B,iCACgBK,EAAsB7S,EAAUmF,aAAe,KAAO,MADtE,cAGC+N,IAAeZ,GAAYC,IAA5B,yCAOD63B,GAAch9B,YAAOC,IAAPD,CAAH,yKAGc,SAAAjF,GAAK,OAAIA,EAAMkiC,aAAe,QAIvDC,GAAYl9B,IAAOG,IAAV,+eAQT,gBAAG2F,EAAH,EAAGA,WAAYL,EAAf,EAAeA,oBAAqBzK,EAApC,EAAoCA,kBAApC,OACE8K,IAAeZ,GAAYK,IAAMO,IAAeZ,GAAYI,IAAMQ,IAAeZ,GAAYG,KAA9F,iCACiBI,GAAuBzK,EAAqBpI,EAAUmF,aAAe,KAAO,MAD7F,gBAiQQolC,G,kDAlPb,WAAYpiC,GAAQ,IAAD,8BACjB,cAAMA,IACDkH,MAAQ,CACXm5B,UAAW,KACXgC,aAAc,EACdC,wBAAwB,EACxBtD,oBAAoB,EACpB/+B,mBAAmB,EACnB0c,aAAa,GAIf,EAAK4lB,aAAe,EAAKA,aAAa9+B,KAAlB,gBACpB,EAAKo7B,mBAAqB,EAAKA,mBAAmBp7B,KAAxB,gBAC1B,EAAK27B,6BAA+B,EAAKA,6BAA6B37B,KAAlC,gBACpC,EAAKw7B,4BAA8B,EAAKA,4BAA4Bx7B,KAAjC,gBACnC,EAAKqgB,2BAA6B,EAAKA,2BAA2BrgB,KAAhC,gBAClC,EAAKk+B,kBAAoB,EAAKA,kBAAkBl+B,KAAvB,gBAjBR,E,qDAwBnB,WAEE49B,kBACExpC,EAAUI,qBACVqpC,SAASC,cAAc,2B,oBAS3B,WAAU,IAAD,SAQHz9B,KAAKoD,MANPm7B,EAFK,EAELA,aACAC,EAHK,EAGLA,uBACAtD,EAJK,EAILA,mBACA/+B,EALK,EAKLA,kBACA0c,EANK,EAMLA,YACA0jB,EAPK,EAOLA,UAGI31B,EAAsB43B,GAA0Bx3B,KAChDC,EAAaN,GAAcC,GAuBjC,OACE,eAAC,WAAD,WACE,cAAC5K,EAAD,CAAaG,kBAAmBA,EAAmBC,MAAO4D,KAAK0+B,aAC/D,cAAC,IAAD,CAAetiC,MAAO4D,KAAK0+B,WAA3B,SACE,cAAC,IAAD,CAAY5iB,IAAK9b,KAAKy+B,aAAtB,SACE,gCACE,cAAC,GAAD,CACE1D,mBAAoB/6B,KAAK+6B,mBACzBO,6BAA8Bt7B,KAAKs7B,6BACnCH,4BAA6Bn7B,KAAKm7B,4BAClCv0B,oBAAqBA,EACrBg1B,2BAA4Bz/B,EAC5B++B,mBAAoBA,EACpBqB,UAAWA,IAEb,cAACyB,GAAD,CACE/2B,WAAYA,EACZL,oBAAqBA,EACrBs0B,mBAAoBA,EACpB/+B,kBAAmBA,EAInBwiC,gBAAiB,kBAAM7+B,OAAO8+B,cAAc,IAAIC,MAAM,YARxD,SAUE,eAACV,GAAD,CACE37B,WAAS,EACTC,UAAU,SACVC,QAAQ,gBACR07B,aAAcG,EAJhB,UAME,cAAC,IAAD,CACEO,OAAK,EAACC,KAAK,IACXjL,OAAQ,SAAC53B,GAAD,OACN,cAAC,GAAD,2BACMA,GADN,IAEE+K,WAAYA,QAIlB,cAAC,IAAD,CACE63B,OAAK,EAACC,KAAK,eACXjL,OAAQ,SAAC53B,GAAD,OACN,cAAC,GAAD,2BACMA,GADN,IAEE+K,WAAYA,EACZ+Y,2BAA4B,EAAKA,2BACjCpZ,oBAAqBA,EACrBiS,YAAaA,QAInB,cAAC,IAAD,CACEimB,OAAK,EAACC,KAAK,OACXjL,OAAQ,SAAC53B,GAAD,OACN,cAAC,GAAD,2BACMA,GADN,IAEE+K,WAAYA,QAIlB,cAAC,IAAD,CACE63B,OAAK,EAACC,KAAK,SACXjL,OAAQ,SAAC53B,GAAD,OACN,cAAC,GAAD,2BACMA,GADN,IAEE+K,WAAYA,EACZL,oBAAqBA,EACrBiS,YAAaA,QAInB,cAAC,IAAD,CACEimB,OAAK,EAACC,KAAK,YACXjL,OAAQ,SAAC53B,GAAD,OACN,cAAC,GAAD,2BACMA,GADN,IAEE+K,WAAYA,QAIlB,cAACo3B,GAAD,CACEp3B,WAAYA,EACZL,oBAAqBA,EACrBzK,kBAAmBA,EAHrB,SAKE,cAAC,GAAD,CACE0hC,kBAAmB79B,KAAK69B,kBACxBhlB,YAAaA,uB,0BAgBjC,SAAauV,GACXpuB,KAAK4E,SAAS,CAAE23B,UAAWnO,M,gCAO7B,SAAmBxmB,GACjB5H,KAAK4E,SAAS,CACZ25B,aAAc32B,M,0CAQlB,SAA6Bo3B,GAC3Bh/B,KAAK4E,SAAS,CACZ45B,wBAAyBx+B,KAAKoD,MAAMo7B,2B,yCAQxC,SAA4BQ,GAC1Bh/B,KAAK4E,SAAS,CACZs2B,oBAAqBl7B,KAAKoD,MAAM83B,uB,wCASpC,SAA2B/+B,GACzB6D,KAAK4E,SAAS,CACZzI,kBAAmBA,M,+BAUvB,SAAkBgkB,EAAOxL,GACvB3U,KAAK4E,SAAS,CACZiU,YAAalE,M,sBASjB,WACE,OAAO3U,KAAKoD,MAAMyV,YAAcrZ,EAAYjD,M,GAnP9B4D,aCjFlB8+B,IAASnL,OACL,cAAC,GAAD,IACJ0J,SAAS0B,eAAe,W","file":"static/js/main.97d7a0ff.chunk.js","sourcesContent":["/**\n * @file constants\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nconst Constants = Object.freeze({\n  URI_CDN_FONT_AWESOME:\n    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css',\n  // Remove any fonts that aren't used!!!\n  URI_CDN_GOOGLE_FONTS:\n    'https://fonts.googleapis.com/css?family=Istok+Web:400|Muli:200,300,400,500',\n  URI_ABOUT_DFINITY: 'https://dfinity.org/',\n  URI_ABOUT_NOMICS: 'https://nomics.com/',\n  URI_ABOUT_MATERIAL_UI: 'https://material-ui.com/',\n  URI_ABOUT_REACT: 'https://reactjs.org/',\n  URI_ABOUT_STYLED_COMPONENTS: 'https://www.styled-components.com/',\n  URI_GITHUB_CONTRIBUTORS: 'https://github.com/orgs/dfinityexplorer/people',\n  URI_GITHUB_DFINITY_EXPLORER_PROJECT: 'https://github.com/dfinityexplorer/dfinityexplorer-dashboard',\n  URI_GITHUB_DYLAN: 'https://github.com/dylancm4',\n  URI_GITHUB_MIT_LICENSE: 'https://github.com/dfinityexplorer/dfinityexplorer/blob/master/LICENSE',\n  URI_NASA_EXPLORER: 'https://nssdc.gsfc.nasa.gov/multi/explorer.html',\n  URI_TWITTER_DFINITY_EXPLORER: 'https://twitter.com/dfinityexplorer',\n  // Remove colors that are not used!!!\n  COLOR_DFINITY_BLACK: 'rgb(41, 42, 46)', // from dfinity.org/press\n  COLOR_DFINITY_BLACK_LIGHTER: 'rgb(73, 75, 82)', //  COLOR_DFINITY_BLACK scaled lighter\n  COLOR_DFINITY_BLACK_DARKER: 'rgb(27, 28, 31)', // COLOR_DFINITY_BLACK scaled darker\n  COLOR_DFINITY_LIGHT_ORANGE: 'rgb(251, 176, 59)', // from dfinity.org style guide\n  COLOR_DFINITY_DARK_ORANGE: 'rgb(241, 90, 36)', // from dfinity.org style guide\n  COLOR_DFINITY_BLUE_50: '#E0F3FB',\n  COLOR_DFINITY_BLUE_100: '#B0E1F5',\n  COLOR_DFINITY_BLUE_200: '#7ECDEE',\n  COLOR_DFINITY_BLUE_300: '#4DB9E6',\n  COLOR_DFINITY_BLUE_400: '#29ABE2', // DFINITY logo blue\n  COLOR_DFINITY_BLUE_500: '#009DDD',\n  COLOR_DFINITY_BLUE_600: '#0090CF',\n  COLOR_DFINITY_BLUE_700: '#007DBC',\n  COLOR_DFINITY_BLUE_800: '#006DA8',\n  COLOR_DFINITY_BLUE_900: '#004E88',\n  COLOR_TEXT_LIGHT: '#FFFFFF', // This should be removed, replaced with COLOR_DARK_TEXT!!!\n  COLOR_DARK_TEXT: '#FFFFFF',\n  COLOR_DARK_TEXT_FADED: 'rgb(190, 191, 192)', // rgba(255, 255, 255, 0.7) on COLOR_DFINITY_BLACK, matches Material-UI Tab opacity\n  COLOR_TEXT_DARKER: 'rgb(148, 149, 151)', // rgba(255, 255, 255, 0.5) on COLOR_DFINITY_BLACK\n  COLOR_TEXT_DARKEST: 'rgb(106, 106, 109)', // rgba(255, 255, 255, 0.3) on COLOR_DFINITY_BLACK\n  COLOR_LIGHT_TEXT_FADED: 'rgb(77, 77, 77)', // rgba(0, 0, 0, 0.7) on white, matches Material-UI Tab opacity\n  COLOR_DARK_BODY_DARKER_MAC_OS: '#1B1B1B', // Calendar, Finder, iTunes, Messages\n  COLOR_DARK_BODY_LIGHTER_MAC_OS: '#262626', // Finder\n  COLOR_DARK_BODY_LIGHTER_MAC_OS_ALPHA_85: 'rgba(38, 38, 38, 0.85)',\n  COLOR_DARK_DRAWER_DIVIDER_MAC_OS: '#4B4B4B', // Calendar, Messages\n  COLOR_DARK_DRAWER_DIVIDER_YOUTUBE: '#333333',\n  COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX: '#808080',\n  COLOR_DARK_TEXT_MAC_OS: '#DCDCDC', // Calendar, iTunes\n  COLOR_LIGHT_BODY_TEXT_GOOGLE: '#202124', // About, Account, News, Gmail, Contacts, Docs, Keep, Material\n  COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE: '#5F6368', // About, Account, Contacts, Docs, Drive, Gmail, Material\n  COLOR_LIGHT_CHART_GOOGLE: '#9E9E9E', // Analytics, Firebase\n  COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE: '#E3E3E3', // Docs, Sheets\n  COLOR_LIGHT_DRAWER_ICON_GOOGLE: '#5F6368', // Account, Docs, Drive, Calendar, Keep, Photos, Sheets\n  COLOR_LIGHT_DRAWER_TEXT_GOOGLE: '#3C4043', // Account, Docs, Calendar, News, Photos, Sheets\n  COLOR_MATERIAL_PALETTE_LIGHT_GREEN_700_LIGHT: '#99D066',\n  COLOR_TWITTER_BLUE: 'rgb(100, 164, 224)',\n  COLOR_TWITTER_GREEN: 'rgb(131, 175, 97)',\n  COLOR_TWITTER_ORANGE: 'rgb(244, 174, 78)',\n  COLOR_TWITTER_PURPLE: 'rgb(165, 144, 211)',\n  COLOR_GRAY_ON_WHITE: 'rgb(235, 235, 235)', // matches Material-UI IconButton hover\n  FONT_PRIMARY: '\\'Muli\\', sans-serif',\n  MATERIAL_FONT_SIZE_H1: '6rem', // 96px\n  MATERIAL_FONT_SIZE_H2: '3.75rem', // 60px\n  MATERIAL_FONT_SIZE_H3: '3rem', // 48px\n  MATERIAL_FONT_SIZE_H4: '2.125rem', // 34px\n  MATERIAL_FONT_SIZE_H5: '1.5rem', // 24px\n  MATERIAL_FONT_SIZE_H6: '1.25rem', // 20px\n  MATERIAL_FONT_SIZE_SUBTITLE_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_SUBTITLE_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BODY_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_BODY_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BUTTON: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_CAPTION: '0.75rem', // 12px\n  MATERIAL_FONT_SIZE_OVERLINE: '0.625rem', // 10px\n  MATERIAL_CIRCULAR_INDICATOR_SIZE: 48,\n  MATERIAL_UI_ICON_BUTTON_FONT_SIZE: 24,\n  FONT_SIZE_TABLE_XS: '0.6875rem', // 11px\n  BREAKPOINT_MIN_XS: 0,\n  BREAKPOINT_MAX_XS: 599,\n  BREAKPOINT_MIN_SM: 600,\n  BREAKPOINT_MAX_SM: 959,\n  BREAKPOINT_MIN_MD: 960,\n  BREAKPOINT_MAX_MD: 1279,\n  BREAKPOINT_MIN_LG: 1280,\n  BREAKPOINT_MAX_LG: 1919,\n  BREAKPOINT_MIN_XL: 1920,\n  BREAKPOINT_LG_MAX_WIDTH: 1140, // from Bootstrap\n  DRAWER_WIDTH: 256,\n  FOOTER_HEIGHT: 96,\n  FOOTER_MARGIN_XS: 8,\n  FOOTER_MARGIN_SM_AND_UP: 32,\n  ICON_SVG_PATH_BLOCK: 'M12 0L1 6v12.131L12 24l11-5.869V6.065L12 0zm7.91 6.646l-7.905 4.218L4.133 6.57l7.862-4.289 7.915 4.365zM3 8.23l8 4.363V21.2l-8-4.268V8.23zM13 21.2v-8.6l8-4.269v8.6L13 21.2z',\n  ICON_SVG_PATH_BLOCK_TIME: 'M13 12l-.688-4h-.609L11 12a1.99 1.99 0 0 0-1 1.723 2 2 0 0 0 4 0A1.99 1.99 0 0 0 13 12zm-1-8C6.478 4 2 8.477 2 14s4.478 10 10 10 10-4.477 10-10S17.522 4 12 4zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8zM10 2.181V0h4v2.181c-1.438-.243-2.592-.238-4 0zm9.179 2.226L20.586 3 22 4.414l-1.321 1.321a12.134 12.134 0 0 0-1.5-1.328z',\n  ICON_SVG_PATH_CPU_CORES: 'M10 2H8V0h2v2zM2 8H0v2h2V8zm0-5c0-.551.448-1 1-1h4V0H3a3 3 0 00-3 3v4h2V3zm0 8H0v2h2v-2zM16 0h-2v2h2V0zm-3 0h-2v2h2V0zM2 14H0v2h2v-2zm18-2.042h-2.277l-2.36 5.386-2.883-7.93-2.442 5.78-2.071-4.14-1.129 1.966H4V20h16v-8.042zm-16 .063h2.259L8.027 8.94l1.935 3.866 2.589-6.126 2.899 7.976 1.62-3.697H20V4H4v8.021zM14 24h2v-2h-2v2zm8-11h2v-2h-2v2zM2 21v-4H0v4a3 3 0 003 3h4v-2H3c-.552 0-1-.449-1-1zm20 0c0 .551-.448 1-1 1h-4v2h4a3 3 0 003-3v-4h-2v4zm0-11h2V8h-2v2zm0 6h2v-2h-2v2zm2-13a3 3 0 00-3-3h-4v2h4c.552 0 1 .449 1 1v4h2V3zM8 24h2v-2H8v2zm3 0h2v-2h-2v2z',\n  ICON_SVG_PATH_CYCLES_BURNED: 'M9.797.094c0 .004.047.101.113.215.524.957.824 2.109.79 3.03-.02.481-.102.786-.325 1.227-.281.559-.621.961-1.719 2.051-.836.828-1.215 1.254-1.578 1.774-.469.68-.715 1.214-.871 1.89a7.975 7.975 0 00-.016 3.504c.02.086.028.156.024.16-.016.016-.293-.25-.426-.406-.617-.738-1.02-1.781-1.168-3.023-.047-.414-.047-1.164 0-1.426.016-.102.027-.188.027-.192-.011-.007-.277.278-.433.465a8.483 8.483 0 00-.676.98 6.772 6.772 0 00-.828 2.462c-.055.41-.055 1.66 0 2.18.254 2.257 1.078 4.12 2.492 5.609.953 1.004 2.293 1.816 3.727 2.258.14.043.265.078.277.074.012-.004-.047-.086-.133-.18-.469-.531-.84-1.101-1.062-1.617-.266-.625-.32-1.14-.184-1.688.098-.398.195-.613.52-1.125.351-.554.468-.828.52-1.21.046-.383-.028-.887-.22-1.438-.054-.16-.097-.293-.09-.297.008-.012.255.086.45.18.496.246.93.601 1.195.976.113.168.3.508.328.606.004.031.02.047.028.039a1.358 1.358 0 00-.028-.215c-.054-.293-.054-1 0-1.285.086-.461.278-.945.508-1.313.348-.55.922-1.109 1.535-1.496.192-.117.64-.343.828-.414l.118-.043-.086.2a2.612 2.612 0 00-.223 1.226c.016.324.05.48.164.695.117.235.273.418.773.907.25.246.512.515.582.597.473.563.692 1.074.774 1.828.043.418-.024.844-.195 1.254-.047.102-.09.203-.094.219-.008.02.058-.039.148-.125.528-.535.965-1.383 1.102-2.152.023-.117.043-.23.05-.25.012-.04.075.03.239.261.558.801.691 1.93.367 3.184a7.072 7.072 0 01-1.238 2.492c-.074.094-.121.168-.102.168.043 0 .477-.14.73-.234.29-.11.798-.352 1.083-.516 1.5-.867 2.648-2.234 3.215-3.812.289-.813.43-1.684.43-2.664a5.76 5.76 0 00-.052-.907c-.105-.75-.28-1.441-.656-2.539-.433-1.289-.543-1.672-.61-2.101a6.669 6.669 0 01.618-3.907c.055-.117.098-.222.094-.226-.02-.02-.528.156-.86.3-.824.344-1.691.903-2.289 1.473-.382.364-.785.918-1.066 1.473-.066.133-.117.223-.113.2.027-.095.101-.622.125-.86.03-.324.03-.945.004-1.266a7.158 7.158 0 00-1.477-3.703 11.699 11.699 0 00-1.66-1.66 10.793 10.793 0 00-3.07-1.727c-.356-.129-.43-.156-.43-.14zm0 0',\n  ICON_SVG_PATH_DATA_CENTERS: 'M13.144 8.171c-.035-.066.342-.102.409-.102.074.009-.196.452-.409.102zm-2.152-3.072l.108-.031c.064.055-.072.095-.051.136.086.155.021.248.008.332-.014.085-.104.048-.149.093-.053.066.258.075.262.085.011.033-.375.089-.304.171.096.136.824-.195.708-.176.225-.113.029-.125-.097-.19-.043-.215-.079-.547-.213-.68l.088-.102c-.206-.299-.36.362-.36.362zM24 12c0 6.627-5.373 12-12 12-6.628 0-12-5.373-12-12S5.372 0 12 0c6.627 0 12 5.373 12 12zm-8.31-5.371c-.006-.146-.19-.284-.382-.031-.135.174-.111.439-.184.557-.104.175.567.339.567.174.025-.277.732-.063.87-.025.248.069.643-.226.211-.381-.355-.13-.542-.269-.574-.523 0 0 .188-.176.106-.166-.218.027-.614.786-.614.395zM21.986 12c0-1.035-.177-2.08-.357-2.632a.611.611 0 00-.359-.378c-.256-.1-1.337.597-1.5.254-.107-.229-.324.146-.572.008-.12-.066-.454-.515-.605-.46-.309.111.474.964.688 1.076.201-.152.852-.465.992-.038.268.804-.737 1.685-1.251 2.149-.768.694-.624-.449-1.147-.852-.275-.211-.272-.66-.55-.815-.124-.07-.693-.725-.688-.813l-.017.166c-.094.071-.294-.268-.315-.321 0 .295.48.765.639 1.001.271.405.416.995.748 1.326.178.178.858.914 1.035.898.193-.017.803-.458.911-.433.644.152-1.516 3.205-1.721 3.583-.169.317.138 1.101.113 1.476-.029.433-.37.573-.693.809-.346.253-.265.745-.556.925-.517.318-.889 1.353-1.623 1.348-.216-.001-1.14.36-1.261.007-.094-.256-.22-.45-.353-.703-.13-.248-.015-.505-.173-.724-.109-.152-.475-.497-.508-.677-.002-.155.117-.626.28-.708.229-.117.044-.458.016-.656-.048-.354-.267-.646-.53-.851-.389-.299-.188-.537-.097-.964 0-.204-.124-.472-.398-.392-.564.164-.393-.44-.804-.413-.296.021-.538.209-.813.292-.346.104-.7-.082-1.042-.125-1.407-.178-1.866-1.786-1.499-2.946.037-.19-.114-.542-.048-.689.158-.352.48-.747.762-1.014.158-.15.361-.112.547-.229.287-.181.291-.553.572-.781.4-.325.946-.318 1.468-.388.278-.037 1.336-.266 1.503-.06 0 .038.191.604-.019.572.433.023 1.05.749 1.461.579.211-.088.134-.736.567-.423.262.188 1.436.272 1.68.069.15-.124.234-.93.052-1.021.116.115-.611.124-.679.098-.12-.044-.232.114-.425.025.116.055-.646-.354-.218-.667-.179.131-.346-.037-.539.107-.133.108.062.18-.128.274-.302.153-.53-.525-.644-.602-.116-.076-1.014-.706-.77-.295l.789.785c-.039.025-.207-.286-.207-.059.053-.135.02.579-.104.347-.055-.089.09-.139.006-.268 0-.085-.228-.168-.272-.226-.125-.155-.457-.497-.637-.579-.05-.023-.764.087-.824.11a1.78 1.78 0 00-.179.311 2.02 2.02 0 00-.419.214l-.157.353c-.068.061-.765.291-.769.3.029-.075-.487-.171-.453-.321.038-.165.213-.68.168-.868-.048-.197 1.074.284 1.146-.235.029-.225.046-.487-.313-.525.068.008.695-.246.799-.36.146-.168.481-.442.724-.442.284 0 .223-.413.354-.615.131.053-.07.376.087.507-.01-.103.445.057.489.033.104-.054.684-.022.594-.294-.1-.277.051-.195.181-.253-.022.009.34-.619.402-.413-.043-.212-.421.074-.553.063-.305-.024-.176-.52-.061-.665.089-.115-.243-.256-.247-.036-.006.329-.312.627-.241 1.064.108.659-.735-.159-.809-.114-.28.17-.509-.214-.364-.444.148-.235.505-.224.652-.476.104-.178.225-.385.385-.52.535-.449.683-.09 1.216-.041.521.048.176.124.104.324-.069.19.286.258.409.099a2.65 2.65 0 00.298-.494c.089-.222.901-.197.334-.536-.374-.223-2.004-.672-3.096-.672-.236 0-.401.263-.581.412-.356.295-1.268.874-1.775.698-.519-.179-1.63.66-1.808.666-.065.004.004-.634.358-.681-.153.023 1.247-.707 1.209-.859-.046-.18-2.799.822-2.676 1.023.059.092.299.092-.016.294-.18.109-.372.801-.541.801-.505.221-.537-.435-1.099.409l-.894.36a9.96 9.96 0 00-2.58 5.183c-.013.079.334.226.379.28.112.134.112.712.167.901.138.478.479.744.74 1.179.154.259.41.914.329 1.186.108-.178 1.07.815 1.246 1.022.414.487.733 1.077.061 1.559-.217.156.33 1.129.048 1.368l-.361.093c-.356.219-.195.756.021.982a9.96 9.96 0 007.22 3.087c5.517 0 9.989-4.472 9.989-9.989zM10.479 5.643c.125-.055.293-.053.311-.22.015-.148.044-.046.08-.1.035-.053-.067-.138-.11-.146-.064-.014-.108.069-.149.104l-.072.019-.068.087.008.048-.087.106c-.085.084.002.139.087.102z',\n  ICON_SVG_PATH_MEMORY: 'M15.297.168c-.078.016-.211.066-.3.113-.153.078-.517.434-7.388 7.305C2.008 13.187.371 14.84.313 14.94a1.24 1.24 0 00-.02 1.176c.059.125.445.52 3.758 3.832 3.312 3.313 3.707 3.7 3.832 3.758a1.24 1.24 0 001.176-.02c.097-.054.504-.449 1.535-1.476A86.67 86.67 0 0012 20.793c0-.016-.469-.496-1.04-1.07-1.108-1.114-1.14-1.153-1.218-1.442a1.476 1.476 0 01.012-.64c.144-.473.605-.82 1.09-.825.21-.003.37.036.566.133.145.07.246.168 1.2 1.121.578.57 1.058 1.04 1.07 1.04.027 0 1.875-1.848 1.875-1.876 0-.011-.47-.492-1.04-1.066-1.109-1.113-1.14-1.152-1.218-1.445a1.403 1.403 0 01.015-.637c.145-.473.602-.82 1.086-.824.211-.004.372.035.567.133.144.07.25.168 1.203 1.117a36.05 36.05 0 001.066 1.043c.028 0 1.875-1.848 1.875-1.875 0-.012-.468-.492-1.039-1.07-1.11-1.114-1.14-1.15-1.218-1.442a1.403 1.403 0 01.015-.637 1.18 1.18 0 011.09-.824c.207-.004.367.031.566.129.141.074.247.172 1.2 1.121.574.574 1.054 1.043 1.07 1.043.008 0 .648-.633 1.418-1.406 1.027-1.031 1.422-1.438 1.477-1.535a1.24 1.24 0 00.019-1.176c-.059-.121-.395-.469-2.832-2.918C16.977 1.043 16.281.355 16.141.28a1.503 1.503 0 00-.582-.144c-.07 0-.188.015-.262.031zm.469 6.016c.191.039.39.148.546.304.368.364.454.867.239 1.332-.063.137-.172.25-1.317 1.399-.683.687-1.289 1.281-1.34 1.316-.05.035-.16.094-.242.125-.21.078-.547.086-.761.008a1.175 1.175 0 01-.676-1.645c.047-.101.25-.32 1.293-1.363.68-.683 1.277-1.27 1.332-1.308.265-.188.578-.243.926-.168zm-5.832 5.949c.175.058.351.172.492.316.332.348.406.887.18 1.34-.083.164-2.543 2.625-2.715 2.719a1.19 1.19 0 01-.57.144 1.117 1.117 0 01-.813-.343 1.137 1.137 0 01-.215-1.36c.059-.12.227-.297 1.336-1.406 1.223-1.227 1.277-1.273 1.437-1.352.09-.043.22-.086.278-.101a1.38 1.38 0 01.59.043zm0 0',\n  ICON_SVG_PATH_MPS: 'M16 8V4l8 8-8 8v-4h-5V8h5zM9 8H7v8h2V8zM4.986 8H3v8h1.986V8zM1 8H0v8h1V8z',\n  ICON_SVG_PATH_NODES: 'M24 8H0v4h24V8zM2 11l.863-2h1.275l-.863 2H2zm2.066 0l.864-2h1.275l-.863 2H4.066zm2.067 0l.863-2h1.275l-.864 2H6.133zm2.066 0l.863-2h1.274l-.863 2H8.199zm3.341 0h-1.274l.863-2h1.275l-.864 2zM21 11a1 1 0 110-2 1 1 0 010 2zm3 3H0v4h24v-4zM2 17l.863-2h1.275l-.863 2H2zm2.066 0l.863-2h1.275l-.863 2H4.066zm2.067 0l.863-2h1.275l-.864 2H6.133zm2.066 0l.863-2h1.274l-.863 2H8.199zm3.341 0h-1.274l.863-2h1.275l-.864 2zM21 17a1 1 0 110-2 1 1 0 010 2zm3 3H0v4h24v-4zM2 23l.863-2h1.275l-.863 2H2zm2.066 0l.863-2h1.275l-.863 2H4.066zm2.067 0l.863-2h1.275l-.864 2H6.133zm2.066 0l.863-2h1.274l-.863 2H8.199zm3.341 0h-1.274l.863-2h1.275l-.864 2zM21 23a1 1 0 110-2 1 1 0 010 2zm1-17H2l4-6h12l4 6z',\n  ICON_SVG_PATH_PRICE: 'M19 16.166c0-4.289-4.465-5.483-7.887-7.091-2.079-1.079-1.816-3.658 1.162-3.832 1.652-.1 3.351.39 4.886.929l.724-3.295c-1.814-.551-3.437-.803-4.885-.841V0h-2v2.134c-3.89.535-5.968 2.975-5.968 5.7 0 4.876 5.693 5.62 7.556 6.487 2.54 1.136 2.07 3.5-.229 4.021-1.993.451-4.538-.337-6.45-1.079L5 20.551c1.787.923 3.931 1.417 6 1.453V24h2v-2.105c3.313-.464 6.005-2.293 6-5.729z',\n  ICON_SVG_PATH_SUBNETS: 'M10.26 4.171a26.138 26.138 0 00-1.581-.719C9.449 1.372 10.561 0 12 0c1.402 0 2.494 1.301 3.26 3.292-.492.211-.998.447-1.572.739C13.1 2.464 12.43 1.756 12 1.756c-.442 0-1.14.75-1.74 2.415zM12 22.244c-.429 0-1.1-.708-1.688-2.275a26.3 26.3 0 01-1.572.739C9.507 22.699 10.598 24 12 24c1.439 0 2.551-1.372 3.321-3.452a26.244 26.244 0 01-1.581-.719c-.6 1.665-1.298 2.415-1.74 2.415zm-4.708-2.216c-1.917.705-4.778 1.392-5.916-.317-.562-.845-.771-2.468 1.42-5.408a23.307 23.307 0 011.937-2.249 36.856 36.856 0 015.505-4.598C9.155 6.86 7.974 6.29 6.822 5.865c-1.18-.434-2.219-.675-3.015-.675-.508 0-.886.107-1.009.289-.131.192-.138.783.445 1.842l.21-.012c1.048 0 1.897.865 1.897 1.932s-.85 1.932-1.897 1.932-1.897-.865-1.897-1.932c0-.345.089-.669.246-.95-1.11-1.96-.881-3.139-.419-3.815C1.707 4 2.392 3.434 3.807 3.434c2.514 0 5.901 1.66 8.082 2.946 2.214-1.363 5.717-3.16 8.304-3.16 1.421 0 2.106.581 2.431 1.069.562.845.771 2.468-1.42 5.407-3.084 4.137-9.216 8.606-13.912 10.332zM19.83 8.634c1.506-2.019 1.552-3.082 1.366-3.361-.126-.189-.492-.298-1.003-.298-1.953 0-4.926 1.459-6.638 2.447a39.854 39.854 0 013.522 2.617c-.407.413-.834.819-1.271 1.211a37.84 37.84 0 00-3.9-2.811 37.847 37.847 0 00-4.603 3.551 37.087 37.087 0 003.721 2.873c-.522.331-1.05.648-1.652.98l-.013-.009a38.44 38.44 0 01-3.316-2.632c-2.818 2.878-3.612 4.964-3.239 5.525.126.189.492.298 1.003.298 2.35 0 6.08-2.017 8.287-3.464 2.709-1.776 5.799-4.328 7.736-6.927zm2.377 7.091c.141-.27.22-.577.22-.903 0-1.067-.849-1.932-1.897-1.932s-1.897.865-1.897 1.932.849 1.932 1.897 1.932l.258-.018c.553 1.024.544 1.598.415 1.787-.124.181-.501.288-1.009.288-1.602 0-3.833-.945-5.27-1.658-.48.342-1.077.748-1.659 1.119 1.926 1.037 4.758 2.295 6.929 2.295 1.415 0 2.1-.566 2.424-1.042.461-.674.69-1.85-.411-3.8z',\n  ICON_SVG_PATH_THEME_LIGHT: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88zm3.584-8.047a10.7 10.7 0 0 1 4.723-3.41l.027-.01a10.433 10.433 0 0 0-1.752 7.118 10.444 10.444 0 0 0 3.912 7.033 10.448 10.448 0 0 0 10.135 1.64c.196-.072.39-.15.583-.232A10.697 10.697 0 0 1 15.975 22 10.665 10.665 0 0 1 5.63 20.327a10.656 10.656 0 0 1-3.99-7.174A10.653 10.653 0 0 1 3.89 5.259z',\n  ICON_SVG_PATH_THEME_DARK: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88z',\n  ABOUT_PAGE_MARGIN_XS: 8,\n  ABOUT_PAGE_MARGIN_SM: 48,\n  ABOUT_PAGE_MARGIN_MD: 64,\n  ABOUT_PAGE_MARGIN_LG: 128,\n  DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP: 380,\n  DATA_CENTERS_PAGE_RIGHT_PANEL_WIDTH_MD_AND_UP: 256, // matches DRAWER_WIDTH\n  DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_SM_AND_UP: 200,\n  DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_XS: 180,\n  INFO_TABLE_ROW_HEIGHT_XS: 30,\n  INFO_TABLE_ROW_HEIGHT_SM_AND_UP: 30,\n  HOME_PAGE_MARGIN_XS: 8,\n  HOME_PAGE_MARGIN_SM_AND_UP: 32,\n  // Care must be taken if these table heights are changed, to avoid a glitch that occurs with\n  // certain heights where the row slide in has a 1px stutter following the animation.\n  TABLE_ROW_HEIGHT_XS: 38,\n  TABLE_ROW_HEIGHT_SM_AND_UP: 48,\n  MINTING_ACCOUNT_NAME: 'Minting Account',\n  ABOUT_PAGE_PROJECT_ICONS_HEIGHT: 55,\n  GOOGLE_ANALYTICS_TRACKING_ID: 'UA-138212575-1',\n  BLOCKS_CARD_POLL_INTERVAL_MS: 1000,\n  BLOCKS_CHART_POLL_INTERVAL_MS: 3000,\n  BLOCK_TIME_CARD_POLL_INTERVAL_MS: 3000,\n  CYCLES_CARD_POLL_INTERVAL_MS: 3000,\n  MESSAGES_CHART_POLL_INTERVAL_MS: 3000,\n  MESSAGES_TIME_POLL_INTERVAL_MS: 3000,\n  PRICE_POLL_INTERVAL_MS: 30000,\n  NETWORK_ERROR_THRESHOLD: 10,\n  NOMICS_API_KEY: '38f4023ce681a328edc018f7a8a28e06',\n  DFINITY_EARTH_MAP_CENTER: { lat: 37.1028 - 5, lng: -8.6730, altitude: 1.6 } // Lagos, Portugal (adjusted)\n});\n\nexport default Constants;\n","/**\n * @file globalStyle\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { createGlobalStyle } from 'styled-components';\nimport Constants from '../constants';\n\n/**\n * StyledComponent that handles global styles.\n */\nexport const GlobalStyle = createGlobalStyle`\n   body {\n    margin: 0;\n    padding: 0;\n    background: ${\n      props => props.isPageDataCenters ?\n        props.theme.colorDataCentersPageBackground : props.theme.colorBodyBackground\n    };\n   }\n`;\n\n/**\n * The styled-components ThemeProvider light theme.\n */\nexport const themeLight = {\n  // Should use constants for all!!!\n  isDark: false,\n  colorAboutBackgroundPrimary: '#FFFFFF',\n  colorAboutBackgroundSecondary: '#F8F9FA', // Google Analytics (verified), Wikipedia (verified)\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: '#FFFFFF',\n  colorAppBarBackground: '#FFFFFF',\n  colorAppBarTextButton: Constants.COLOR_LIGHT_TEXT_FADED, // (#4D4D4D)\n  colorAppBarDfinityText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyBackground: '#F8F9FA', // Wikipedia (verified)\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodySwitchTrackBackground: null, // use default\n  colorBodyText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorBodyTextDim: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_700,\n  colorDashCardBackground: '#FFFFFF',\n  colorDashCardIcon: [Constants.COLOR_DFINITY_BLUE_700, '#9440A6', '#F79308', '#DA005E'], // Ori's purple and orange\n  colorDashCardIconOpacity: 1.0,\n  colorDataCentersCardBackground: 'rgba(255, 255, 255, 0.85)',\n  colorDataCentersGlobeAtmosphere: Constants.COLOR_DFINITY_BLUE_700,\n  colorDataCentersGlobePoint: Constants.COLOR_MATERIAL_PALETTE_LIGHT_GREEN_700_LIGHT,\n  colorDataCentersPageBackground: '#F8F9FA', // Wikipedia (verified)\n  colorDataCentersTooltip: Constants.COLOR_MATERIAL_PALETTE_LIGHT_GREEN_700_LIGHT,\n  colorDrawerBackground: '#FFFFFF',\n  colorDrawerBackgroundTransparent: 'rgba(255, 255, 255, 0.85)',\n  colorDrawerDivider: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorDrawerIcon: Constants.COLOR_LIGHT_DRAWER_ICON_GOOGLE,\n  colorDrawerIconTextSelected: Constants.COLOR_DFINITY_BLUE_700,\n  colorDrawerText: Constants.COLOR_LIGHT_DRAWER_TEXT_GOOGLE,\n  colorChartBackground: '#FFFFFF',\n  colorChartTooltipBackground: 'rgba(255, 255, 255, 0.96)',\n  colorChartAxes: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartGrid: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorChartText: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_700,\n  colorChartActiveDotStroke: '#FFFFFF',\n  colorIconButtonHover: '#000000',\n  colorTableBackgroundPrimary: '#FFFFFF',\n  colorTableRowBorder: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorTableTextDim: '#909090', // YouTube, footer text dim (verified)\n  colorFooterBackground: '#F5F5F5',\n  colorFooterTextIcon: '#909090', // YouTube (verified)\n  colorPieChart: [\n    Constants.COLOR_DFINITY_BLUE_400,\n    Constants.COLOR_DFINITY_BLUE_500,\n    Constants.COLOR_DFINITY_BLUE_600,\n    Constants.COLOR_DFINITY_BLUE_700,\n    Constants.COLOR_DFINITY_BLUE_800,\n    Constants.COLOR_DFINITY_BLUE_900,\n    Constants.COLOR_DFINITY_BLUE_100,\n    Constants.COLOR_DFINITY_BLUE_200,\n    Constants.COLOR_DFINITY_BLUE_300],\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon(verified)\n  opacityActionDisabled: 0.26, // Material-UI createPalette.js theme.palette.action.disabled light theme\n  opacityActionHover: 0.08 // Material-UI createPalette.js theme.palette.action.hoverOpacity light theme\n}\n\n/**\n * The styled-components ThemeProvider dark theme.\n */\nexport const themeDark = {\n  isDark: true,\n  colorAboutBackgroundPrimary: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorAboutBackgroundSecondary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarTextButton: Constants.COLOR_DARK_TEXT_FADED,\n  colorAppBarDfinityText: Constants.COLOR_DARK_TEXT,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_LIGHT_ORANGE,\n  colorBodyBackground: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_600,\n  colorBodyButtonText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodySwitchTrackBackground: '#535353', // this is darkened t0 #333333 by Switch code\n  colorBodyText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextDim: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_600,\n  colorDashCardBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDashCardIcon: ['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF'],\n  colorDashCardIconOpacity: 0.5,\n  colorDataCentersCardBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS_ALPHA_85,\n  colorDataCentersGlobeAtmosphere: Constants.COLOR_DFINITY_BLUE_600,\n  colorDataCentersGlobePoint: Constants.COLOR_DFINITY_BLUE_600,\n  colorDataCentersPageBackground: '#000000',\n  colorDataCentersTooltip: Constants.COLOR_DFINITY_BLUE_600,\n  colorDrawerBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDrawerBackgroundTransparent: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS_ALPHA_85,\n  colorDrawerDivider: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorDrawerIcon: Constants.COLOR_DARK_TEXT_FADED,\n  colorDrawerIconTextSelected: '#FFFFFF',\n  colorDrawerText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorChartTooltipBackground: 'rgba(38, 38, 38, 0.96)',\n  colorChartAxes: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorChartGrid: Constants.COLOR_DARK_DRAWER_DIVIDER_MAC_OS,\n  colorChartText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_600,\n  colorChartActiveDotStroke: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorIconButtonHover: Constants.COLOR_DARK_TEXT,\n  colorTableBackgroundPrimary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorTableRowBorder: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorTableTextDim: '#717171', // YouTube (Dark), footer text dim (verified)\n  colorFooterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorFooterTextIcon: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorPieChart: [\n    Constants.COLOR_DFINITY_BLUE_800,\n    Constants.COLOR_DFINITY_BLUE_700,\n    Constants.COLOR_DFINITY_BLUE_600,\n    Constants.COLOR_DFINITY_BLUE_500,\n    Constants.COLOR_DFINITY_BLUE_400,\n    Constants.COLOR_DFINITY_BLUE_300,\n    Constants.COLOR_DFINITY_BLUE_200,\n    Constants.COLOR_DFINITY_BLUE_100,\n    Constants.COLOR_DFINITY_BLUE_900\n  ],\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon (verified)\n  opacityActionDisabled: 0.3, // Material-UI createPalette.js theme.palette.action.disabled dark theme\n  opacityActionHover: 0.1 // Material-UI createPalette.js theme.palette.action.hoverOpacity dark theme\n}\n","/**\n * @file ResponsiveComponent\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { Component } from 'react';\nimport { throttle } from 'throttle-debounce';\n\n/**\n * Base class component which re-renders when the window is resized.\n */\nclass ResponsiveComponent extends Component {\n  /**\n   * Create a ResponsiveComponent object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    // Bind to make 'this' work in callbacks.\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n\n    // Throttle the calls to handleWindowResize() so that we're not constantly re-rendering.\n    this.throttledHandleWindowResize = throttle(200, true, this.handleWindowResize);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    this.forceUpdate();\n  }\n};\n\nexport default ResponsiveComponent;\n","/**\n * @file TrackablePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport ReactGA from 'react-ga';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\n\n/**\n * Base class component for a page which is trackable by react-ga.\n */\nclass TrackablePage extends ResponsiveComponent {\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Scroll to the top on every page change.\n    window.scrollTo(0, 0);\n\n    const pathName = this.props.location.pathname + this.props.location.search;\n    this.trackPage(pathName);\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    const currentPathName = prevProps.location.pathname + prevProps.location.search;\n    const nextPathName = this.props.location.pathname + this.props.location.search;\n\n    if (currentPathName !== nextPathName)\n      this.trackPage(nextPathName);\n  }\n\n  /**\n   * Track the page using react-ga.\n   * @param {String} pathName The path name of the page.\n   * @private\n   */\n  trackPage(pathName) {\n    // Track production build, but not development build.\n    if (process.env.NODE_ENV === 'production') {\n      ReactGA.set({ page: pathName });\n      ReactGA.pageview(pathName);\n    }\n  }\n}\n\nexport default TrackablePage;\n","/**\n * @file DashCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport Constants from '../../constants';\n\nconst GridNoWrap = styled(Grid)`\n  && {\n    /* Setting min-width to 0px allows the Grid to narrow past the implied width of its children. */\n    min-width: 0px;\n  }\n`;\n\nconst ImgDiv = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-top: 30px;\n    margin-bottom: 34px;\n    margin-left: 30px;\n    margin-right: 30px;\n    width: 42px;\n    height: 42px;\n  }\n`;\n\nconst ImgCard = styled.img`\n  && {\n    max-width: 42px;\n    max-height: 42px;\n  }\n`;\n\nconst SvgIconCard = styled(SvgIcon)`\n  && {\n    /* The combination of margin, padding, and font-size explicitly set the height of the card. */\n    margin: 30px;\n    font-size: 42px;\n    opacity: ${props => props.theme.colorDashCardIconOpacity};\n    color: ${props => props.theme.colorDashCardIcon[props.cardindex]};\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 300;\n    font-size: 14px;\n  }\n`;\n\nconst TypographyValue = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 200;\n    font-size: 28px;\n  }\n`;\n\n/**\n * This component displays a dashboard card.\n */\nclass DashCard extends Component { \n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * The d attribute of an SvgIcon path.\n     */\n    svgIconPath: DashCard.imageIsRequired,\n    /**\n     * The src attribute of an img element.\n     */\n    iconImageSrc: DashCard.imageIsRequired,\n    /**\n     * The title string of the card.\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * The value string or element of the card.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element\n    ]).isRequired\n  };\n\n  /**\n   * Validate that either svgIconPath or iconImageSrc is defined.\n   * @param {Object} props The props of the component.\n   * @returns {Error} Error if neither svgIconPath nor iconImageSrc is defined.\n   */\n  static imageIsRequired(props) {\n    if (!props.svgIconPath && !props.iconImageSrc)\n      return new Error('Either svgIconPath or iconImageSrc is required.');\n\n    if (props.svgIconPath && typeof props.svgIconPath !== 'string')\n      return new Error('Invalid prop svgIconPath. Expected string.');\n\n    if (props.iconImageSrc && typeof props.iconImageSrc !== 'string')\n      return new Error('Invalid prop iconImageSrc. Expected string.');\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let {\n      cardIndex,\n      className,\n      svgIconPath,\n      iconImageSrc,\n      title,\n      value\n    } = this.props;\n\n    return (\n      <Paper className={className} elevation={1}>\n        <Grid container direction='row' justify='flex-start' alignItems='center' wrap='nowrap'>\n          <Grid item>\n            {(typeof svgIconPath === 'string') ?\n              <SvgIconCard cardindex={cardIndex}>\n                <path d={svgIconPath} />\n              </SvgIconCard> :\n              <ImgDiv>\n                <ImgCard\n                  src={iconImageSrc}\n                  alt='ICP logo'\n                />\n              </ImgDiv>\n            }\n          </Grid>\n          <GridNoWrap container direction='column' justify='center' alignItems='flex-start'>\n            {/* The usage of Grid elements here is required to get Typography noWrap to work. */}\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyTitle className={className} noWrap>\n                  {title}\n                </TypographyTitle>\n              </GridNoWrap>\n            </Grid>\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyValue className={className} noWrap>\n                  {value}\n                </TypographyValue>\n              </GridNoWrap>\n            </Grid>\n          </GridNoWrap>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default DashCard;\n","/**\n * @file BlocksCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport CountUp from 'react-countup';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current block height retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class BlocksCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlocksCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blockHeight: -1,\n      prevBlockHeight: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block height using intervals.\n    this.pollForBlockHeight();\n    this.interval = setInterval(\n      () => { this.pollForBlockHeight() },\n      Constants.BLOCKS_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blockHeight, error, prevBlockHeight } = this.state;\n    \n    let blockHeightText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      blockHeightText = 'Network error';\n    else if (blockHeight === -1)\n      blockHeightText = 'Loading...';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Blocks'\n        value={blockHeightText ?\n          blockHeightText :\n          <CountUp\n            duration={(Constants.BLOCKS_CARD_POLL_INTERVAL_MS + 100) / 1000}\n            start={prevBlockHeight}\n            end={blockHeight}\n            useEasing={false}\n            formattingFn={value => value.toLocaleString()}\n          />\n        }\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK}\n      />\n    );\n  }\n\n  /**\n   * Update the block height.\n   * @private\n   */\n  pollForBlockHeight() {\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/block`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.block.length === 1 && res.data.block[0].length === 2) {\n          let { blockHeight } = this.state;\n          const newBlockHeight = parseInt(res.data.block[0][1]);\n          if (newBlockHeight > blockHeight) {\n            this.setState(prevState => ({\n              prevBlockHeight:\n                prevState.prevBlockHeight !== -1 ? prevState.blockHeight : newBlockHeight,\n              blockHeight: newBlockHeight,\n              error: 0\n            }));  \n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default BlocksCard;\n","/**\n * @file BlockTimeCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with seconds per block retrieved from\n * dashboard.internetcomputer.org/api.\n */\nclass BlockTimeCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlockTimeCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocksPerSecond: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block time using intervals.\n    this.pollForBlockTime();\n    this.interval = setInterval(\n      () => { this.pollForBlockTime() },\n      Constants.BLOCK_TIME_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blocksPerSecond, error } = this.state;\n    \n    let blockTimeText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      blockTimeText = 'Network error';\n    else if (blocksPerSecond === -1)\n      blockTimeText = 'Loading...';\n    else\n      blockTimeText = blocksPerSecond.toFixed(1) + ' bps';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Block Rate'\n        value={blockTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK_TIME}\n      />\n    );\n  }\n\n  /**\n   * Update the block time.\n   * @private\n   */\n  pollForBlockTime() {\n    const url = `https://ic-api.internetcomputer.org/api/metrics/block-rate`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.block_rate.length === 1 && res.data.block_rate[0].length === 2) {\n          const blocksPerSecond = parseFloat(res.data.block_rate[0][1]);\n          this.setState({\n            blocksPerSecond: blocksPerSecond,\n            error: 0\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default BlockTimeCard;\n","/**\n * @file MessagesCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with messages per second retrieved from\n * ic-api.internetcomputer.org.\n */\nclass MessagesCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a MessagesCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesPerSecond: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the messages time using intervals.\n    this.pollForMessagesTime();\n    this.interval = setInterval(\n      () => { this.pollForMessagesTime() },\n      Constants.MESSAGES_TIME_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { messagesPerSecond, error } = this.state;\n    \n    let messagesTimeText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      messagesTimeText = 'Network error';\n    else if (messagesPerSecond === -1)\n      messagesTimeText = 'Loading...';\n    else\n      messagesTimeText = messagesPerSecond.toFixed(1) + ' mps';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Avg Messages'\n        value={messagesTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_MPS}\n      />\n    );\n  }\n\n  /**\n   * Update the messages time.\n   * @private\n   */\n  pollForMessagesTime() {\n    const url =\n      'https://ic-api.internetcomputer.org/api/metrics/message-execution-rate';\n    axios.get(url)\n      .then(res => {\n        if (res.data.message_execution_rate.length === 1 && res.data.message_execution_rate[0].length >= 2) {\n          const messagesPerSecond = parseFloat(res.data.message_execution_rate[0][1]);\n          this.setState({\n            messagesPerSecond: messagesPerSecond,\n            error: 0\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default MessagesCard;\n","export default __webpack_public_path__ + \"static/media/icpLogo.8fe881f2.svg\";","/**\n * @file PriceCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\nimport icpLogo from '../../media/images/icpLogo.svg';\n\n/**\n * This component displays a dashboard card with price data retrieved from api.nomics.com.\n */\nclass PriceCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a PriceCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      price: 0,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the price using intervals.\n    this.pollForPrice();\n    this.interval = setInterval(\n      () => { this.pollForPrice() },\n      Constants.PRICE_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { price, error } = this.state;\n    \n    let priceText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      priceText = 'Network error';\n    else if (price === 0)\n      priceText = 'Loading...';\n    else\n      priceText = '$' + price.toFixed(2);\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Price - ICP'\n        value={priceText}\n        iconImageSrc={icpLogo}\n      />\n    );\n  }\n\n  /**\n   * Update the price.\n   * @private\n   */\n  pollForPrice() {\n    const url =\n      `https://api.nomics.com/v1/currencies/ticker?key=${Constants.NOMICS_API_KEY}&ids=ICP&interval=1d`;\n    axios.get(url)\n      .then(res => {\n        const price = parseFloat(res.data[0].price);\n        this.setState({\n          price: price,\n          error: 0\n        });\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n\n  /**\n   * Return a string for the date in RFC 3339 (URI escaped) format.\n   * @param {Object} date The date to create the string for.\n   * @return {String} A string for the date in RFC 3339 (URI escaped) format.\n   * @private\n   */\n  dateToRfc3339(date) { // Duplicated function, move to utils!!!\n    // Use toISOString(), removing the fraction of seconds (i.e, after decimal point).\n    const isoNoFraction = date.toISOString().split('.')[0] + 'Z'\n\n    // Escape all ':' characters.\n    return isoNoFraction.replace(/:/g, '%3A');\n  }\n}\n\nexport default PriceCard;\n","/**\n * @file breakpoint\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport Constants from '../constants';\n\nexport const Breakpoints = Object.freeze({\n  XS: 0,\n  SM: 1,\n  MD: 2,\n  LG: 3,\n  XL: 4\n});\n\n/**\n * Return the current breakpoint.\n * @param {Boolean} isDesktopDrawerOpen True if the desktop drawer (large screens) is open and\n *  caller wants the breakpoint to be calculated based on the non-drawer width of the window.\n * @return {Number} The current breakpoint.\n * @private\n */\nexport function getBreakpoint(isDesktopDrawerOpen) {\n  const drawerWidth =  isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0;\n  if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_XS + drawerWidth) + 'px)').matches)\n    return Breakpoints.XS;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_SM + drawerWidth) + 'px)').matches)\n    return Breakpoints.SM;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_MD  + drawerWidth) + 'px)').matches)\n    return Breakpoints.MD;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_LG + drawerWidth) + 'px)').matches)\n    return Breakpoints.LG;\n  else\n    return Breakpoints.XL;\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointGreaterOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XL + 'px)').matches;\n  }\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the smallest \"desktop\"\n * breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the smallest\n * \"desktop\" breakpoint.\n * @private\n */\nexport function isBreakpointDesktop() {\n  return isBreakpointGreaterOrEqualTo(Breakpoints.MD);\n}\n\n/**\n * Return true if the current breakpoint is less than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is less than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointLessOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XL + 'px)').matches;\n  }\n}\n","/**\n * @file BarChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Bar,\n  BarChart as RechartsBarChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledBarChart = styled(RechartsBarChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements a bar chart component.\n */\nclass BarChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledBarChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{\n                  fill: 'transparent',\n                  stroke: theme.colorChartGrid\n                }}\n                animationDuration={300}\n              />\n              <Bar\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                animationDuration={this.getAnimationDuration()}\n              />\n            </StyledBarChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('BarChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('BarChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('BarChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('BarChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('BarChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('BarChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('BarChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('BarChart.getGetTooltipY() not implemented.');\n  }\n\n  /**\n   * Return The duration of the chart animation.\n   * @param {Any} value The value of the data.\n   * @protected\n   */\n   getAnimationDuration() {\n    return 1000;\n  }\n}\n\nexport default BarChart;\n","/**\n * @file BlocksChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\n// 2weeks!!!import roundDownDateToDay from '../../utils/roundDownDateToDay';\n\n/**\n * This component displays a number of blocks chart with data retrieved from\n * ic-api.internetcomputer.org.\n */\nclass BlocksChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a BlocksChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocksData: [],\n      prevDate: null,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the blocks data using intervals.\n    this.pollForInitialBlocks();\n    this.interval = setInterval(\n      () => { this.pollForMoreBlocks() },\n      Constants.BLOCKS_CHART_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  /*2weeks!!!componentDidMount() {\n    // Get a two weeks of daily data. Note that there is currently a bug in\n    // dashboard.dfinity.network where the last entry returned for this query is one day ago, not\n    // now.\n    const endDate = roundDownDateToDay(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 15);\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      //New API!!!`https://ic-api.internetcomputer.org/api/metrics/block?start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}&ic=${Constants.IC_RELEASE}`;\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values; // new API: res.data.block!!!\n        // Use values[0] to get the starting block height.\n        let prevHeight = Math.floor(values[0][1]);\n        const blocksData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const height = Math.floor(value[1]);\n          const numBlocks = Math.max(height - prevHeight, 0);\n          prevHeight = height;\n          return {date: date.getTime(), numBlocks: numBlocks};\n        });\n        this.setState({\n          blocksData: blocksData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }*/\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Blocks';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { blocksData } = this.state;\n    return blocksData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numBlocks';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    //2weeks!!!return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n    return new Date(value).toLocaleTimeString();\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    //2weeks!!!return new Date(value).toLocaleString('default', { timeZone: 'UTC' });\n    return new Date(value).toLocaleTimeString();\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Blocks: ${value.toLocaleString()}`;\n  }\n\n  /**\n   * Return The duration of the chart animation.\n   * @param {Any} value The value of the data.\n   * @protected\n   */\n  getAnimationDuration() {\n    return 0;\n  }\n\n  /**\n   * Poll for the initial blocks.\n   * @private\n   */\n  pollForInitialBlocks() {\n    let endDate = new Date();\n    endDate = new Date(endDate.getTime() - 1 * 60000); // 1 minute ago to avoid API time discrepancy\n    const startDate = new Date(endDate.getTime() - 2 * 60000); // 2 minutes ago\n    const seconds = Constants.BLOCKS_CHART_POLL_INTERVAL_MS / 1000;\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/block?start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${seconds}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.block;\n        // Use values[0] to get the starting block height.\n        let prevHeight = Math.floor(values[0][1]);\n        const blocksData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const height = Math.floor(value[1]);\n          const numBlocks = Math.max(height - prevHeight, 0);\n          prevHeight = height;\n          return {date: date.getTime(), numBlocks: numBlocks};\n        });\n        this.setState({\n          blocksData: blocksData,\n          prevDate: endDate,\n          error: false\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Poll for more blocks.\n   * @private\n   */\n  pollForMoreBlocks() {\n    const { prevDate } = this.state;\n    let endDate = new Date();\n    endDate = new Date(endDate.getTime() - 1 * 60000); // 1 minute ago to avoid API time discrepancy\n    const startDate = prevDate;\n    const seconds = 1;\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/block?start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${seconds}`;\n    // The startDate/endDate interval and resulting bar can be a minute or longer when window is out of focus!!!\n    // Chart time labels are correct, but this is still a problem!!! \n    // Could we possibly chop the long interval bar into interval-second chunks?!!!\n    axios.get(url)\n      .then(res => {\n        const values = res.data.block;\n        if (values.length >= 0) {\n          const prevHeight = Math.floor(values[0][1]);\n          const curHeight = Math.floor(values[values.length - 1][1]);\n          const date = new Date(values[values.length - 1][0] * 1000);\n          const numBlocks = Math.max(curHeight - prevHeight, 0);\n          const blocks = {date: date.getTime(), numBlocks: numBlocks};\n          this.setState(prevState => ({\n            blocksData: prevState.blocksData.slice(1).concat(blocks),\n            prevDate: endDate,\n            error: false\n          }));  \n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(BlocksChart);\n","/**\n * @file CanistersChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToDay from '../../utils/roundDownDateToDay';\n\n/**\n * This component displays a number of canisters chart with data retrieved from\n * ic-api.internetcomputer.org.\n */\nclass CanistersChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a CanistersChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      canistersData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a one week of daily data.\n    const endDate = roundDownDateToDay(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 7);\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/registered-canisters?start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        //let values = res.data.data.result[0].values;\n        let values = res.data.running_canisters;\n        // Use values[0] to get the starting number of canisters.\n        let prevTotal = Math.floor(values[0][1]);\n        const canistersData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numCanisters = Math.max(total - prevTotal, 0);\n          prevTotal = total;\n          return {date: date.getTime(), numCanisters: numCanisters};\n        });\n        this.setState({\n          canistersData: canistersData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Canisters';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { canistersData } = this.state;\n    return canistersData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numCanisters';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Canisters: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(CanistersChart);\n","/**\n * @file roundDownDateToDay\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Round down the specified Date object to the nearest day.\n * @param {Data} date The Date object to round down.\n * @return {Date} The rounded down Date object.\n * @protected\n*/\nexport default function roundDownDateToDay(date) {\n  const millisecondsInDay = 24 * 60 * 60 * 1000;\n  return new Date(Math.floor(date.getTime() / millisecondsInDay) * millisecondsInDay);\n}\n\n","/**\n * @file MessagesChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToHour from '../../utils/roundDownDateToHour';\n\n/**\n * This component displays a number of messages chart with data retrieved from\n * ic-api.internetcomputer.org.\n */\nclass MessagesChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a MessagesChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesData: [],\n      prevDate: null,\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  /*fastchart!!!componentDidMount() {    \n    // Update the messages data using intervals.\n    this.pollForInitialMessages();\n    this.interval = setInterval(\n      () => { this.pollForMoreMessages() },\n      Constants.MESSAGES_CHART_POLL_INTERVAL_MS);\n  }*/\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  /*fastchart!!!componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }*/\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get 24 hours of hourly data. Daily data does not currently work, because\n    // dashboard.dfinity.network returns glitchy data for some days within past week.\n    const endDate = roundDownDateToHour(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 1);\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/messages-count?&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.messages_count;\n\n        // Use values[0] to get the starting number of messages.\n        let prevTotal = Math.floor(values[0][1]);\n        const messagesData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numMessages = Math.max(total - prevTotal, 0);\n          prevTotal = total;\n          return {date: date.getTime(), numMessages: numMessages};\n        });\n        this.setState({\n          messagesData: messagesData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Messages';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { messagesData } = this.state;\n    return messagesData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numMessages';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: 'numeric', minute: '2-digit' });\n    //fastchart!!!return new Date(value).toLocaleTimeString();\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n    //fastchart!!!return new Date(value).toLocaleTimeString();\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Messages: ${value.toLocaleString()}`;\n  }\n  /**\n   * Return The duration of the chart animation.\n   * @param {Any} value The value of the data.\n   * @protected\n   */\n  /*fastchart!!!getAnimationDuration() {\n    return 0;\n  }*/\n\n  /**\n   * Poll for the initial messages.\n   * @private\n   */\n  /*fastchart!!!pollForInitialMessages() {\n    let endDate = new Date();\n    endDate = new Date(endDate.getTime() - 1 * 60000); // 1 minute ago to avoid API time discrepancy\n    const startDate = new Date(endDate.getTime() - 2 * 60000); // 2 minutes ago\n    const seconds = Constants.MESSAGES_CHART_POLL_INTERVAL_MS / 1000;\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/messages-count?&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${seconds}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.messages_count;\n        // Use values[0] to get the starting number of messages.\n        let prevHeight = Math.floor(values[0][1]);\n        const messagesData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const height = Math.floor(value[1]);\n          const numMessages = Math.max(height - prevHeight, 0);\n          prevHeight = height;\n          return {date: date.getTime(), numMessages: numMessages};\n        });\n        this.setState({\n          messagesData: messagesData,\n          prevDate: endDate\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }*/\n\n  /**\n   * Poll for more messages.\n   * @private\n   */\n  /*fastchart!!!pollForMoreMessages() {\n    const { prevDate } = this.state;\n    let endDate = new Date();\n    endDate = new Date(endDate.getTime() - 1 * 60000); // 1 minute ago to avoid API time discrepancy\n    const startDate = prevDate;\n    const seconds = 1;\n    const url =\n      `https://ic-api.internetcomputer.org/api/metrics/messages-count?&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${seconds}`;\n    axios.get(url)\n      .then(res => {\n        const values = res.data.messages_count;\n        if (values.length >= 0) {\n          const prevHeight = Math.floor(values[0][1]);\n          const curHeight = Math.floor(values[values.length - 1][1]);\n          const date = new Date(values[values.length - 1][0] * 1000);\n          const numMessages = Math.max(curHeight - prevHeight, 0);\n          const messages = {date: date.getTime(), numMessages: numMessages};\n          this.setState(prevState => ({\n            messagesData: prevState.messagesData.slice(1).concat(messages),\n            prevDate: endDate\n          }));  \n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }*/\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(MessagesChart);\n","/**\n * @file roundDownDateToHour\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Round down the specified Date object to the nearest hour.\n * @param {Data} date The Date object to round down.\n * @return {Date} The rounded down Date object.\n * @protected\n*/\nexport default function roundDownDateToHour(date) {\n  const millisecondsInHour = 60 * 60 * 1000;\n  return new Date(Math.floor(date.getTime() / millisecondsInHour) * millisecondsInHour);\n}\n\n","/**\n * @file AreaChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Area,\n  AreaChart as RechartsAreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledAreaChart = styled(RechartsAreaChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements an area chart component.\n */\nclass AreaChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledAreaChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                domain={[\n                  dataMin => this.getDomainMinY(dataMin),\n                  dataMax => this.getDomainMaxY(dataMax)\n                ]}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{ stroke: theme.colorChartGrid }}\n                animationDuration={300}\n              />\n              <Area\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                activeDot={{ stroke: theme.colorChartActiveDotStroke, r: 5 }}\n                animationDuration={1000}\n              />\n            </StyledAreaChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('AreaChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('AreaChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('AreaChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('AreaChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    throw new Error('AreaChart.getDomainMinY() not implemented.');\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    throw new Error('AreaChart.getDomainMaxY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('AreaChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('AreaChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('AreaChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('AreaChart.getGetTooltipY() not implemented.');\n  }\n}\n\nexport default AreaChart;\n","/**\n * @file PriceChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n \n/**\n * This component displays a chart of Candle objects with data retrieved from api.nomics.com.\n */\nclass PriceChart extends AreaChart {\n\n  static propTypes = {\n    /**\n    * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n    */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n    * The height of the chart (not including the title).\n    */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n    * The styled-components theme.\n    */\n    theme: PropTypes.object.isRequired\n  };\n   \n  /**\n  * Create a PriceChart object.\n  * @constructor\n  */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      priceData: [],\n      error: false\n    };\n  }\n   \n  /**\n  * Invoked by React immediately after a component is mounted (inserted into the tree). \n  * @public\n  */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 14);\n    const url =\n      `https://api.nomics.com/v1/candles?key=${Constants.NOMICS_API_KEY}&interval=1h&currency=ICP&start=${this.dateToRfc3339(startDate)}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.length > 0) {\n          const priceData = res.data.map((candle) => {\n            const date = new Date(candle.timestamp);\n            const price = parseFloat(candle.close);\n            return {date: date.getTime(), price: price};\n          });\n          this.setState({\n            priceData: priceData\n          });\n        }\n        else\n          console.log(\"Exchange data not found.\");\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n \n  /**\n  * Return the title of the chart.\n  * @return {String} The title of the chart.\n  * @protected\n  */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Price - ICP';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n \n  /**\n  * Return an array of objects that describe the chart data.\n  * @return {Array} An array of objects that describe the chart data.\n  * @protected\n  */\n  getData() {\n    const { priceData } = this.state;\n    return priceData;\n  }\n \n  /**\n  * Return the key of the data to be displayed in the x-axis.\n  * @return {String} The key of the data to be displayed in the x-axis.\n  * @protected\n  */\n  getDataKeyX() {\n    return 'date';\n  }\n \n  /**\n  * Return the key of the data to be displayed in the y-axis.\n  * @return {String} The key of the data to be displayed in the y-axis.\n  * @protected\n  */\n  getDataKeyY() {\n    return 'price';\n  }\n \n  /**\n  * Return the minimum value of the domain for the Y-axis.\n  * @param {dataMin} value The minumum value of the data.\n  * @return {String} The minimum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin);\n  }\n\n  /**\n  * Return the maximum value of the domain for the Y-axis.\n  * @param {dataMax} value The maximum value of the data.\n  * @return {String} The maximum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax);\n  }\n \n  /**\n  * Return a string for the x-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tick label.\n  * @protected\n  */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default');\n  }\n\n  /**\n  * Return a string for the y-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tick label.\n  * @protected\n  */\n  getGetTickY(value) {\n    return `$${value.toFixed(2)}`;\n  }\n \n  /**\n  * Return a string for the x-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipX(value) {\n    // Display date/time with no seconds.\n    return new Date(value).toLocaleString(\n      'default',\n      {year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute:'2-digit'});\n  }\n\n  /**\n  * Return a string for the y-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipY(value) {\n    return `ICP: $${value.toFixed(2)}`;\n  }\n\n  /**\n   * Return a string for the date in RFC 3339 (URI escaped) format.\n   * @param {Object} date The date to create the string for.\n   * @return {String} A string for the date in RFC 3339 (URI escaped) format.\n   * @private\n   */\n  dateToRfc3339(date) {\n    // Use toISOString(), removing the fraction of seconds (i.e, after decimal point).\n    const isoNoFraction = date.toISOString().split('.')[0] + 'Z'\n\n    // Escape all ':' characters.\n    return isoNoFraction.replace(/:/g, '%3A');\n  }\n}\n \n // Use the withTheme HOC so that we can use the current theme outside styled components.\n export default withTheme(PriceChart);\n","/**\n * @file HomePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper, // Disclaimer!!!\n  Typography // Disclaimer!!!\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport Fade from 'react-reveal/Fade';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport BlocksCard from '../BlocksCard/BlocksCard';\nimport BlockTimeCard from '../BlockTimeCard/BlockTimeCard';\n//import CyclesCard from '../CyclesCard/CyclesCard';\nimport MessagesCard from '../MessagesCard/MessagesCard';\nimport PriceCard from '../PriceCard/PriceCard';\nimport BlocksChart from '../BlocksChart/BlocksChart';\nimport CanistersChart from '../CanistersChart/CanistersChart';\nimport MessagesChart from '../MessagesChart/MessagesChart';\nimport PriceChart from '../PriceChart/PriceChart';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport { Fragment } from \"react\";\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst GridSectionCharts2 = styled(GridSection)`\n  && {\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n  }\n`;\n\nconst GridCard = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(25% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP*3/4 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.MD || breakpoint === Breakpoints.SM) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridChart = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst CardBlocks = styled(BlocksCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardBlockTime = styled(BlockTimeCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n/*const CardCycles = styled(CyclesCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;*/\n\nconst CardMessages = styled(MessagesCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardPrice = styled(PriceCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n// Disclaimer!!!\nconst StyledPaper = styled(Paper)`\n  && {\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 8px;\n    padding-right: 8px;\n    margin-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.XS && `\n        margin-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `)\n    }\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n// Disclaimer!!!\nconst TypographyTitle = styled(Typography)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 300;\n    font-size: 14px;\n  }\n`;\n\n/**\n * Component for the home page.\n */\nclass HomePage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {/*!!!{this.getSectionDisclaimer()}*/}\n        {this.getSectionCards()}\n        {this.getSectionCharts()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the Disclaimer section based on the current breakpoint.\n   * @return {Object} The elements for the Disclaimer section based on the current breakpoint.\n   * @private\n   */\n  getSectionDisclaimer()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='center'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <StyledPaper elevation={1} breakpoint={breakpoint}>\n          <TypographyTitle>\n            {'Site Under Development'}\n          </TypographyTitle>\n        </StyledPaper>\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return the elements for the Cards section based on the current breakpoint.\n   * @return {Object} The elements for the Cards section based on the current breakpoint.\n   * @private\n   */\n  getSectionCards()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='space-between'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            timeout={500}\n          >\n            <CardBlocks cardIndex={0} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={50}\n            timeout={500}\n          >\n            <CardBlockTime cardIndex={1} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={100}\n            timeout={500}\n          >\n            <CardMessages cardIndex={2} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={150}\n            timeout={500}\n          >\n            <CardPrice cardIndex={3} />\n          </Fade>\n        </GridCard>\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return the elements for the Charts section based on the current breakpoint.\n   * @return {Object} The elements for the Charts section based on the current breakpoint.\n   * @private\n   */\n  getSectionCharts()\n  {\n    const { breakpoint } = this.props;\n\n    const chartHeight = 352;\n    return (\n      <Fragment>\n        <GridSection container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <BlocksChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <PriceChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSection>\n        <GridSectionCharts2 container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <CanistersChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <MessagesChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSectionCharts2>\n      </Fragment>\n    );\n  }\n}\n\nexport default HomePage;\n","/**\n * @file PieChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Cell,\n  PieChart as RechartsPieChart,\n  Pie,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    padding-top: 8px;\n    text-align: center;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_2};\n    font-weight: 500;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledPieChart = styled(RechartsPieChart)`\n  && {\n    margin-top: -10px;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements a pie chart component.\n */\nclass PieChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, className, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <Paper className={className} elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledPieChart\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <Pie\n                data={data}\n                dataKey='value'\n              >\n                {data.map(entry => (\n                  <Cell\n                    key={entry.mapKey}\n                    fill={entry.fill}\n                    // fillOpacity is currently hardcoded, but we can make this configurable in the\n                    // future if needed.\n                    fillOpacity={theme.isDark ? 0.7 : 0.85}\n                    stroke={theme.colorChartGrid}\n                  />\n                ))}\n              </Pie>\n              <Tooltip\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{\n                  fill: 'transparent',\n                  stroke: theme.colorChartGrid\n                }}\n              />\n            </StyledPieChart>\n          </ResponsiveContainer>\n        }\n      </Paper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('PieChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data, where each object contains:\n   *  fill: Fill color for the cell.\n   *  mapKey: A unique key that identifies the cell.\n   *  name: String containing the name of the cell.\n   *  value: String containing the value of the cell.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('PieChart.getData() not implemented.');\n  }\n}\n\nexport default PieChart;\n","/**\n * @file getLocationsByCountry\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport axios from 'axios';\n\n/**\n * Get a map of country names to location objects, with locations retrieved from\n * dashboard.internetcomputer.org/api.\n * @return {Map} A map of country names to location objects.\n */\nexport default async function getLocationsByCountry() {\n  // Future enhancement: Get the country name by latitude/longitude using an API such as:\n  // http://geodb-cities-api.wirefreethought.com/docs/api/find-near-location\n  const cityToCountryMap = new Map();\n  cityToCountryMap.set('Antwerp', 'Belgium');\n  cityToCountryMap.set('Atlanta', 'USA');\n  cityToCountryMap.set('Atlanta 2', 'USA');\n  cityToCountryMap.set('Allentown', 'USA');\n  cityToCountryMap.set('Vancouver', 'Canada');\n  cityToCountryMap.set('Brussels', 'Belgium');\n  cityToCountryMap.set('Brussels 2', 'Belgium');\n  cityToCountryMap.set('Bucharest', 'Romania');\n  cityToCountryMap.set('Chicago', 'USA');\n  cityToCountryMap.set('Chicago 2', 'USA');\n  cityToCountryMap.set('Chicago 3', 'USA');\n  cityToCountryMap.set('Zurich', 'Switzerland');\n  cityToCountryMap.set('Dallas', 'USA');\n  cityToCountryMap.set('Fremont', 'USA');\n  cityToCountryMap.set('Geneva', 'Switzerland');\n  cityToCountryMap.set('Geneva 2', 'Switzerland');\n  cityToCountryMap.set('Houston', 'USA');\n  cityToCountryMap.set('Jacksonville', 'USA');\n  cityToCountryMap.set('Las Vegas', 'USA');\n  cityToCountryMap.set('Munich', 'Germany');\n  cityToCountryMap.set('New York', 'USA');\n  cityToCountryMap.set('Orlando', 'USA');\n  cityToCountryMap.set('Phoenix', 'USA');\n  cityToCountryMap.set('Portland', 'USA');\n  cityToCountryMap.set('Singapore', 'Singapore');\n  cityToCountryMap.set('Singapore 2', 'Singapore');\n  cityToCountryMap.set('Singapore 3', 'Singapore');\n  cityToCountryMap.set('San Jose', 'USA');\n  cityToCountryMap.set('Sterling', 'USA');\n  cityToCountryMap.set('Toronto', 'Canada');\n  cityToCountryMap.set('Toronto 2', 'Canada');\n  cityToCountryMap.set('Tampa', 'USA');\n  cityToCountryMap.set('Zurich 2', 'Switzerland');\n  cityToCountryMap.set('Zurich 3', 'Switzerland');\n  cityToCountryMap.set('Zurich 4', 'Switzerland');\n\n  try {\n    const url = `https://ic-api.internetcomputer.org/api/locations`;\n    const res = await axios.get(url);\n\n    // Create an array of data center locations.\n    let locations = res.data.map((value) => {\n      // Remove any number from end of location name (e.g., \"Chicago 2\" -> \"Chicago\").\n      const city = value.name.replace(/[\\d\\' ']+$/, '');\n      return {\n        city: city,\n        numNodes: parseInt(value.total_nodes)\n      };\n    });\n\n    // Remove data center locations without any nodes.\n    locations = locations.filter((location) => {\n      return location.numNodes > 0;\n    });\n\n    // Organize the locations by country.\n    const locationsByCountryMap = new Map();\n    locations.forEach(location => {\n      let country = cityToCountryMap.get(location.city);\n      if (typeof country === 'undefined')\n        country = 'Other'; // if we get this, we need to add this city to cityToCountryMap\n\n      let locationsByCountry = locationsByCountryMap.get(country);\n      if (typeof locationsByCountry === 'undefined') {\n        locationsByCountry = [];\n        locationsByCountryMap.set(country, locationsByCountry);\n      }\n      locationsByCountry.push(location);\n    });\n\n    return locationsByCountryMap;\n  }\n  catch {\n    return null;\n  }\n}\n","/**\n * @file CountriesChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport PieChart from '../PieChart/PieChart';\nimport getLocationsByCountry from '../../utils/getLocationsByCountry';\n\n/**\n * This component displays a pie chart showing the number of data centers per country.\n */\nclass CountriesChart extends PieChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a CountriesChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      locationsByCountryMap: null,\n      error: 0\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    this.getLocationsByCountry();\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Data Centers By Country';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data, where each object contains:\n   *  fill: Fill color for the cell.\n   *  mapKey: A unique key that identifies the cell.\n   *  name: String containing the name of the cell.\n   *  value: Number The numeric value of the cell.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { locationsByCountryMap } = this.state;\n    const { theme } = this.props;\n\n    if (locationsByCountryMap !== null) {\n      // TODO: Decide on a max number of cells, with the leftovers falling into an \"Other\" category!!!\n      const data = Array.from(locationsByCountryMap, ([country, locations]) => {\n        const numDataCenters = locations.length;\n        return {\n          fill: null,\n          mapKey: country,\n          name: country,\n          value: numDataCenters\n        };\n      });\n\n      // Sort by descending number of nodes.\n      data.sort((x, y) => (y.value - x.value));\n\n      // Set the colors on the sorted array.\n      data.forEach((entry, index) => {\n        entry.fill = theme.colorPieChart[index % theme.colorPieChart.length];\n      });  \n\n      return data;\n    }\n    else\n      return [];\n  }\n\n  /**\n   * Set the chart data[] array based on the locations organized by country name.\n   * @private\n   */\n  getLocationsByCountry() {\n    getLocationsByCountry()\n      .then(res => {\n        this.setState({\n          locationsByCountryMap: res,\n          error: 0\n        });\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }        \n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(CountriesChart);\n","/**\n * @file InfoCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledSwitch = styled(Switch)`\n  && {\n    // Shrink margins vertically to fit in table cell.\n    margin-top: -5px;\n    margin-bottom: -5px;\n    // Thumb unchecked\n    & .MuiSwitch-colorPrimary {\n      color: ${props => props.theme.colorBodyButtonText};\n    }\n    // Thumb checked\n    & .MuiSwitch-colorPrimary.Mui-checked {\n      color: ${props => props.theme.colorBodyButtonBackground};\n    }\n    // Track unchecked\n    & .MuiSwitch-colorPrimary + .MuiSwitch-track {\n      background: ${props => props.theme.colorBodySwitchTrackBackground};\n    }\n    // Track checked\n    & .MuiSwitch-colorPrimary.Mui-checked + .MuiSwitch-track {\n      background: ${props => props.theme.colorBodyButtonBackground};\n    }\n  }\n`;\n\nconst StyledTable = styled(Table)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n  }\n`;\n\nconst StyledTableCell = styled(TableCell)`\n  && {\n    border-top-style: ${props => props.showborders ? 'solid' : null};\n    border-top-width: ${props => props.showborders ? props.showborders + 'px' : null};\n    border-color: ${props => props.showborders ? props.theme.colorTableRowBorder : 'transparent'};\n    color: ${props => props.isaltcolor === 'true' ?\n      props.theme.colorBodyTextLink : props.theme.colorBodyText};\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_2};\n    white-space: nowrap;\n    ${({ breakpoint, usesmallfontforxs }) =>\n      ((breakpoint === Breakpoints.XS && usesmallfontforxs) && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n      `)\n    }\n  }\n`;\n\nconst StyledTableRow = styled(TableRow)`\n  && {\n    height: ${Constants.INFO_TABLE_ROW_HEIGHT_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: ${Constants.INFO_TABLE_ROW_HEIGHT_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst TableRowFooter = styled(StyledTableRow)`\n  && {\n    border-top-color: ${props => props.theme.colorTableRowBorder};\n    border-top-style: solid;\n    border-top-width: 2px;\n    height: ${Constants.INFO_TABLE_ROW_HEIGHT_SM_AND_UP / 2 + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: ${Constants.INFO_TABLE_ROW_HEIGHT_XS / 2 + 'px'};\n      `\n    }\n  }\n`;\n\nconst TableCellHeader = styled(StyledTableCell)`\n  && {\n    border-bottom-style: solid;\n    border-bottom-width: 1px;\n    border-color: ${props => props.theme.colorTableRowBorder};\n    color: ${props => props.isaltcolor === 'true' ?\n      props.theme.colorBodyTextLink : props.theme.colorBodyTextDim};\n    font-weight: 500;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 4px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n  }\n`;\n\n/**\n * This component displays a static table of information.\n */\nclass InfoTable extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * Return an array of objects that describe the body rows, where each object contains:\n     *  mapKey: A unique key that identifies the row.\n     *  cells: An array of objects that describe the cells of the row, where each object contains:\n     *    value: String containing the value of the cell, or undefined if switch is defined.\n     *    isAltColor: Use the alternate color for the text of the cell.\n     *    isRightAligned: True to right align the table cell content.\n     *    switch: Optional object that describes a switch to place in the cell, where each object\n     *    contains:\n     *      isChecked: If true, the switch is checked.\n     *      name: The name of the switch, included in the onChange() callback.\n     *      onChange: Callback fired when the state is changed. Function signature:\n     *        function(event: object) => void\n     *          event.target.name (String): The name of the switch.\n     *          event.target.checked (Boolean): The new checked state.\n     * @return {Array} An array of objects that describe the body rows.\n     */\n    getBodyRows: PropTypes.func.isRequired,\n    /**\n     * Optional array of objects that describe the cells of a header row, where each object\n     * contains:\n     *  value: String containing the value of the cell.\n     *  isAltColor: Use the alternate color for the text of the cell.\n     *  isRightAligned: True to right align the table cell content.\n     */\n    headerRow: PropTypes.array,\n    /**\n     * Optionally specifies to show table footer.\n     */\n    showFooter: PropTypes.bool,\n    /**\n     * Optionally specifies to show row borders.\n     */\n    showRowBorders: PropTypes.bool,\n    /**\n     * Optionally specifies to use a small for for the XS breakpoint.\n     */\n    useSmallFontForXS: PropTypes.bool,\n    /**\n     * The optional title of the table.\n     */\n    title: PropTypes.string\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { className, title } = this.props;\n    return (\n      <Paper className={className} elevation={1}>\n        {\n          (typeof title !== 'undefined') &&\n            <TypographyTitle>{title}</TypographyTitle>\n        }\n        <StyledTable>\n          <TableHead>\n            {this.getHeaderRowElement()}\n          </TableHead>\n          <TableBody>\n            {this.getBodyRowElements()}\n          </TableBody>\n          <TableFooter>\n            {this.getFooterRowElement()}\n          </TableFooter>\n        </StyledTable>\n      </Paper>\n    );\n  }\n\n  /**\n   * Return the optional element for the header row.\n   * @return {Object} The element for the header row.\n   * @private\n   */\n  getHeaderRowElement() {\n    const { breakpoint, headerRow, useSmallFontForXS } = this.props;\n    if (typeof headerRow !== 'undefined') {\n      return (\n        <StyledTableRow breakpoint={breakpoint}>\n          {headerRow.map((cell, index) => {\n            return (\n              // Using index as the key is fine here and for cells in other rows, since we never add,\n              // remove, reorder, or filter items in the cell arrays.\n              <TableCellHeader\n                isaltcolor={cell.isAltColor ? 'true' : 'false'}\n                usesmallfontforxs={useSmallFontForXS}\n                breakpoint={breakpoint}\n                key={index}\n                align={cell.isRightAligned ? 'right' : 'inherit'}\n                padding='checkbox'\n                size='small'\n              >\n                {cell.value}\n              </TableCellHeader>\n            );\n          })}\n        </StyledTableRow>\n      );\n    }\n    else\n      return null;\n  }\n\n  /**\n   * Return the elements for all of the body rows.\n   * @return {Object} The elements for all of the body rows.\n   * @private\n   */\n  getBodyRowElements() {\n    const { getBodyRows } = this.props;\n    let rows = getBodyRows();\n    return rows.map((bodyRow, index) => {\n      return this.getBodyRowElement(bodyRow, index);\n    });\n  }\n\n  /**\n   * Return the element for the specified body row.\n   * @param {Object} bodyRow Object that describes the body row.\n   * @param {Number} rowIndex The index of the body row.\n   * @return {Object} The element for the specified body row.\n   * @private\n   */\n  getBodyRowElement(bodyRow, rowIndex) {\n    const { breakpoint, showRowBorders, useSmallFontForXS } = this.props;\n    return (\n      <StyledTableRow breakpoint={breakpoint} key={bodyRow.mapKey}>\n        {bodyRow.cells.map((cell, index) => {\n          return (\n            <StyledTableCell\n              isaltcolor={cell.isAltColor ? 'true' : 'false'}\n              usesmallfontforxs={useSmallFontForXS}\n              breakpoint={breakpoint}\n              key={index}\n              align={cell.isRightAligned ? 'right' : 'inherit'}\n              padding='checkbox'\n              size='small'\n              showborders={showRowBorders ? (rowIndex ? 1 : 2) : 0}\n            >\n              {\n                typeof cell.switch !== 'undefined' ?                               \n                  <div>\n                    <StyledSwitch\n                      checked={cell.switch.isChecked}\n                      color='primary'\n                      edge={cell.isRightAligned ? 'end' : 'start'}\n                      name={cell.switch.name}\n                      onChange={cell.switch.onChange}\n                    />\n                  </div> :\n                  cell.value\n              }\n            </StyledTableCell>\n          );\n        })}\n      </StyledTableRow>\n    );\n  }\n\n  /**\n   * Return the element for the footer row.\n   * @return {Object} The element for the footer row.\n   * @private\n   */\n  getFooterRowElement() {\n    const { breakpoint, showFooter } = this.props;\n    return (\n      showFooter === true && <TableRowFooter breakpoint={breakpoint} />\n    );\n  }\n}\n\nexport default InfoTable;\n","/**\n * @file CountriesTable\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport InfoTable from '../InfoTable/InfoTable';\nimport Constants from '../../constants';\nimport getLocationsByCountry from '../../utils/getLocationsByCountry';\n\n/**\n * This component displays a sorted table of countries by number of data centers, with data\n * retrieved from dashboard.internetcomputer.org/api.\n */\n class CountriesTable extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a CountriesTable object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.getBodyRows = this.getBodyRows.bind(this);\n\n    this.state = {\n      locationsByCountryMap: null,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {   \n    this.getLocationsByCountry();\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, className } = this.props;\n    \n    return (\n      <InfoTable\n        breakpoint={breakpoint}\n        className={className}\n        headerRow={[\n          {value: 'Country', isAltColor: true, isRightAligned: false},\n          {value: 'DCs', isAltColor: false, isRightAligned: true},\n          {value: 'Nodes', isAltColor: false, isRightAligned: true}\n        ]}\n        getBodyRows={this.getBodyRows}\n      />\n    );\n  }\n\n  /**\n   * Return an array of objects that describe the body rows, where each object contains:\n   *  mapKey: A unique key that identifies the row.\n   *  cells: An array of objects that describe the cells of the row, where each object contains:\n   *    value: String containing the value of the cell.\n   *    isAltColor: Use the alternate color for the text of the cell.\n   *    isRightAligned: True to right align the table cell content.\n   * @return {Array} An array of objects that describe the body rows.\n   * @protected\n   */\n  getBodyRows() {\n    const { error, locationsByCountryMap } = this.state;\n\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD) {\n      return [{\n        mapKey: 0,\n        cells: [{value: 'Network error', isAltColor: false, isRightAligned: false}]\n      }];\n    }\n    else if (locationsByCountryMap === null || locationsByCountryMap.size === 0) {\n      return [{\n        mapKey: 0,\n        cells: [{value: 'Loading...', isAltColor: false, isRightAligned: false}]\n      }];\n    }\n    else {\n      let bodyRows = Array.from(locationsByCountryMap, ([country, locations]) => {\n        const numDataCenters = locations.length;\n        const numNodes = locations.map(location => location.numNodes).reduce((accumulator, currentValue) => accumulator + currentValue);\n        return {\n          mapKey: country,\n          cells: [\n            {value: country, isAltColor: true, isRightAligned: false},\n            {value: numDataCenters.toLocaleString(), isAltColor: false, isRightAligned: true},\n            {value: numNodes.toLocaleString(), isAltColor: false, isRightAligned: true}\n          ]\n        };\n      });\n\n      // Sort by descending number of nodes.\n      bodyRows.sort((x, y) => (y.cells[2].value - x.cells[2].value));\n\n      return bodyRows;\n    }\n  }\n\n  /**\n   * Get the locations organized by country name.\n   * @private\n   */\n  getLocationsByCountry() {\n    getLocationsByCountry()\n      .then(res => {\n        this.setState({\n          locationsByCountryMap: res,\n          error: 0\n        });\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default CountriesTable;\n","/**\n * @file DataCentersTable\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport InfoTable from '../InfoTable/InfoTable';\nimport Constants from '../../constants';\n\n/**\n * This component displays a table with data centers info retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class DataCentersTable extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * Callback fired when the value of the Simulation switch changes.\n     */    \n    handleSimulationSwitchChange: PropTypes.func.isRequired,\n    /**\n     * True if the simulation switch is checked, otherwise false.\n     */    \n    isSimulationOn: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Create a DataCentersTable object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.getBodyRows = this.getBodyRows.bind(this);\n\n    this.state = {\n      memoryTotal: {count: -1, error: 0},\n      numberOfBoundaryNodes: {count: -1, error: 0},\n      numberOfCpuCores: {count: -1, error: 0},\n      numberOfDataCenters: {count: -1, error: 0},\n      numberOfNodes: {count: -1, error: 0},\n      numberOfNodeProviders: {count: -1, error: 0},\n      numberOfSubnets: {count: -1, error: 0}\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    this.getNumberOfDataCenters();\n    this.getNumberOfNodeProviders();\n    this.getNumberOfSubnets();\n    this.getNumberOfNodes();\n    this.getNumberOfBoundaryNodes();\n    this.getNumberOfCpuCores();\n    this.getMemoryTotal();\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, className } = this.props;\n    \n    return (\n      <InfoTable\n        breakpoint={breakpoint}\n        className={className}\n        getBodyRows={this.getBodyRows}\n      />\n    );\n  }\n\n  /**\n   * Return an array of objects that describe the body rows, where each object contains:\n   *  mapKey: A unique key that identifies the row.\n   *  cells: An array of objects that describe the cells of the row, where each object contains:\n   *    value: String containing the value of the cell.\n   *    isAltColor: Use the alternate color for the text of the cell.\n   *    isRightAligned: True to right align the table cell content.\n   * @return {Array} An array of objects that describe the body rows.\n   * @protected\n   */\n  getBodyRows() {\n    const {\n      numberOfBoundaryNodes,\n      numberOfCpuCores,\n      numberOfDataCenters,\n      numberOfNodes,\n      numberOfNodeProviders,\n      numberOfSubnets\n    } = this.state;\n\n    return [\n      {\n        mapKey: 0,\n        cells: this.getRowCells(numberOfDataCenters, 'Data Centers')\n      },\n      {\n        mapKey: 1,\n        cells: this.getRowCells(numberOfNodeProviders, 'Node Providers')\n      },\n      {\n        mapKey: 2,\n        cells: this.getRowCells(numberOfSubnets, 'Subnets')\n      },\n      {\n        mapKey: 3,\n        cells: this.getRowCells(numberOfNodes, 'Active Nodes')\n      },\n      {\n        mapKey: 4,\n        cells: this.getRowCells(numberOfBoundaryNodes, 'Boundary Nodes')\n      },\n      {\n        mapKey: 5,\n        cells: this.getRowCells(numberOfCpuCores, 'CPU Cores')\n      },\n      {\n        mapKey: 6,\n        cells: this.getRowCellsMemoryTotal()\n      },\n      {\n        mapKey: 7,\n        cells: this.getRowCellsAvgNodes()\n      },\n      {\n        mapKey: 8,\n        cells: this.getRowCellsAvgCores()\n      },\n      {\n        mapKey: 9,\n        cells: this.getRowCellsAvgMemory()\n      },\n      {\n        mapKey: 10,\n        cells: this.getRowCellsSimulationSwitch()\n      }\n    ];\n  }\n\n  /**\n   * Get the memory total.\n   * @private\n   */\n  getMemoryTotal() {\n    const url = `https://ic-api.internetcomputer.org/api/metrics/ic-memory-total`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_memory_total.length === 1 && res.data.ic_memory_total[0].length === 2) {\n          const memoryTotal = {\n            count: parseInt(res.data.ic_memory_total[0][1]),\n            error: 0\n          };\n          this.setState({\n            memoryTotal: memoryTotal\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(({ memoryTotal }) => ({\n          memoryTotal: {\n            ...memoryTotal,\n            error: memoryTotal.error + 1\n          }\n        }));\n      });\n  }\n\n  /**\n   * Get the number of nodes.\n   * @private\n   */\n  getNumberOfBoundaryNodes() {\n    const url = `https://ic-api.internetcomputer.org/api/metrics/boundary-nodes-count`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.boundary_nodes_count.length === 2) {\n          const numberOfBoundaryNodes = {\n            count: parseInt(res.data.boundary_nodes_count[1]),\n            error: 0\n          };\n          this.setState({\n            numberOfBoundaryNodes: numberOfBoundaryNodes\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(({ numberOfBoundaryNodes }) => ({\n          numberOfBoundaryNodes: {\n            ...numberOfBoundaryNodes,\n            error: numberOfBoundaryNodes.error + 1\n          }\n        }));\n      });\n  }\n\n  /**\n   * Get the number of CPU cores.\n   * @private\n   */\n  getNumberOfCpuCores() {\n    const url = `https://ic-api.internetcomputer.org/api/metrics/ic-cpu-cores`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_cpu_cores.length === 1 && res.data.ic_cpu_cores[0].length === 2) {\n          const numberOfCpuCores = {\n            count: parseInt(res.data.ic_cpu_cores[0][1]),\n            error: 0\n          };\n          this.setState({\n            numberOfCpuCores: numberOfCpuCores\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(({ numberOfCpuCores }) => ({\n          numberOfCpuCores: {\n            ...numberOfCpuCores,\n            error: numberOfCpuCores.error + 1\n          }\n        }));\n      });\n  }\n\n  /**\n   * Get the number of data centers.\n   * @private\n   */\n  getNumberOfDataCenters() {\n    const url = `https://ic-api.internetcomputer.org/api/locations`;\n    axios.get(url)\n      .then(res => {\n        // Create an array of data center locations.\n        let locations = res.data.map((value) => {\n          return {\n            numNodes: parseInt(value.total_nodes)\n          };\n        });\n\n        // Remove data center locations without any nodes.\n        locations = locations.filter((location) => {\n          return location.numNodes > 0;\n        });\n\n        const numberOfDataCenters = {\n          count: locations.length,\n          error: 0\n        };\n        this.setState({\n          numberOfDataCenters: numberOfDataCenters\n        });\n    })\n    .catch(() => {\n      this.setState(({ numberOfDataCenters }) => ({\n        numberOfDataCenters: {\n          ...numberOfDataCenters,\n          error: numberOfDataCenters.error + 1\n        }\n      }));\n    });\n  }\n\n  /**\n   * Get the number of nodes.\n   * @private\n   */\n  getNumberOfNodes() {\n    const url = `https://ic-api.internetcomputer.org/api/metrics/ic-nodes-count`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_nodes_count.length === 1 && res.data.ic_nodes_count[0].length === 2) {\n          const numberOfNodes = {\n            count: parseInt(res.data.ic_nodes_count[0][1]),\n            error: 0\n          };\n          this.setState({\n            numberOfNodes: numberOfNodes\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(({ numberOfNodes }) => ({\n          numberOfNodes: {\n            ...numberOfNodes,\n            error: numberOfNodes.error + 1\n          }\n        }));\n      });\n  }\n\n  /**\n   * Get the number of node providers.\n   * @private\n   */\n   getNumberOfNodeProviders() {\n    const url = `https://ic-api.internetcomputer.org/api/node-providers/count`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.node_providers.length === 1) {\n          const numberOfNodeProviders = {\n            count: parseInt(res.data.node_providers[0].node_providers),\n            error: 0\n          };\n          this.setState({\n            numberOfNodeProviders: numberOfNodeProviders\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(({ numberOfNodeProviders }) => ({\n          numberOfNodeProviders: {\n            ...numberOfNodeProviders,\n            error: numberOfNodeProviders.error + 1\n          }\n        }));\n      });\n  }\n\n  /**\n   * Get the number of subnets.\n   * @private\n   */\n  getNumberOfSubnets() {\n    const url = `https://ic-api.internetcomputer.org/api/metrics/ic-subnet-total`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_subnet_total.length === 2) {\n          const numberOfSubnets = {\n            count: parseInt(res.data.ic_subnet_total[1]),\n            error: 0\n          };\n          this.setState({\n            numberOfSubnets: numberOfSubnets\n          });\n        }\n      })\n      .catch(() => {\n        this.setState(({ numberOfSubnets }) => ({\n          numberOfSubnets: {\n            ...numberOfSubnets,\n            error: numberOfSubnets.error + 1\n          }\n        }));\n      });\n  }\n  \n  /**\n   * Return the table cells for the specfied \"numberOf\" row.\n   * @param {Object} numberOf The \"numberOf\" object.\n   * @param {String} description The description text of the \"numberOf\" object.\n   * @return {Array} the table cells for the specfied \"numberOf\" row.\n   * @private\n   */\n  getRowCells(numberOf, description) {\n    let countText;\n    if (numberOf.error >= Constants.NETWORK_ERROR_THRESHOLD)\n      countText = 'Network error';\n    else if (numberOf.count === -1)\n      countText = 'Loading...';\n    else\n      countText = numberOf.count.toLocaleString();\n\n    return [\n      {value: description, isAltColor: true, isRightAligned: false},\n      {value: countText, isAltColor: false, isRightAligned: true}\n    ];\n  }\n\n  /**\n   * Return the table cells for the average cores per node row.\n   * @return {Array} the table cells for the average cores per node row.\n   * @private\n   */\n  getRowCellsAvgCores() {\n    const { numberOfCpuCores, numberOfNodes } = this.state;\n\n    let avgCoresText;\n    if (numberOfCpuCores.error >= Constants.NETWORK_ERROR_THRESHOLD ||\n      numberOfNodes.error >= Constants.NETWORK_ERROR_THRESHOLD)\n      avgCoresText = 'Network error';\n    else if (numberOfCpuCores.count === -1 || numberOfNodes.count === -1)\n      avgCoresText = 'Loading...';\n    else {\n      const avgCores = numberOfCpuCores.count / numberOfNodes.count;                                    \n      avgCoresText = Math.round(avgCores).toLocaleString();\n    }\n\n    return [\n      {value: 'Avg Node Cores', isAltColor: true, isRightAligned: false},\n      {value: avgCoresText, isAltColor: false, isRightAligned: true}\n    ];\n  }\n\n  /**\n   * Return the table cells for the average memory per node row.\n   * @return {Array} the table cells for the average memory per node row.\n   * @private\n   */\n  getRowCellsAvgMemory() {\n    const { memoryTotal, numberOfNodes } = this.state;\n\n    let avgMemoryText;\n    if (memoryTotal.error >= Constants.NETWORK_ERROR_THRESHOLD ||\n      numberOfNodes.error >= Constants.NETWORK_ERROR_THRESHOLD)\n      avgMemoryText = 'Network error';\n    else if (memoryTotal.count === -1 || numberOfNodes.count === -1)\n      avgMemoryText = 'Loading...';\n    else {\n      const avgMemoryTb = memoryTotal.count / numberOfNodes.count / 1000000000000;                                    \n      avgMemoryText = avgMemoryTb.toFixed(2) + 'TB';\n    }\n\n    return [\n      {value: 'Avg Node Memory', isAltColor: true, isRightAligned: false},\n      {value: avgMemoryText, isAltColor: false, isRightAligned: true}\n    ];\n  }\n\n  /**\n   * Return the table cells for the average nodes per data center row.\n   * @return {Array} the table cells for the average nodes per data center row.\n   * @private\n   */\n  getRowCellsAvgNodes() {\n    const { numberOfDataCenters, numberOfNodes } = this.state;\n\n    let avgNodesText;\n    if (numberOfDataCenters.error >= Constants.NETWORK_ERROR_THRESHOLD ||\n      numberOfNodes.error >= Constants.NETWORK_ERROR_THRESHOLD)\n      avgNodesText = 'Network error';\n    else if (numberOfDataCenters.count === -1 || numberOfNodes.count === -1)\n      avgNodesText = 'Loading...';\n    else {\n      const avgNodes = numberOfNodes.count / numberOfDataCenters.count;                                    \n      const avgNodesPercent = numberOfDataCenters.count / numberOfNodes.count * 100;                                    \n      avgNodesText =\n        Math.round(avgNodes).toLocaleString() + ' (' + avgNodesPercent.toFixed(1) + '%)';\n    }\n\n    return [\n      {value: 'Avg DC Nodes', isAltColor: true, isRightAligned: false},\n      {value: avgNodesText, isAltColor: false, isRightAligned: true}\n    ];\n  }\n\n  /**\n   * Return the table cells for the memoryTotal row.\n   * @return {Array} the table cells for the memoryTotal row.\n   * @private\n   */\n  getRowCellsMemoryTotal() {\n    const { memoryTotal } = this.state;\n\n    let memoryTotalText;\n    if (memoryTotal.error >= Constants.NETWORK_ERROR_THRESHOLD)\n      memoryTotalText = 'Network error';\n    else if (memoryTotal.count === -1)\n      memoryTotalText = 'Loading...';\n    else {\n      const memoryTotalPb = memoryTotal.count / 1000000000000000;                                    \n      memoryTotalText = memoryTotalPb.toFixed(3) + 'PB';\n    }\n\n    return [\n      {value: 'Memory', isAltColor: true, isRightAligned: false},\n      {value: memoryTotalText, isAltColor: false, isRightAligned: true}\n    ];\n  }\n\n  /**\n   * Return the table cells for the simulation switch row.\n   * @return {Array} the table cells for the simulation switch row.\n   * @private\n   */\n  getRowCellsSimulationSwitch() {\n    const { handleSimulationSwitchChange, isSimulationOn } = this.props;\n    return [\n      {value: 'Simulation', isAltColor: true, isRightAligned: false},\n      {\n        isAltColor: false,\n        isRightAligned: true,\n        switch: {\n          isChecked: isSimulationOn,\n          name: 'simulation',\n          onChange: handleSimulationSwitchChange\n        }\n      }\n    ];\n  }\n}\n\nexport default DataCentersTable;\n","/**\n * @file EarthTooltipTable\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport InfoTable from '../InfoTable/InfoTable';\n\n/**\n * This component displays a table of data centers for a city, intended for use with the\n * EarthTooltip component.\n */\n class EarthTooltipTable extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The city, with object members:\n     *  name (String): The name of the city.\n     *  lat (Number): The latitude of the city.\n     *  lng (Number): The longitude of the city.\n     *  dataCenters: Array of data centers objects, with object members:\n     *    name (String): The name of the data center (a.k.a., node operator).\n     *    numNodes (Number): The number of nodes in the data center.\n    */\n    city: PropTypes.object.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create an EarthTooltipTable object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.getBodyRows = this.getBodyRows.bind(this);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, city, className } = this.props;\n    \n    return (\n      <InfoTable\n        breakpoint={breakpoint}\n        className={className}\n        headerRow={[\n          {value: 'Data Center', isAltColor: true, isRightAligned: false},\n          {value: 'Nodes', isAltColor: false, isRightAligned: true}\n        ]}\n        getBodyRows={this.getBodyRows}\n        useSmallFontForXS={true}\n        title={city.name}\n      />\n    );\n  }\n\n  /**\n   * Return an array of objects that describe the body rows, where each object contains:\n   *  mapKey: A unique key that identifies the row.\n   *  cells: An array of objects that describe the cells of the row, where each object contains:\n   *    value: String containing the value of the cell.\n   *    isAltColor: Use the alternate color for the text of the cell.\n   *    isRightAligned: True to right align the table cell content.\n   * @return {Array} An array of objects that describe the body rows.\n   * @protected\n   */\n  getBodyRows() {\n    const { city } = this.props;\n    let bodyRows = city.dataCenters.map((dataCenter, index) => {\n      return {\n        mapKey: index,\n        cells: [\n          {value: dataCenter.name, isAltColor: true, isRightAligned: false},\n          {value: dataCenter.numNodes.toLocaleString(), isAltColor: false, isRightAligned: true}\n        ]\n      };\n    });\n\n    // Sort by descending number of nodes.\n    bodyRows.sort((x, y) => (y.cells[1].value - x.cells[1].value));\n\n    return bodyRows;\n  }\n}\n\nexport default EarthTooltipTable;\n","/**\n * @file EarthTooltip\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { withTheme } from 'styled-components';\nimport { Circle, Layer, Line, Stage } from 'react-konva';\nimport EarthTooltipTable from '../EarthTooltipTable/EarthTooltipTable';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst KonvaDiv = styled.div`\n  && {\n    position: absolute;\n    pointer-events: none;\n    z-index: 1;\n  }\n`;\n\nconst TableDiv = styled.div`\n  && {\n    width: ${Constants.DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_SM_AND_UP + 'px'};\n    position: absolute;\n    pointer-events: none;\n    z-index: 1;\n    left: ${props => props.x + 'px'};\n    top: ${props => props.y + 'px'};\n    // Add drawer width offset for SM breakpoint with the desktop drawer open, since props.x starts\n    // from 0 at the drawer edge for this case. There are likely more elegant ways of accounting for\n    // this.\n    ${({ breakpoint, isDesktopDrawerOpen, x }) =>\n      ((breakpoint === Breakpoints.SM && isDesktopDrawerOpen) && `\n        left: ${x + Constants.DRAWER_WIDTH + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        width: ${Constants.DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_XS + 'px'};\n      `)\n    }\n  }\n`;\n\nconst TableEarthTooltip = styled(EarthTooltipTable)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n  }\n`;\n\n/**\n * This component displays a tooltip for the DfinityEarth component.\n */\nclass EarthTooltip extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The tooltip city, or null for tooltip undefined, not visible. With object members:\n     *  name (String): The name of the city.\n     *  lat (Number): The latitude of the city.\n     *  lng (Number): The longitude of the city.\n     *  dataCenters: Array of data centers objects, with object members:\n     *    name (String): The name of the data center (a.k.a., node operator).\n     *    numNodes (Number): The number of nodes in the data center.\n    */\n    city: PropTypes.object,\n    /**\n     * The height of the component using the tooltip.\n     */\n    height: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open. Optional, applies only to\n     * dfinityexplorer.org.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired,\n    /**\n     * The width of the component using the tooltip.\n     */\n    width: PropTypes.number.isRequired,\n    /**\n     * The x position of the tooltip.\n     */    \n    x: PropTypes.number.isRequired,\n    /**\n     * The y position of the tooltip.\n     */\n    y: PropTypes.number.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, city, height, isDesktopDrawerOpen, theme, width, x, y } = this.props;\n\n    const tooltipCardWidth = breakpoint === Breakpoints.XS ?\n      Constants.DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_XS :\n      Constants.DATA_CENTERS_PAGE_TOOLTIP_CARD_WIDTH_SM_AND_UP;\n    const cityCircleARadius = 12;\n    const cityCircleBRadius = cityCircleARadius * 2;\n    const lineXYlength = 35;\n\n    // If tooltip is to left, negate x coordinates.\n    const xCoordMult = x < width / 2 ? 1 : -1;\n\n    return (\n      city != null &&\n        <Fragment>\n          <KonvaDiv>\n            <Stage width={width} height={height}>\n              <Layer>\n                <Circle\n                  x={x}\n                  y={y}\n                  width={cityCircleARadius}\n                  height={cityCircleARadius}\n                  fill={theme.colorDataCentersTooltip}\n                  stroke={theme.colorDataCentersTooltip}\n                />\n                <Circle\n                  x={x}\n                  y={y}\n                  width={cityCircleBRadius}\n                  height={cityCircleBRadius}\n                  stroke={theme.colorDataCentersTooltip}\n                />\n                <Line\n                  x={x}\n                  y={y}\n                  lineCap='round'\n                  lineJoin='round'\n                  points={[\n                    0,\n                    0,\n                    xCoordMult * lineXYlength,\n                    -lineXYlength,\n                    xCoordMult * (tooltipCardWidth + lineXYlength - 1),\n                    -lineXYlength\n                  ]}\n                  stroke={theme.colorDataCentersTooltip}\n                />\n              </Layer>\n            </Stage>\n          </KonvaDiv>\n          <TableDiv\n            breakpoint={breakpoint}\n            isDesktopDrawerOpen={isDesktopDrawerOpen}\n            x={\n              xCoordMult === 1 ?\n                x + lineXYlength :\n                x + xCoordMult * lineXYlength - tooltipCardWidth\n            }\n            // Not sure why XS adjustment is necessary.\n            y={y + 30 - (breakpoint === Breakpoints.XS ? 8 : 0)}\n          >\n            <TableEarthTooltip breakpoint={breakpoint} city={city} />\n          </TableDiv>\n        </Fragment>\n    );\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(EarthTooltip);\n","export default __webpack_public_path__ + \"static/media/dfinity-earth-day.6ac0770c.jpg\";","export default __webpack_public_path__ + \"static/media/dfinity-earth-night.37b200bd.jpg\";","/**\n * @file DfinityEarth\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport Globe from 'react-globe.gl';\nimport Fade from 'react-reveal/Fade';\nimport { SizeMe } from 'react-sizeme';\nimport { throttle } from 'throttle-debounce';\nimport EarthTooltip from '../EarthTooltip/EarthTooltip';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport dfinityEarthDay from './dfinity-earth-day.jpg'\nimport dfinityEarthNight from './dfinity-earth-night.jpg'\n\n/**\n * This component is a wrapper that provides width and height props to DfinityEarth.\n */\nclass DfinityEarthWithSize extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open. Optional, applies only to\n     * dfinityexplorer.org.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool,\n    /**\n     * True if the simulation is on, otherwise false.\n     */    \n    isSimulationOn: PropTypes.bool.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, isDesktopDrawerOpen, isSimulationOn, isThemeDark, theme } = this.props;\n    \n    return (\n      <SizeMe>{({ size }) => {\n        // For breakpoints MD and up, we have a \"panel\" on the right containing cards. On smaller\n        // screen sizes, these cards go under the globe.\n        const width = (typeof size.width !== 'undefined') ? size.width : 0;\n        let height;\n        if (breakpoint === Breakpoints.XL ||\n          breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) {\n          height = (width !== 0) ?\n            width -\n              (Constants.DRAWER_WIDTH + Constants.DATA_CENTERS_PAGE_RIGHT_PANEL_WIDTH_MD_AND_UP) :\n            0;\n        }\n        else\n          height = width;\n        return (\n          <DfinityEarth\n            breakpoint={breakpoint}\n            height={height}\n            isDesktopDrawerOpen={isDesktopDrawerOpen}\n            isSimulationOn={isSimulationOn}\n            isThemeDark={isThemeDark}\n            theme={theme}\n            width={width}\n          />);\n      }}\n      </SizeMe> \n    );\n  }\n}\n\n/**\n * This component displays DFINITY Earth, a visualization of Internet Computer data centers on a 3D\n * globe, using data retrieved from dashboard.internetcomputer.org/api.\n */\nclass DfinityEarth extends Component { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the component.\n     */\n    height: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open. Optional, applies only to\n     * dfinityexplorer.org.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool,\n    /**\n     * True if the simulation is on, otherwise false.\n     */    \n    isSimulationOn: PropTypes.bool.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired,\n    /**\n     * The width of the component.\n     */\n    width: PropTypes.number.isRequired\n  };\n  \n  /**\n   * Create a DfinityEarth object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.globeEl = null;\n    this.tooltipInterval = null;\n\n    // Bind to make 'this' work in callbacks.\n    this.handleZoom = this.handleZoom.bind(this);\n\n    // Throttle the calls to handleZoom() so that we're not constantly changing the pointRadius. A\n    // delay of 400ms was chosen so that performance would not be significantly impacted (100ms\n    // leads to bad performance), but the pointRadius scaling is noticable with this delay. We could\n    // increase this delay more to improve zoom performance.\n    this.throttledHandleZoom = throttle(400, true, this.handleZoom);\n\n    this.state = {\n      cities: [],\n      subnetArcs: [],\n      zoomFactor: 1,\n      tooltipCity: null,\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    if (this.globeEl !== null) {\n      // Do not rotate the globe, since it causes onZoom to be triggered constantly, it makes\n      // tooltip selection difficult when zoomed in, and it does not add much to the user\n      // experience.\n      //this.globeEl.controls().autoRotate = true;\n      //this.globeEl.controls().autoRotateSpeed = 0.005;\n      this.globeEl.pointOfView(Constants.DFINITY_EARTH_MAP_CENTER, 0);\n\n      // Reset zoomFactor to 1, since calling globeEl.pointOfView() does not trigger a call to\n      // onZoom.\n      this.setState({\n        zoomFactor: 1\n      });\n    }\n\n    const url = `https://ic-api.internetcomputer.org/api/locations`;\n    axios.get(url)\n      .then(res => {\n        // Create an array of data center locations.\n        let locations = res.data.map((value) => {\n          // Remove any number from end of location name (e.g., \"Chicago 2\" -> \"Chicago\").\n          const city = value.name.replace(/[\\d\\' ']+$/, '');\n          // Temporary workaround for tooltip width limit for XS.\n          if (value.node_operator === 'Hurricane Electric')\n            value.node_operator = 'Hurricane Elec.';\n          return {\n            key: value.key, // not currently used\n            lat: value.latitude,\n            lng: value.longitude,\n            city: city,\n            dc: value.node_operator,\n            numNodes: parseInt(value.total_nodes)\n          };\n        });\n\n        // Remove data center locations without any nodes.\n        locations = locations.filter((location) => {\n          return location.numNodes > 0;\n        });\n\n        // Organize the locations by city name.\n        const locationsByCityMap = new Map();\n        locations.forEach((location) => {\n          let locationsByCity = locationsByCityMap.get(location.city);\n          if (typeof locationsByCity === 'undefined') {\n            locationsByCity = [];\n            locationsByCityMap.set(location.city, locationsByCity);\n          }\n          locationsByCity.push(location);\n        });\n\n        // Create an array of cities and their data centers. Consider locations within 100km of each\n        // other with the same city name to be the same city (using the lat/lng of the first\n        // location).\n        const cities = [];\n        locationsByCityMap.forEach((locationsByCity) => {\n          let citiesWithSameName = [];\n          locationsByCity.forEach((location) => {\n            // Search for existing matching city object.\n            let city = citiesWithSameName.find(city =>\n              this.calculateDistance(location.lat, location.lng, city.lat, city.lng) <= 100);\n\n            // If no matching city was found, create a new city object and add it to\n            // citiesWithSameName[].\n            if (typeof city === 'undefined') {\n              city = {\n                name: location.city,\n                lat: location.lat,\n                lng: location.lng,\n                dataCenters: []\n              };\n              citiesWithSameName.push(city);\n            }\n\n            // Add the data center to the city.\n            city.dataCenters.push({name: location.dc, numNodes: location.numNodes});\n          });\n\n          // Append citiesWithSameName[] to cities.\n          cities.push(...citiesWithSameName);\n        });\n\n        // Create a random set of unique subnets.\n        const nodesPerSubnet = 7; // use a Constants value for this!!!\n        const numberOfSubnets = 8; // consider using /api/metrics/ic-subnet-total!!!\n        const subnets = new Set();\n        let i = 0;\n        while (subnets.size !== numberOfSubnets) {\n          let nodes = Array(locations.length).fill().map((_, index) => index);\n          nodes.sort(() => Math.random() - 0.5);\n          nodes = nodes.slice(0, nodesPerSubnet);\n          nodes.sort((x, y) => (x - y));\n          subnets.add(nodes);\n          // Trivial check for infinite loop.\n          if (i++ > subnets * 10)\n            break;\n        }\n\n        // Create an array of subnet arcs, connecting all nodes within each subnet. If two nodes in\n        // a subnet have the same lat/lng (two separate data centers, but at the same lat/lng), they\n        // are not connected by an arc.\n        let subnetIndex = 0;\n        const subnetArcs = [];\n        subnets.forEach((subnet) => {\n          for (let i = 0; i < subnet.length; i++) {\n            for (let j = i + 1; j < subnet.length; j++) {\n              if (locations[subnet[i]].lat !== locations[subnet[j]].lat &&\n                locations[subnet[i]].lng !== locations[subnet[j]].lng)\n              {\n                subnetArcs.push({\n                  subnetIndex: subnetIndex,\n                  startLat: locations[subnet[i]].lat,\n                  startLng: locations[subnet[i]].lng,\n                  endLat: locations[subnet[j]].lat,\n                  endLng: locations[subnet[j]].lng,\n                  arcDashInitialGap: Math.random()\n                });\n              }\n            }\n          }\n          subnetIndex++;\n        });\n\n        this.setState({\n          cities: cities,\n          subnetArcs: subnetArcs\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Clear tooltipInterval if it was not already cleared.\n    if (this.tooltipInterval !== null) {\n      clearInterval(this.tooltipInterval);\n      this.tooltipInterval = null;\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      breakpoint,\n      height,\n      isDesktopDrawerOpen,\n      isSimulationOn,\n      isThemeDark,\n      theme,\n      width\n    } = this.props;\n    const {\n      cities,\n      subnetArcs,\n      zoomFactor\n    } = this.state;\n    let { tooltipCity } = this.state;\n\n    const arcOpacity = isThemeDark ? 0.22 : 0.3;\n    const showGlobe = cities.length > 0;\n\n    // These colors come from the DFINITY logo.\n    const purple = `rgba(99, 38, 132, ${arcOpacity})`;\n    const pink = `rgba(237, 30, 121, ${arcOpacity})`;\n    const darkOrange = `rgba(241, 90, 36, ${arcOpacity})`;\n    const lightOrange = `rgba(251, 176, 59, ${arcOpacity})`;\n    const blue = `rgba(41, 171, 226, ${arcOpacity})`;\n    let arcColorPairs = [\n      [blue, blue],\n      [purple, pink],\n      [darkOrange, lightOrange],\n      [blue, blue],\n      [pink, purple],\n      [lightOrange, darkOrange]\n    ];\n\n    // If the tooltip is active, calculate its screen coordinates.\n    let tooltipX;\n    let tooltipY;\n    if (tooltipCity !== null && this.globeEl !== null) {\n      const coords =\n        this.globeEl.getScreenCoords(tooltipCity.lat, tooltipCity.lng, tooltipCity.alt);\n      tooltipX = coords.x;\n      tooltipY = coords.y;\n    }\n    else {\n      tooltipCity = null;\n      tooltipX = 0;\n      tooltipY = 0;\n    }\n\n    // For the cities on the Globe, we use large, transparent label points for the tooltips, so that\n    // the user can hover near the city and see the tooltip. We then use smaller, colored points to\n    // mark the city locations. By doing this, the city dots can be small, but the tooltips work\n    // even if the user is hovering in the general area.\n    return (\n      <Fragment>\n        <EarthTooltip\n          breakpoint={breakpoint}\n          city={tooltipCity}\n          isDesktopDrawerOpen={isDesktopDrawerOpen}\n          width={width}\n          height={height}\n          x={tooltipX}\n          y={tooltipY}\n        />\n        <Fade\n          timeout={1000}\n          when={showGlobe}\n        >\n          <Globe\n            ref={(el) => { this.globeEl = el }}\n\n            globeImageUrl={isThemeDark ? dfinityEarthNight : dfinityEarthDay}\n            showGlobe={showGlobe}\n            showAtmosphere={isThemeDark ? showGlobe : false}\n            atmosphereColor={theme.colorDataCentersGlobeAtmosphere}\n            atmosphereAltitude={0.16}\n            onGlobeReady={() => {\n              if (this.globeEl !== null)\n                this.globeEl.controls().maxDistance = 300;\n            }}\n            animateIn={false}\n            backgroundColor='rgba(0,0,0,0)'\n            width={width}\n            height={height}\n            onZoom={this.throttledHandleZoom}\n            pointerEventsFilter={obj => {\n              // Filter out pointer events for arcs and points so that city labels receive all pointer\n              // events when within the labelDotRadius. \n              const isArc =\n                typeof obj.parent !== 'undefined' && obj.parent !== null &&\n                obj.parent.__globeObjType === 'arc';\n              const isPoint =\n                typeof obj !== 'undefined' && obj !== null && obj.__globeObjType === 'points';\n              return !isArc && !isPoint;\n            }}\n\n            arcsData={isSimulationOn ? subnetArcs : []}\n            arcStroke={0.5}\n            arcDashLength={0.4}\n            arcDashGap={1}\n            arcDashInitialGap={subnetArc => subnetArc.arcDashInitialGap}\n            arcDashAnimateTime={4000}\n            arcColor={subnetArc => arcColorPairs[subnetArc.subnetIndex % arcColorPairs.length]}\n            arcsTransitionDuration={0}\n      \n            labelsData={cities}\n            labelColor={() => `rgba(0,0,0,0)`}\n            labelText={() => ''}\n            // Unfortunately, labelDotRadius cannot be changed dynamically at this time. Ideally, we\n            // would scale it with zoomFactor as we do for pointRadius, so that the radius would\n            // become more precise when zoomed in, allowing for easier hover selection of two cities\n            // that are close together (e.g., Fremont and San Jose). As more close-together cities are\n            // added, this will become more of an issue.\n            // Tried setting labelDotRadius to 0.4 so that Fremont and San Jose could be\n            // distinguished from each other, but this setting was not large enough for touch\n            // devices, so setting this back to 1 for now.\n            labelDotRadius={1}\n            onLabelHover={city => {\n              if (city !== null) {\n                // Set tooltipCity to turn on the tooltip.\n                this.setState({\n                  tooltipCity: city\n                });\n\n                // While the tooltip is active, force the component to re-render every 250ms so that\n                // the tooltip moves smoothly along with the rotating globe. While we no longer\n                // auto-rotate the globe, it could still be moving from user interaction, so keep\n                // this in at an interval of 500ms (was 250ms).\n                if (this.tooltipInterval === null)\n                  this.tooltipInterval = setInterval(() => this.forceUpdate(), 500);\n              }\n              else {\n                // Stop forcing the component to periodically re-render.\n                if (this.tooltipInterval !== null) {\n                  clearInterval(this.tooltipInterval);\n                  this.tooltipInterval = null;\n                }\n\n                // Clear tooltipCity to turn off the tooltip.\n                this.setState({\n                  tooltipCity: null\n                });\n              }\n            }}\n\n            pointsData={cities}\n            pointLabel={''}\n            pointColor={() => theme.colorDataCentersGlobePoint}\n            pointAltitude={0.015}\n            pointRadius={0.5 * zoomFactor}\n            pointsMerge={true} // setting to false causes exceptions in three-globe.module.js\n          />\n        </Fade>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Set the zoomFactor based on the current altitude. The zoomFactor is used to scale pointRadius,\n   * so that city points appear as the same size to the user regardless of zoom. Without this\n   * scaling, the city points get very large when zoomed in.\n   * @param {Object} pov GeoCoords object containing the lat, lng, and altitude of the camera point\n   * of view.\n   * @private\n   */\n  handleZoom(pov) {\n    this.setState({\n      zoomFactor: Math.min(pov.altitude / Constants.DFINITY_EARTH_MAP_CENTER.altitude, 2)\n    });\n  }\n\n  /**\n   * Calculates the distance in km between two points using the Haversine formula. \n   * @param {Number} lat1 Latitude of the first point.\n   * @param {Number} lng1 Longitude of the first point.\n   * @param {Number} lat2 Latitude of the second point.\n   * @param {Number} lng2 Longitude of the second point.\n   * @return {Number} The distance in km between the two points.\n   * @private\n   */\n  calculateDistance(lat1, lng1, lat2, lng2) {\n    if (lat1 === lat2 && lng1 === lng2) {\n      return 0;\n    }\n    const dLat = this.deg2rad(lat2-lat1);\n    const dLon = this.deg2rad(lng2-lng1); \n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * \n      Math.sin(dLon/2) * Math.sin(dLon/2); \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n    const earthRadiusKm = 6371;\n    const distanceKm = earthRadiusKm * c;\n    return distanceKm;\n  }\n  \n  /**\n   * Converts degrees to radians. \n   * @param {Number} deg The angle in degrees.\n   * @return {Number} The angle in radians.\n   * @private\n   */\n  deg2rad(deg) {\n    return deg * Math.PI / 180;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(DfinityEarthWithSize);\n","/**\n * @file DataCentersPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Fragment } from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Grid } from '@material-ui/core';\nimport Fade from 'react-reveal/Fade';\nimport CountriesChart from '../CountriesChart/CountriesChart';\nimport CountriesTable from '../CountriesTable/CountriesTable';\nimport DataCentersTable from '../DataCentersTable/DataCentersTable';\nimport DfinityEarth from '../DfinityEarth/DfinityEarth';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst ChartCountries = styled(CountriesChart)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n  }\n`;\n\nconst GridEarth = styled.div`\n  && {\n    width: 100%;\n  }\n`;\n\nconst GridPanel = styled(Grid)`\n  && {\n    width: ${Constants.DATA_CENTERS_PAGE_RIGHT_PANEL_WIDTH_MD_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.SM) && `      \n        padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n        width: 100%;\n      `) ||\n      ((breakpoint === Breakpoints.XS) && `     \n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridPanelCard = styled(Grid)`\n  && {\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: 100%;\n      `) ||\n      ((breakpoint === Breakpoints.SM) && `      \n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.XS) && `     \n        padding-bottom: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridPanelCardFirst = styled(GridPanelCard)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        padding-top: 0px;\n      `)\n    }\n  }\n`;\n\nconst GridPanelCardLast = styled(GridPanelCard)`\n  && {\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n  }\n`;\n\nconst TableCountries = styled(CountriesTable)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n  }\n`;\n\nconst TableDataCenters = styled(DataCentersTable)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n  }\n`;\n\nconst ContainerDiv = styled.div`\n  && {\n    display: grid;\n    grid-template-columns: ${'1fr ' + Constants.DATA_CENTERS_PAGE_RIGHT_PANEL_WIDTH_MD_AND_UP + 'px'};\n    grid-template-rows: 1fr;\n  }\n`;\n\nconst GlobeDiv = styled.div`\n  && {\n    grid-column-start: 1;\n    grid-column-end: 3;\n    grid-row-start: 1;\n  }\n`;\n\nconst PanelDiv = styled.div`\n  && {\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 1;\n    z-index: 1;\n  }\n`;\n\n/**\n * Component for the data centers page.\n */\nclass DataCentersPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Create a DataCentersPage object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSimulationOn: true\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.handleSimulationSwitchChange = this.handleSimulationSwitchChange.bind(this);\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Use a special background color for this component.\n    const { handleSetIsPageDataCenters } = this.props;\n    handleSetIsPageDataCenters(true);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Remove the special background color for this component.\n    const { handleSetIsPageDataCenters } = this.props;\n    handleSetIsPageDataCenters(false);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint } = this.props;\n\n    if (breakpoint === Breakpoints.XL ||\n      breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) {\n      return (\n        <ContainerDiv>\n          <GlobeDiv>\n            { this.getGlobe() } \n          </GlobeDiv>\n          <PanelDiv>\n            { this.getPanel() }\n          </PanelDiv>  \n        </ContainerDiv>\n      );\n    }\n    else {\n      return (\n        <Fragment>\n          <GridEarth item breakpoint={breakpoint}>\n            { this.getGlobe() }\n          </GridEarth>\n          { this.getPanel() }\n        </Fragment>\n      );\n    }\n  }\n  \n  /**\n   * Return the components that make up the globe.\n   * @return The components that make up the globe.\n   * @private\n   */\n  getGlobe() {\n    const { breakpoint, isDesktopDrawerOpen, isThemeDark } = this.props;\n    const { isSimulationOn } = this.state;\n    return (\n      <DfinityEarth\n        breakpoint={breakpoint}\n        isDesktopDrawerOpen={isDesktopDrawerOpen}\n        isSimulationOn={isSimulationOn}\n        isThemeDark={isThemeDark}\n      />);\n  }\n\n  /**\n   * Return the components that make up the panel, consisting of tables and charts that appear\n   * beside or below the globe.\n   * @return The components that make up the panel.\n   * @private\n   */\n  getPanel() {\n    const { breakpoint } = this.props;\n    const { isSimulationOn } = this.state;\n    return (\n      <GridPanel container\n        direction='row'\n        justify='space-between'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <GridPanelCardFirst item breakpoint={breakpoint}>\n          <Fade\n            timeout={500}\n          >\n            <TableDataCenters\n              breakpoint={breakpoint}\n              handleSimulationSwitchChange={this.handleSimulationSwitchChange}\n              isSimulationOn={isSimulationOn}\n            />\n          </Fade>\n        </GridPanelCardFirst>\n        <GridPanelCard item breakpoint={breakpoint}>\n          <Fade\n            delay={50}\n            timeout={500}\n          >\n            <TableCountries breakpoint={breakpoint} />\n          </Fade>\n        </GridPanelCard>\n        <GridPanelCardLast item breakpoint={breakpoint}>\n          <Fade\n            delay={100}\n            timeout={500}\n          >\n            <ChartCountries\n              breakpoint={breakpoint}\n              chartHeight={Constants.DATA_CENTERS_PAGE_RIGHT_PANEL_WIDTH_MD_AND_UP}\n            />\n          </Fade>\n        </GridPanelCardLast>\n      </GridPanel>\n    );\n  }\n\n  /**\n   * Callback fired when the value of the DataCentersTable component Simulation switch changes.\n   * @param {Object} event The event source of the callback. event.target.checked is the checked\n   * value of the switch.\n   * @public\n   */\n   handleSimulationSwitchChange(event) {\n    this.setState({\n      isSimulationOn: event.target.checked\n    });\n  }\n}\n\nexport default DataCentersPage;\n","/**\n * @file RosettaApi\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport jsonBigint from 'json-bigint';\n\n// Set useNativeBigInt to true and use BigInt once BigInt is widely supported.\nconst JSONbig = jsonBigint({ strict: true });\n\n/**\n * Types of Rosetta API errors.\n */\nexport const RosettaErrorType = Object.freeze({\n  NotFound: 0,\n  Timeout: 1,\n  NetworkError: 2\n});\n\n/**\n * Describes the cause of a Rosetta API error.\n */\nexport class RosettaError extends Error {\n  /**\n   * Create a RosettaError.\n   * @param {String} message An error message describing the error.\n   * @param {Number} status number The HTTP response status.\n   */\n  constructor(message, status) {\n    super(message);\n    switch (status) {\n    case 408:\n      this.errorType = RosettaErrorType.Timeout;\n      break;\n    case 500:\n      this.errorType = RosettaErrorType.NotFound;\n      break;\n    default:\n      this.errorType = RosettaErrorType.NetworkError;\n      break;\n    }\n  }\n}\n\n/**\n * Contains information about a transaction.\n */\nexport class Transaction  {\n  /**\n   * Create a Transaction.\n   * @param {Any} rosettaTransaction The Rosetta Transaction object of the transaction.\n   * @param {Number} blockIndex The index of the block containing the transaction.\n   * milliseconds since the Unix Epoch.\n   */\n  constructor(rosettaTransaction, blockIndex) {\n    this.blockIndex = blockIndex;\n    this.hash = rosettaTransaction.transaction_identifier.hash;\n    const timestampMs = rosettaTransaction.metadata.timestamp.div(1000000).toNumber();\n    this.timestamp = new Date(timestampMs);\n    const operations = rosettaTransaction.operations;\n    if (operations.length >= 1) { \n      this.type = operations[0].type;\n      this.status = operations[0].status;\n      this.account1Address = operations[0].account.address;\n      this.amount = new BigNumber(operations[0].amount.value);\n      // Negate amount for TRANSACTION and BURN, so that they appear in the UI as positive values.\n      if ((operations[0].type === 'TRANSACTION' || operations[0].type === 'BURN') &&\n        !this.amount.isZero()) {\n        this.amount = this.amount.negated();\n      }\n    }\n    else {\n      this.type = '';\n      this.status = '';\n      this.account1Address = '';\n      this.amount = new BigNumber(0);\n    }\n    if (operations.length >= 2 && operations[1].type === 'TRANSACTION')\n      this.account2Address = operations[1].account.address;\n    else\n      this.account2Address = '';\n    if (operations.length >= 3 && operations[2].type === 'FEE')\n      this.fee = new BigNumber(-operations[2].amount.value);\n    else\n      this.fee = new BigNumber(0);\n    this.memo = new BigNumber(rosettaTransaction.metadata.memo);\n  }\n};\n\n/**\n * Manages Rosetta API calls.\n */\nexport default class RosettaApi {\n  /**\n   * Create a RosettaApi.\n   */\n  constructor() {\n    this.axios = axios.create({\n      baseURL: 'https://rosetta-api.internetcomputer.org/',\n      method: 'post',\n      transformRequest: (data) => JSONbig.stringify(data),\n      transformResponse: (data) => JSONbig.parse(data),\n      headers: { 'Content-Type': 'application/json;charset=utf-8' }\n    });\n\n    this.networkIdentifier = this.networksList().then(res =>\n      res.network_identifiers.find(\n        networkIdentifier => networkIdentifier.blockchain === 'Internet Computer'\n      )\n    );\n  }\n\n  /**\n   * Return the ICP account balance of the specified account.\n   * @param {string} accountAddress The account address to get the ICP balance of.\n   * @returns {Promise<BigNumber|RosettaError>} The ICP account balance of the specified account, or\n   * a RosettaError for error.\n   */\n  async getAccountBalance(accountAddress) {\n    try {\n      const response = await this.accountBalanceByAddress(accountAddress);\n      return new BigNumber(response.balances[0].value);\n    }\n    catch (error) {\n      //console.log(error);\n      return new RosettaError(\n        error.message, axios.isAxiosError(error) ? error?.response?.status : undefined);\n    }\n  }\n\n  /**\n   * Return the latest block index.\n   * @returns {Promise<number>} The latest block index, or a RosettaError for error.\n   */\n  async getLastBlockIndex() {\n    try {\n      const response = await this.networkStatus();\n      return response.current_block_identifier.index;\n    }\n    catch (error) {\n      //console.log(error);\n      return new RosettaError(\n        error.message, axios.isAxiosError(error) ? error?.response?.status : undefined);\n    }\n  }\n\n  /**\n   * Return the Transaction object with the specified hash.\n   * @param {string} transactionHash The hash of the transaction to return.\n   * @returns {Transaction|null} The Transaction object with the specified hash, or a RosettaError\n   * for error.\n   */\n  async getTransaction(transactionHash) {\n    try {\n      const responseTransactions = await this.transactionsByHash(transactionHash);\n      if (responseTransactions.transactions.length === 0)\n        return new RosettaError('Transaction not found.', 500);\n\n      return new Transaction(\n        responseTransactions.transactions[0].transaction,\n        responseTransactions.transactions[0].block_identifier.index);\n    }\n    catch (error) {\n      //console.log(error);\n      return new RosettaError(\n        error.message, axios.isAxiosError(error) ? error?.response?.status : undefined);\n    }\n  }\n\n  /**\n   * Return an array of Transaction objects based on the specified parameters, or an empty array if\n   * none found.\n   * @param limit {number} The maximum number of transactions to return in one call.\n   * @param maxBlockIndex {number} The block index to start at. If not specified, start at current\n   * block.\n   * @param offset {number} The offset from maxBlockIndex to start returning transactions.\n   * @returns {Promise<Array<Transaction>|null>} An array of Transaction objects, or a RosettaError\n   * for error.\n   */\n  async getTransactions(limit, maxBlockIndex, offset) {\n    try {\n      // This function can be simplified once /search/transactions supports using the properties\n      // max_block, offset, and limit.\n      let blockIndex;\n      if (maxBlockIndex)\n        blockIndex = maxBlockIndex;\n      else {\n        // Get the latest block index.\n        const response = await this.networkStatus();\n        blockIndex = response.current_block_identifier.index;\n      }\n      if (offset)\n        blockIndex = Math.max(blockIndex - offset, -1);\n      const transactionCount = Math.min(limit, blockIndex + 1);\n      const transactions = [];\n      for (let i = 0; i < transactionCount; i++)\n        transactions.push(await this.getTransactionByBlock(blockIndex - i));\n      return transactions;\n    }\n    catch (error) {\n      //console.log(error);\n      return new RosettaError(\n        error.message, axios.isAxiosError(error) ? error?.response?.status : undefined);\n    }\n  }\n\n  /**\n   * Return an array of Transaction objects based on the specified parameters, or an empty array if\n   * none found.\n   * @param {string} accountAddress The account address to get the transactions of.\n   * @returns {Promise<Array<Transaction>|null>} An array of Transaction objects, or a RosettaError\n   * for error.\n   */\n  async getTransactionsByAccount(accountAddress) {\n    try {\n      const response = await this.transactionsByAccount(accountAddress);\n      const transactions = await Promise.all(\n        response.transactions.map((blockTransaction) => {\n          return new Transaction(\n            blockTransaction.transaction, blockTransaction.block_identifier.index);\n        })\n      );\n      return transactions.reverse();\n    }\n    catch (error) {\n      //console.log(error);\n      return new RosettaError(\n        error.message, axios.isAxiosError(error) ? error?.response?.status : undefined);\n    }\n  }\n\n  /**\n   * Return the Transaction corresponding to the specified block index (i.e., block height).\n   * @param {number} blockIndex The index of the block to return the Transaction for.\n   * @returns {Promise<Transaction>} The Transaction corresponding to the specified block index.\n   * @private\n   */\n  async getTransactionByBlock(blockIndex) {\n    const response = await this.blockByIndex(blockIndex);\n    return new Transaction(response.block.transactions[0], blockIndex);\n  }\n\n  /**\n   * Perform the specified http request and return the response data.\n   * @param {string} url The server URL that will be used for the request.\n   * @param {object} data The data to be sent as the request body.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  async request(url, data) {\n    return (await this.axios.request({ url: url, data: data })).data;\n  }\n\n  /**\n   * Return the /network/list response, containing a list of NetworkIdentifiers that the Rosetta\n   * server supports.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  networksList() {\n    return this.request('/network/list', {});\n  }\n\n  /**\n   * Return /network/status response, describing the current status of the network.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  async networkStatus() {\n    const networkIdentifier = await this.networkIdentifier;\n    return this.request(\n      '/network/status', {\n        network_identifier: networkIdentifier\n      }\n    );\n  }\n\n  /**\n   * Return the /account/balance response for the specified account.\n   * @param {string} accountAddress The account address to get the balance of.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  async accountBalanceByAddress(accountAddress) {\n    const networkIdentifier = await this.networkIdentifier;\n    return this.request(\n      '/account/balance', {\n        network_identifier: networkIdentifier,\n        account_identifier: {address: accountAddress}\n      }\n    );\n  }\n\n  /**\n   * Return the /block response for the block corresponding to the specified block index (i.e.,\n   * block height).\n   * @param {number} blockIndex The index of the block to return.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  async blockByIndex(blockIndex) {\n    const networkIdentifier = await this.networkIdentifier;\n    return this.request(\n      '/block', {\n        network_identifier: networkIdentifier,\n        block_identifier: {index: blockIndex}\n      }\n    );\n  }\n\n  /**\n   * Return the /search/transactions response for transactions containing an operation that affects\n   * the specified account.\n   * @param {string} accountAddress The account address to get the transactions of.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  async transactionsByAccount(accountAddress) {\n    const networkIdentifier = await this.networkIdentifier;\n    return this.request(\n      '/search/transactions', {\n        network_identifier: networkIdentifier,\n        account_identifier: {address: accountAddress}\n      }\n    );\n  }\n\n  /**\n   * Return the /search/transactions response for transactions (only one) with the specified hash.\n   * @param {string} transactionHash The hash of the transaction to return.\n   * @returns {Promise<any>} The response body that was provided by the server.\n   * @private\n   */\n  async transactionsByHash(transactionHash) {\n    const networkIdentifier = await this.networkIdentifier;\n    return this.request(\n      '/search/transactions', {\n        network_identifier: networkIdentifier,\n        transaction_identifier: {hash: transactionHash}\n      }\n    );\n  }\n}\n","/**\n * @file getHashString\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Return a string containing the hash which has been modified for display.\n * @param {string} hash The hash to modify for display.\n * @param {number} maxLength The maximum length of the hash string.\n * @return {string} A string containing the hash which has been modified for display.\n * @protected\n */\nexport default function getHashString(hash: string, maxLength?: number): string {\n  if (maxLength === undefined)\n    maxLength = 22;\n  if (maxLength !== 0 && hash.length > maxLength) {\n    const first = hash.substring(0, Math.max(maxLength - 4, 0));\n    const last = hash.substr(hash.length - 4);\n    return first + \"...\" + last;\n  }\n  else\n    return hash;\n}\n","/**\n * @file getIcpStringFromE8s\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport BigNumber from 'bignumber.js';\n\n/**\n * Return a string containing a formatted ICP value based on the specified ICP e8s value.\n * @param {number|BigNumber} icpE8s An ICP value specified in e8s units. \n * @param {boolean} shouldRound True to round to the nearest whole ICP value.\n * @returns {String} A string containing the formatted ICP value.\n */\nexport default function getIcpStringFromE8s(\n  icpE8s: number|BigNumber, shouldRound?: boolean): string {\n  let icp: number|BigNumber;\n  if (icpE8s instanceof BigNumber) {\n    icp = shouldRound ?\n      icpE8s.dividedToIntegerBy(100000000).toNumber() : icpE8s.div(100000000).toNumber();\n  }\n  else\n    icp = shouldRound ? Math.round(icpE8s / 100000000) : icpE8s / 100000000;\n  return icp.toLocaleString(undefined, {'minimumFractionDigits': 0, 'maximumFractionDigits': 8});\n}\n","/**\n * @file timeAgo\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport TimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\n\nTimeAgo.addDefaultLocale(en);\nconst timeAgo = new TimeAgo('en-US');\nexport default timeAgo;\n","/**\n * @file TransactionPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Fragment } from \"react\";\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { CircularProgress, Fade, Grid, Typography } from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport axios from 'axios';\nimport InfoTable from '../InfoTable/InfoTable';\nimport TrackablePage from '../TrackablePage/TrackablePage';\nimport RosettaApi, { RosettaError } from '../../rosetta/RosettaApi';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport getHashString from '../../utils/getHashString';\nimport getIcpStringFromE8s from '../../utils/getIcpStringFromE8s';\nimport timeAgo from '../../utils/timeAgo';\nimport Constants from '../../constants';\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-bottom: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst DivCircularProgress = styled.div`\n  && {\n    position: absolute;\n    margin-top: 145px;\n    /* Set to modal z-index so that progress indicator is above table.  */\n    z-index: ${zIndex.modal};\n    /* Add padding under the progress indicator for XS to compensate for the larger footer. */\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-bottom: 30px;\n      `\n    }\n  }\n`;\n\nconst StyledCircularProgress = styled(CircularProgress)`\n  && {\n    color: ${props => props.theme.colorBodyButtonBackground};\n  }\n`;\n\nconst GridCard = styled(Grid)`\n  && {\n    width: 100%;\n  }\n`;\n\nconst TableInfo = styled(InfoTable)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n  }\n`;\n\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\n/**\n * The Transaction page shows details about a transaction.\n */\nclass TransactionPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * Object containing information about how a <Route path> matched the URL.\n     */\n    match: PropTypes.object.isRequired\n  };\n\n  /**\n   * Create a TransactionPage object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      icpToUsd: null,\n      isLoading: false,\n      rosettaError: null,\n      transaction: null\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.getBodyRows = this.getBodyRows.bind(this);\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  async componentDidMount() {\n    super.componentDidMount();\n\n    const { hash } = this.props.match.params;\n    this.rosettaApi = new RosettaApi();\n    if (hash) {\n      this.setState({\n        isLoading: true\n      });\n      const transaction = await this.rosettaApi.getTransaction(hash);\n      if (transaction instanceof RosettaError) {\n        this.setState({\n          isLoading: false,\n          rosettaError: transaction\n        });\n      }\n      else {\n        const url =\n          `https://api.nomics.com/v1/currencies/ticker?key=${Constants.NOMICS_API_KEY}&ids=ICP&interval=1d`;\n        const result = await axios.get(url);\n        const icpToUsd = parseFloat(result?.data[0]?.price);\n\n        this.setState({\n          icpToUsd, icpToUsd,\n          isLoading: false,\n          rosettaError: null,\n          transaction: transaction\n        });\n      }\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint } = this.props;\n    const { isLoading, rosettaError, transaction } = this.state;\n\n    let errorMessage = '';\n    if (rosettaError) {\n      switch (rosettaError.errorType) {\n        case RosettaError.NotFound:\n          errorMessage = 'ERROR: Transaction not found.';\n          break;\n        case RosettaError.Timeout:\n          errorMessage = 'ERROR: Timed out while getting the transaction.';\n          break;\n        default: // NetworkError\n          errorMessage = 'ERROR: An error occurred while getting the transaction.'\n          break;\n      }\n    }\n\n    return (\n      <GridSection container\n        direction='column'\n        justify='flex-start'\n        alignItems='center'\n        breakpoint={breakpoint}\n      >\n        {rosettaError ?\n          <Grid item>\n            <TypographyBody>{errorMessage}</TypographyBody>\n          </Grid> :\n          <Fragment>\n            <Fade in={isLoading} timeout={duration.standard} mountOnEnter unmountOnExit>\n              <DivCircularProgress breakpoint={breakpoint}>\n                <StyledCircularProgress size={Constants.MATERIAL_CIRCULAR_INDICATOR_SIZE} />\n              </DivCircularProgress>\n            </Fade>\n            {transaction &&\n              <GridCard item breakpoint={breakpoint}>\n                <Fade\n                  timeout={500}\n                >\n                  <TableInfo\n                    breakpoint={breakpoint}\n                    getBodyRows={this.getBodyRows}\n                    showFooter={true}\n                    showRowBorders={true}\n                    title='Transaction'\n                  />\n                </Fade>\n              </GridCard>\n            }\n          </Fragment>\n        }\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return an array of objects that describe the body rows, where each object contains:\n   *  mapKey: A unique key that identifies the row.\n   *  cells: An array of objects that describe the cells of the row, where each object contains:\n   *    value: String containing the value of the cell.\n   *    isAltColor: Use the alternate color for the text of the cell.\n   *    isRightAligned: True to right align the table cell content.\n   * @return {Array} An array of objects that describe the body rows.\n   * @protected\n   */\n  getBodyRows() {\n    const { breakpoint } = this.props;\n    const { transaction, icpToUsd } = this.state;\n\n    let hashMaxLength;\n    if (breakpoint === Breakpoints.XS)\n      hashMaxLength = 20;\n    else if (breakpoint === Breakpoints.SM)\n      hashMaxLength = 48;\n    else\n      hashMaxLength = 0;\n\n    let time;\n    if (breakpoint === Breakpoints.XS)\n      time = transaction.timestamp.toLocaleString();\n    else\n      time = `${timeAgo.format(transaction.timestamp.getTime())} (${transaction.timestamp.toLocaleString()})`;\n\n    // Special handling for BURN and MINT transactions.\n    let type;\n    let from;\n    //let fromLink = undefined;\n    let to;\n    //let toLink = undefined;\n    if (transaction.type === 'BURN') {\n      type = 'Burn';\n      from = getHashString(transaction.account1Address, hashMaxLength);\n      //fromLink = `/acct/${transaction.account1Address}`;\n      to = Constants.MINTING_ACCOUNT_NAME;\n    }\n    else if (transaction.type === 'MINT') {\n      type = 'Mint';\n      from = Constants.MINTING_ACCOUNT_NAME;\n      to = getHashString(transaction.account1Address, hashMaxLength);\n      //toLink = `/acct/${transaction.account1Address}`;\n    }\n    else { // TRANSACTION\n      type = 'Transfer';\n      from = getHashString(transaction.account1Address, hashMaxLength);\n      //fromLink = `/acct/${transaction.account1Address}`;\n      to = getHashString(transaction.account2Address, hashMaxLength);\n      //toLink = `/acct/${transaction.account2Address}`;\n    }\n\n    let amount = getIcpStringFromE8s(transaction.amount) + ' ICP';\n    if (icpToUsd) {\n      const amountUsd = icpToUsd * transaction.amount.div(100000000).toNumber();\n      amount += ' ($' +\n        amountUsd.toLocaleString(\n          undefined, {'minimumFractionDigits': 2, 'maximumFractionDigits': 2}) + ')';\n    }\n\n    let fee = getIcpStringFromE8s(transaction.fee) + ' ICP';\n    if (icpToUsd) {\n      const feeUsd = icpToUsd * transaction.fee.div(100000000).toNumber();\n      fee += ' ($' +\n        feeUsd.toLocaleString(\n          undefined, {'minimumFractionDigits': 2, 'maximumFractionDigits': 2}) + ')';\n    }\n\n    return [\n      {\n        mapKey: 0,\n        cells: [ { value: 'Hash' }, { value: getHashString(transaction.hash, hashMaxLength) } ]\n      },\n      {\n        mapKey: 1,\n        cells: [ { value: 'Type' }, { value: type } ]\n      },\n      {\n        mapKey: 2,\n        cells: [\n          { value: 'Status' },\n          { value: transaction.status === 'COMPLETED' ? 'Completed' : transaction.status}\n        ]\n      },\n      {\n        mapKey: 3,\n        cells: [ { value: 'Index' }, { value: transaction.blockIndex.toLocaleString() } ]\n      },\n      {\n        mapKey: 4,\n        cells: [ { value: 'Timestamp' }, { value: time } ]\n      },\n      {\n        mapKey: 5,\n        cells: [ { value: 'From' }, { value: from } ]\n      },\n      {\n        mapKey: 6,\n        cells: [ { value: 'To' }, { value: to } ]\n      },\n      {\n        mapKey: 7,\n        cells: [ { value: 'Amount' }, { value: amount } ]\n      },\n      {\n        mapKey: 8,\n        cells: [ { value: 'Fee' }, { value: fee } ]\n      },\n      {\n        mapKey: 9,\n        cells: [ { value: 'Memo' }, { value: transaction.memo.toLocaleString() } ]\n      }\n    ];\n  }\n}\n\nexport default TransactionPage;\n","/**\n * @file TablePager\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { withTheme } from 'styled-components';\nimport {\n  Grid,\n  IconButton,\n  InputBase,\n  MenuItem,\n  Select,\n  TableCell,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledTableCell = styled(TableCell)`\n  && {\n    &:last-child {\n      border-bottom: 0;\n      padding: 0px;\n    }\n  }\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  && {\n    color: ${props => props.theme.colorBodyTextDim};\n    min-height: auto;\n    padding-left: 2px;\n    padding-right: 2px;\n  }\n`;\n\nconst TypographyCaption = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    /* Padding to align rows text and count text with rows per page number for non-XS breakpoints. */\n    padding-bottom: 1px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-bottom: 0px;\n      `\n    }\n  }\n`;\n\nconst TypographyRows = styled(TypographyCaption)`\n  && {\n    margin-top: -1px;\n    margin-left: 6px;\n    margin-right: 14px;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        margin-right: 7px;\n      `\n    }\n  }\n`;\n\nconst TypographyCount = styled(TypographyCaption)`\n  && {\n    margin-left: 41px;\n    margin-right: 2px;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM && `\n        margin-left: 20px;\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        margin-left: 20px;\n        margin-right: 6px;\n      `)\n    }\n  }\n`;\n\nconst StyledSelect = styled(({ ...other }) => (\n    <Select\n      classes={{\n        icon: 'icon',\n        root: 'root',\n        selectMenu: 'selectMenu'\n      }}\n      {...other}\n    />\n  ))`\n  && {\n    color: ${props => props.theme.colorBodyTextDim};\n    padding-left: 4px;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    & .icon {\n      color: ${props => props.theme.colorBodyTextDim};\n      /* Move icon up for non-XS breakpoints. */\n      ${({ breakpoint }) =>\n        breakpoint !== Breakpoints.XS && `\n          top: 0px;\n        `\n      }\n    }\n    & .root {\n      /**\n       * Used to move the rows per page number and the down arrow farther apart. Note that when this\n       * was set to a negative number to move them closer together, it caused problems (number\n       * abbreviated with ellipses) for a rows per page number with more than two digits (more than\n       * 99 rows per page).\n       */\n      margin-right: 2px;\n    }\n    & .selectMenu {\n      /* Vertically center rows per page number. Not sure why it is not already centered. */\n      vertical-align: middle;\n      display: table-cell;\n    }\n  }\n`;\n\nconst StyledMenuItem = styled(MenuItem)`\n  && {\n    color: ${props => props.theme.colorBodyTextDim};\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_2};\n  }\n`;\n\nconst StyledIconButton = styled(IconButton)`\n  && {\n    padding: ${\n      ((Constants.TABLE_ROW_HEIGHT_SM_AND_UP - Constants.MATERIAL_UI_ICON_BUTTON_FONT_SIZE) / 2) + 'px'\n    };\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding: ${\n          ((Constants.TABLE_ROW_HEIGHT_XS - Constants.MATERIAL_UI_ICON_BUTTON_FONT_SIZE) / 2) + 'px'\n        };\n      `\n    }\n    &:disabled {\n      color: ${props => fade(props.theme.colorBodyTextDim, props.theme.opacityActionDisabled)};\n    }\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: inherit;\n      }\n    }\n  }\n`;\n\nconst StyledIconButtonNotLast = styled(StyledIconButton)`\n  && {\n    margin-right: 4px;\n  }\n`;\n\n/**\n * Component that provides table pagination actions. The Material-UI TablePaginationActions\n * component is basic (e.g., no first and last buttons) and does not provide enough access for\n * styling (e.g., IconButton cannot by styled).\n */\nclass TablePagerActions extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The total number of rows.\n     */\n    count: PropTypes.number.isRequired,\n    /**\n     * Callback fired when the page is changed.\n     * @param {Number} pageIndex The index of the new page.\n     */\n    onChangePage: PropTypes.func.isRequired,\n    /**\n     * The zero-based index of the current page.\n     */\n    pageIndex: PropTypes.number.isRequired,\n    /**\n     * The number of rows per page.\n     */\n    pageSize: PropTypes.number.isRequired\n  };\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      breakpoint,\n      count,\n      onChangePage,\n      pageIndex,\n      pageSize,\n      ...other\n    } = this.props;\n\n    const lastPage = Math.ceil(count / pageSize) - 1;\n    return (\n      <div {...other}>\n        <StyledIconButtonNotLast\n          breakpoint={breakpoint}\n          color='inherit'\n          onClick={() => onChangePage(0)}\n          disabled={pageIndex === 0}\n          aria-label=\"First Page\"\n        >\n          <FirstPageIcon />\n        </StyledIconButtonNotLast>\n        <StyledIconButtonNotLast\n          breakpoint={breakpoint}\n          color='inherit'\n          onClick={() => onChangePage(pageIndex - 1)}\n          disabled={pageIndex === 0}\n          aria-label=\"Previous Page\"\n        >\n          <KeyboardArrowLeft />\n        </StyledIconButtonNotLast>\n        <StyledIconButtonNotLast\n          breakpoint={breakpoint}\n          color='inherit'\n          onClick={() => onChangePage(pageIndex + 1)}\n          disabled={pageIndex >= lastPage}\n          aria-label=\"Next Page\"\n        >\n          <KeyboardArrowRight />\n        </StyledIconButtonNotLast>\n        <StyledIconButton\n          breakpoint={breakpoint}\n          color='inherit'\n          onClick={() => onChangePage(Math.max(0, lastPage))}\n          disabled={pageIndex >= lastPage}\n          aria-label=\"Last Page\"\n        >\n          <LastPageIcon />\n        </StyledIconButton>\n      </div>\n    );\n  }\n}\n\n/**\n * A TableCell-based component for placing inside a TableFooter for pagination. The Material-UI\n * TablePagination component does not provide enough access for styling (e.g., its pop-up menu\n * cannot be fully styled at this time), so we implement our own Material Design pagination\n * component.\n * \n * Spacing is styled to match table at console.firebase.google.com/.../authentication/users\n * \n */\nclass TablePager extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The total number of rows.\n     */\n    count: PropTypes.number.isRequired,\n    /**\n     * Callback fired when the page is changed.\n     * @param {Number} pageIndex The index of the new page.\n     */\n    onChangePage: PropTypes.func.isRequired,\n    /**\n     * Callback fired when the number of rows per page is changed.\n     * @param {Number} pageSize The number of rows per page.\n     */\n    onChangePageSize: PropTypes.func,\n    /**\n     * The zero-based index of the current page.\n     */\n    pageIndex: PropTypes.number.isRequired,\n    /**\n     * The number of rows per page.\n     */\n    pageSize: PropTypes.number.isRequired,\n    /**\n     * Customizes the options of the rows per page select field. If less than two options are\n     * available, no select field will be displayed.\n     */\n    rowsPerPageOptions: PropTypes.array.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @public\n   */\n  componentDidUpdate() {\n    const { count, onChangePage, pageIndex, pageSize } = this.props;\n    const newLastPage = Math.max(0, Math.ceil(count / pageSize) - 1);\n    if (pageIndex > newLastPage) {\n      onChangePage(newLastPage);\n    }\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const colSpan = 1000; // span all table columns\n    return (\n      <StyledTableCell colSpan={colSpan} padding='checkbox'>\n        {this.getToolbar()}\n      </StyledTableCell>\n    );\n  }\n\n  /**\n   * Return the elements for the Toolbar component.\n   * @return {Object} The elements for the Toolbar component.\n   * @private\n   */\n  getToolbar() {\n    const { breakpoint } = this.props;\n    return (\n      breakpoint === Breakpoints.XS ?\n        // For XS, put the actions buttons on a second row, and center both rows.\n        <StyledToolbar>\n          <Grid container direction='column' justify='flex-start' alignItems='center'>\n            <Grid container direction='row' justify='center' alignItems='center' wrap='nowrap'>\n              {this.getRowsSelectCount()}\n            </Grid>\n            <Grid container direction='row' justify='center' alignItems='center' wrap='nowrap'>\n              {this.getActions()}\n            </Grid>\n          </Grid>\n        </StyledToolbar>\n      :\n        <StyledToolbar>\n          <Grid container direction='row' justify='flex-end' alignItems='center' wrap='nowrap'>\n            {this.getRowsSelectCount()}\n            {this.getActions()}\n          </Grid>\n        </StyledToolbar>\n    );\n  }\n\n  /**\n   * Return the elements for the rows text, the Select component, and the count text.\n   * @return {Object} The elements for the rows text, the Select component, and the count text.\n   * @private\n   */\n  getRowsSelectCount() {\n    const {\n      breakpoint,\n      onChangePageSize,\n      pageSize,\n      rowsPerPageOptions,\n      theme\n    } = this.props;\n    const rowsText = (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) ?\n      'Rows:' : 'Rows per page:';\n    return (\n      <Fragment>  \n        {rowsPerPageOptions.length > 1 && (\n          <Fragment>\n            <TypographyRows breakpoint={breakpoint} color='inherit'>\n              {rowsText}\n            </TypographyRows>\n            <StyledSelect\n              breakpoint={breakpoint}\n              input={<InputBase />}\n              value={pageSize}\n              onChange={event => onChangePageSize(event.target.value)}\n              // Unable to style the Menu background using styled-components.\n              MenuProps={{\n                PaperProps: {style: {background: theme.colorTableBackgroundPrimary}}\n              }}\n            >\n              {rowsPerPageOptions.map(rowsPerPageOption => (\n                <StyledMenuItem\n                  key={rowsPerPageOption}\n                  value={rowsPerPageOption}\n                >\n                  {rowsPerPageOption}\n                </StyledMenuItem>\n              ))}\n            </StyledSelect>\n          </Fragment>\n        )}\n        <TypographyCount breakpoint={breakpoint} color='inherit'>\n          {this.getCountText()}\n        </TypographyCount>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Return the text for the count (e.g., 1-10 of 120).\n   * @return {Object} The text for the count.\n   * @private\n   */\n  getCountText() {\n    const {\n      breakpoint,\n      count,\n      pageIndex,\n      pageSize\n    } = this.props;\n\n    const from = count === 0 ? 0 : pageIndex * pageSize + 1;\n    const to = Math.min(count, (pageIndex + 1) * pageSize);\n\n    let total;\n    if (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) {\n      if (count >= 1000000000) {\n        const t = count / 1000000000;\n        total = t.toFixed(Number.isInteger(t) ? 0 : 1) + 'T';\n      }\n      else if (count >= 1000000) {\n        const m = count / 1000000;\n        total = m.toFixed(Number.isInteger(m) ? 0 : 1) + 'M';\n      }\n      else if (count >= 1000) {\n        const k = count / 1000;\n        total = k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n      }\n      else\n      total = count.toFixed(0);\n    }\n    else\n      total = count.toLocaleString();\n\n    return `${from.toLocaleString()}-${to.toLocaleString()} of ${total}`;\n  }\n\n  /**\n   * Return the elements for the TablePagerActions component.\n   * @return {Object} The elements for the TablePagerActions component.\n   * @private\n   */\n  getActions() {\n    const {\n      breakpoint,\n      count,\n      onChangePage,\n      pageIndex,\n      pageSize\n    } = this.props;\n    return (\n      <TablePagerActions\n        breakpoint={breakpoint}\n        count={count}\n        onChangePage={onChangePage}\n        pageIndex={pageIndex}\n        pageSize={pageSize}\n      />\n    );\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(TablePager);\n","/**\n * @file PagedTable\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport {\n  CircularProgress,\n  Fade,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableFooter,\n  TableHead,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport TablePager from '../TablePager/TablePager';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorTableBackgroundPrimary};\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 4px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n  }\n`;\n\nconst DivCircularProgress = styled.div<{ breakpoint: number }>`\n  && {\n    position: absolute;\n    /* Set to modal z-index so that progress indicator is above table.  */\n    z-index: ${zIndex.modal};\n    /* Add padding under the progress indicator for XS to compensate for the larger footer. */\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-bottom: 30px;\n      `\n    }\n  }\n`;\n\nconst StyledCircularProgress = styled(CircularProgress)`\n  && {\n    color: ${props => props.theme.colorBodyButtonBackground};\n  }\n`;\n\nconst StyledTable = styled(Table)<{ breakpoint: number, loading: number }>`\n  && {\n    /* Same easing as Material-UI . */\n    transition: ${'opacity ' + duration.standard + 'ms ' + easing.easeInOut};\n    opacity: ${props => props.loading ? 0.5 : 1.0};\n    font-family: ${Constants.FONT_PRIMARY};\n    ${({ breakpoint }) =>\n      ((breakpoint !== Breakpoints.XS) && `\n        min-width: 800px;\n      `)\n    }\n  }\n`;\n\nconst StyledTableRow = styled(TableRow)<{ breakpoint: number }>`\n  && {\n    height: ${Constants.TABLE_ROW_HEIGHT_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: ${Constants.TABLE_ROW_HEIGHT_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst TableRowFooter = styled(StyledTableRow)`\n  && {\n    border-top-color: ${props => props.theme.colorTableRowBorder};\n    border-top-style: solid;\n    border-top-width: 2px;\n  }\n`;\n\nconst StyledTableCell = styled(TableCell)<{ breakpoint: number }>`\n  && {\n    border-color: ${props => props.theme.colorTableRowBorder};\n    color: ${props => props.theme.colorBodyText};\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_2};\n    white-space: nowrap;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.FONT_SIZE_TABLE_XS};\n      `\n    }\n  }\n`;\n\nconst TableCellHeader = styled(StyledTableCell)`\n  && {\n    border-bottom-style: solid;\n    border-bottom-width: 2px;\n    color: ${props => props.theme.colorBodyTextDim};\n    font-weight: 500;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\n/**\n * Describes the cells of a PagedTable row.\n */\nexport interface PagedTableCell\n{\n  /**\n   * The value of the cell.\n   */\n  value: string;\n  /**\n   * True if the cell contains a numeric value, false otherwise.\n   */\n  isNumeric: boolean;\n  /**\n   * Optional string which provides a link for the cell (to= prop of Link).\n   */\n  link?: string;\n}\n\n/**\n * Describes a body row of a PagedTable.\n */\nexport interface PagedTableBodyRow {\n  /**\n  * A unique key that identifies the row.\n  */\n  mapKey: string;\n  /**\n   * An array of PagedTableCell objects that describe the cells of the row.\n   */\n  cells: Array<PagedTableCell>;\n}\n\ninterface PagedTableProps {\n  /**\n   * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n   */    \n  breakpoint: number;\n  /**\n   * An array that specifies the column widths of the table.\n   */    \n  columnWidths: Array<string>;\n  /**\n   * The total number of rows.\n   */\n  count: number;\n  /**\n   * Return an array of PagedTableBodyRow objects that describe the body rows.\n   * @return {Array} An array of PagedTableBodyRow that describe the body rows.\n   */\n  getBodyRows: () => Array<PagedTableBodyRow>;\n  /**\n   * An array of PagedTableCell objects that describe the cells of the header row.\n   */\n  headerRow: Array<PagedTableCell>;\n  /**\n   * Indicates whether the table is currently loading data.\n   */\n  isLoading: boolean;\n  /**\n   * Callback fired when the page is changed.\n   * @param {number} pageIndex The index of the new page.\n   */\n  onChangePage: (pageIndex: number) => void;\n  /**\n   * Callback fired when the number of rows per page is changed.\n   * @param {number} pageSize The number of rows per page.\n   */\n  onChangePageSize: (pageSize: number) => void;\n  /**\n   * The current page index.\n   */\n  pageIndex: number|null;\n  /**\n   * The page size of the table.\n   */    \n  pageSize: number;\n  /**\n   * The title of the table.\n   */\n  title: string;\n}\n\n/**\n * This component displays a table that supports pagination.\n */\nconst PagedTable = (\n  {\n    breakpoint,\n    columnWidths,\n    count,\n    getBodyRows,\n    headerRow,\n    isLoading,\n    onChangePage,\n    onChangePageSize,\n    pageIndex,\n    pageSize,\n    title\n  }: PagedTableProps) => {\n\n  /**\n   * Return the elements for the table.\n   * @return {JSX.Element} The elements for the table.\n   * @private\n   */\n  const getTableElements = (): JSX.Element => {\n    return (\n      <Grid container\n        direction='column'\n        justify='center'\n        alignItems='center'\n      >\n        <Fade in={isLoading} timeout={duration.standard} mountOnEnter unmountOnExit>\n          <DivCircularProgress breakpoint={breakpoint}>\n            <StyledCircularProgress size={Constants.MATERIAL_CIRCULAR_INDICATOR_SIZE} />\n          </DivCircularProgress>\n        </Fade>\n        <TableContainer>\n          <StyledTable breakpoint={breakpoint} loading={isLoading ? 1 : 0}>\n            <colgroup>\n              {columnWidths.map((width, index) => {\n                // The column width settings seem to be ignored in many cases, depending on cell\n                // length. That is, when cell lengths are long, the widths are ignored.\n                return (\n                  <col key={index} width={width} />\n                );\n              })}\n            </colgroup>\n            <TableHead>\n              {getHeaderRowElement()}\n            </TableHead>\n            <TableBody>\n              {getBodyRowElements()}\n            </TableBody>\n            <TableFooter>\n              {getFooterRowElement()}\n            </TableFooter>\n          </StyledTable>\n        </TableContainer>\n      </Grid>\n    );\n  }\n\n  /**\n   * Return the element for the header row.\n   * @return {JSX.Element} The element for the header row.\n   */\n  const getHeaderRowElement = (): JSX.Element => {\n    return (\n      <StyledTableRow breakpoint={breakpoint}>\n        {headerRow.map((cell, index) => {\n          return (\n            // Using index as the key is fine here and for cells in other rows, since we never add,\n            // remove, reorder, or filter items in the cell arrays.\n            <TableCellHeader\n              breakpoint={breakpoint}\n              key={index}\n              align={cell.isNumeric ? 'right' : 'inherit'}\n              padding='checkbox'\n              size='small'\n            >\n              {cell.link ?\n                <StyledLink to={cell.link}>{cell.value}</StyledLink> :\n                cell.value\n              }\n            </TableCellHeader>\n          );\n        })}\n      </StyledTableRow>\n    );\n  }\n\n  /**\n   * Return the elements for all of the body rows.\n   * @return {Array<JSX.Element>} The elements for all of the body rows.\n   */\n  const getBodyRowElements = (): Array<JSX.Element> => {\n    const rows: Array<PagedTableBodyRow> = getBodyRows();\n    return rows.map((bodyRow: PagedTableBodyRow) => {\n      return getBodyRowElement(bodyRow);\n    });\n  }\n\n  /**\n   * Return the element for the specified body row.\n   * @param {PagedTableBodyRow} bodyRow Object that describes the body row.\n   * @return {JSX.Element} The element for the specified body row.\n   */\n  const getBodyRowElement = (bodyRow: PagedTableBodyRow): JSX.Element => {\n    return (\n      <StyledTableRow breakpoint={breakpoint} key={bodyRow.mapKey}>\n        {bodyRow.cells.map((cell, index) => {\n          return (\n            <StyledTableCell\n              breakpoint={breakpoint}\n              key={index}\n              align={cell.isNumeric ? 'right' : 'inherit'}\n              padding='checkbox'\n              size='small'\n            >\n              {cell.link ?\n                <StyledLink to={cell.link}>{cell.value}</StyledLink> :\n                cell.value\n              }\n            </StyledTableCell>\n          );\n        })}\n      </StyledTableRow>\n    );\n  }\n\n  /**\n   * Return the element for the footer row.\n   * @return {JSX.Element} The element for the footer row.\n   */\n  const getFooterRowElement = (): JSX.Element => {\n    const show = count > 0;\n    return (\n      <Fade in={show} timeout={duration.standard}>\n        <TableRowFooter breakpoint={breakpoint}>\n          <TablePager\n            breakpoint={breakpoint}\n            rowsPerPageOptions={[10, 25, 50]}\n            count={count}\n            onChangePage={onChangePage}\n            onChangePageSize={onChangePageSize}\n            pageIndex={pageIndex}\n            pageSize={pageSize}\n          />\n        </TableRowFooter>\n      </Fade>\n    );\n  }\n\n  return (\n    <StyledPaper elevation={1}>\n      <TypographyTitle>{title}</TypographyTitle>\n      {getTableElements()}\n    </StyledPaper>\n  );\n}\n\nexport default PagedTable;\n","/**\n * @file TransactionsPagedTable\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport * as _ from 'styled-components/cssprop'; // needed once in project\nimport { Typography } from '@material-ui/core';\nimport PagedTable, { PagedTableBodyRow, PagedTableCell } from '../PagedTable/PagedTable';\nimport {\n  RosettaError,\n  RosettaErrorType,\n  Transaction\n} from '../../rosetta/RosettaApi';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport getHashString from '../../utils/getHashString';\nimport getIcpStringFromE8s from '../../utils/getIcpStringFromE8s';\nimport timeAgo from '../../utils/timeAgo';\nimport Constants from '../../constants';\n\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\ninterface TransactionsPagedTableProps {\n  /**\n   * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n   */    \n  breakpoint: number;\n  /**\n   * The current account address of the Account page. Used to prevent linking to the page we're\n   * already on.\n   */\n  currentAccountAddress?: string;\n  /**\n   * Callback to get the specified transactions.\n   */    \n  getTransactions: (offset: number, limit: number) =>\n    Promise<Array<Transaction>|RosettaError>|Array<Transaction>;\n  /**\n   * Callback fired when the page is changed.\n   * @param {number} pageIndex The index of the new page.\n   */\n  onChangePage: (pageIndex: number) => void;\n  /**\n   * Callback fired when the number of rows per page is changed.\n   * @param {number} pageSize The number of rows per page.\n   */\n  onChangePageSize: (pageSize: number) => void;\n  /**\n   * The current page index.\n   */\n  pageIndex: number|null;\n  /**\n   * The page size of the table.\n   */    \n  pageSize: number;\n  /**\n   * The total count of transactions.\n   */    \n  transactionsCount: number|null;\n}\n\n/**\n * This component displays a paged table of Transaction objects.\n */\nconst TransactionsPagedTable = (\n  {\n    breakpoint,\n    currentAccountAddress,\n    getTransactions,\n    onChangePage,\n    onChangePageSize,\n    pageIndex,\n    pageSize,\n    transactionsCount\n  }: TransactionsPagedTableProps) => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [rosettaError, setRosettaError] = useState<RosettaError|null>(null);\n  const [transactions, setTransactions] = useState<Array<Transaction>>([]);\n\n  useEffect(() => {\n    const fetchData = async (offset: number) => {\n      setIsLoading(true);\n      const transactions: Array<Transaction>|RosettaError = await getTransactions(offset, pageSize);\n      setIsLoading(false);\n      if (transactions instanceof RosettaError)\n        setRosettaError(transactions);\n      else {\n        setTransactions(transactions);\n        setRosettaError(null);\n      }\n    };\n\n    const offset: number|null = pageIndex !== null ? pageIndex * pageSize : null;\n    if (offset !== null)\n      fetchData(offset);\n  }, [getTransactions, pageIndex, pageSize]);\n\n  /**\n   * Return an array of PagedTableBodyRow objects that describe the body rows.\n   * @returns {Array<PagedTableBodyRow>} An array of PagedTableBodyRow objects that describe\n   * the body rows.\n   */\n  const getBodyRows = (): Array<PagedTableBodyRow> => {\n    let bodyRows: Array<PagedTableBodyRow>;\n    if (breakpoint === Breakpoints.XS) {\n      bodyRows = transactions.map(transaction => {\n        const hash: string = getHashString(transaction.hash);\n        const hashLink: string = `/tx/${transaction.hash}`;\n        const amount: string = getIcpStringFromE8s(transaction.amount) + ' ICP';\n\n        return {\n          mapKey: transaction.hash,\n          cells: [\n            {value: hash, isNumeric: false, link: hashLink},\n            {value: amount, isNumeric: true}\n          ]\n        };\n      });\n    }\n    else {\n      bodyRows = transactions.map(transaction => {\n        // Special handling for BURN and MINT transactions.\n        const hash: string = getHashString(transaction.hash);\n        const hashLink: string = `/tx/${transaction.hash}`;\n        let type: string;\n        const time: string = timeAgo.format(transaction.timestamp.getTime());\n        let from: string;\n        let fromLink: string|undefined = undefined;\n        let to: string;\n        let toLink: string|undefined = undefined;\n        const amount: string = getIcpStringFromE8s(transaction.amount) + ' ICP';\n        if (transaction.type === 'BURN') {\n          type = 'Burn';\n          from = getHashString(transaction.account1Address);\n          if (transaction.account1Address !== currentAccountAddress)\n            fromLink = `/acct/${transaction.account1Address}`;\n          to = Constants.MINTING_ACCOUNT_NAME;\n        }\n        else if (transaction.type === 'MINT') {\n          type = 'Mint';\n          from = Constants.MINTING_ACCOUNT_NAME;\n          to = getHashString(transaction.account1Address);\n          if (transaction.account1Address !== currentAccountAddress)\n            toLink = `/acct/${transaction.account1Address}`;\n        }\n        else { // TRANSACTION\n          type = 'Transfer';\n          from = getHashString(transaction.account1Address);\n          if (transaction.account1Address !== currentAccountAddress)\n            fromLink = `/acct/${transaction.account1Address}`;\n          to = getHashString(transaction.account2Address);\n          if (transaction.account2Address !== currentAccountAddress)\n            toLink = `/acct/${transaction.account2Address}`;\n        }\n\n        // Disable account links until account functionality is implemented!!!\n        fromLink = undefined;\n        toLink = undefined;\n\n        return {\n          mapKey: transaction.hash,\n          cells: [\n            {value: hash, isNumeric: false, link: hashLink},\n            {value: type, isNumeric: false},\n            {value: time, isNumeric: false},\n            {value: from, isNumeric: false, link: fromLink},\n            {value: to, isNumeric: false, link: toLink},\n            {value: amount, isNumeric: true}\n          ]\n        };\n      });\n    }\n\n    return bodyRows;\n  };\n\n  let errorMessage: string = '';\n  if (rosettaError) {\n    switch (rosettaError.errorType) {\n      case RosettaErrorType.Timeout:\n        errorMessage = 'ERROR: Timed out while getting the transactions.';\n        break;\n      default: // NotFound (N/A), NetworkError\n        errorMessage = 'ERROR: An error occurred while getting the transactions.'\n        break;\n    }\n  }\n\n  let columnWidths: Array<string>;\n  let headerRow: Array<PagedTableCell>;\n  if (breakpoint === Breakpoints.XS) {\n    columnWidths = ['60%', '40%'];\n    headerRow = [\n      {value: 'Hash', isNumeric: false},\n      {value: 'Amount', isNumeric: true}\n    ];\n  }\n  else {\n    columnWidths = ['25%', '5%', '5%', '25%', '25%', '15%'];\n    headerRow = [\n      {value: 'Hash', isNumeric: false},\n      {value: 'Type', isNumeric: false},\n      {value: 'Time', isNumeric: false},\n      {value: 'From', isNumeric: false},\n      {value: 'To', isNumeric: false},\n      {value: 'Amount', isNumeric: true}\n    ];\n  }\n\n  return (\n    rosettaError ?\n      <TypographyBody>{errorMessage}</TypographyBody> :\n      <PagedTable\n        breakpoint={breakpoint}\n        title='Transactions'\n        columnWidths={columnWidths}\n        headerRow={headerRow}\n        count={transactionsCount ? transactionsCount : 0}\n        isLoading={isLoading}\n        getBodyRows={getBodyRows}\n        onChangePage={onChangePage}\n        onChangePageSize={onChangePageSize}\n        pageIndex={pageIndex}\n        pageSize={pageSize}\n      />\n  );\n}\n\nexport default TransactionsPagedTable;\n","/**\n * @file TransactionsPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Typography\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport Fade from 'react-reveal/Fade';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport TransactionsPagedTable from '../TransactionsPagedTable/TransactionsPagedTable';\nimport RosettaApi, { RosettaError } from '../../rosetta/RosettaApi';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst GridSection = styled(Grid)`\n  && {\n    padding: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst GridPagedTable = styled(Grid)`\n  && {\n    width: 100%;\n  }\n`;\n\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\n/**\n * Component for the transactions page.\n */\nclass TransactionsPage extends TrackablePage {\n  /**\n   * Create a TransactionsPage object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pageIndex: null,\n      pageSize: 10,\n      transactionsCount: null,\n      rosettaError: null\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.getTransactions = this.getTransactions.bind(this);\n    this.handleChangePage = this.handleChangePage.bind(this);\n    this.handleChangePageSize = this.handleChangePageSize.bind(this);\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  async componentDidMount() {\n    super.componentDidMount();\n\n    this.rosettaApi = new RosettaApi();\n    const maxBlockIndex = await this.rosettaApi.getLastBlockIndex();\n    if (maxBlockIndex instanceof RosettaError) {\n      this.setState({\n        rosettaError: maxBlockIndex\n      });\n    }\n    else {\n      this.setState({\n        pageIndex: 0,\n        transactionsCount: maxBlockIndex + 1,\n        rosettaError: null\n      });\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint } = this.props;\n    const { pageIndex, pageSize, rosettaError, transactionsCount } = this.state;\n\n    let errorMessage = '';\n    if (rosettaError) {\n      switch (rosettaError.errorType) {\n        case RosettaError.Timeout:\n          errorMessage = 'ERROR: Timed out while getting the transactions count.';\n          break;\n        default: // NotFound, NetworkError\n          errorMessage = 'ERROR: An error occurred while getting the transactions count.'\n          break;\n      }\n    }\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='space-between'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        {rosettaError ?\n          <Grid item>\n            <TypographyBody>{errorMessage}</TypographyBody>\n          </Grid> :\n          <GridPagedTable item breakpoint={breakpoint}>\n            <Fade timeout={500}>\n              <TransactionsPagedTable\n                breakpoint={breakpoint}\n                getTransactions={this.getTransactions}\n                onChangePage={this.handleChangePage}\n                onChangePageSize={this.handleChangePageSize}\n                pageIndex={pageIndex}\n                pageSize={pageSize}\n                transactionsCount={transactionsCount}\n              />\n            </Fade>\n          </GridPagedTable>\n        }\n      </GridSection>\n    );\n  }\n\n  /**\n   * Callback to get the specified transactions.\n   * @param {Number} offset The offset at which to start getting transactions.\n   * @param {Number} limit The maximum number of transactions to get.\n   * @returns {Promise<Array<Transaction>|RosettaError>|Array<Transaction>} An array of Transaction\n   * objects, or RosettaError for error.\n   */\n  async getTransactions(offset, limit) {\n    const { transactionsCount } = this.state;\n    if (transactionsCount !== null)\n      return await this.rosettaApi.getTransactions(limit, transactionsCount - 1, offset);\n    else\n      return [];\n  }\n\n  /**\n   * Callback fired when the TransactionsPagedTable component page is changed.\n   * @param {Number} pageIndex The index of the new page.\n   * @public\n   */\n  handleChangePage(pageIndex) {\n    this.setState({\n      pageIndex: pageIndex\n    });\n  }\n\n  /**\n   * Callback fired when the TransactionsPagedTable component number of rows per page is changed.\n   * @param {Number} pageSize The number of rows per page.\n   * @public\n   */\n   handleChangePageSize(pageSize) {\n    // When rows per page is changed, reset pageIndex.\n    this.setState({\n      pageIndex: 0,\n      pageSize: pageSize\n    });\n  }\n}\n\nexport default TransactionsPage;\n","/**\n * @file getRandomInt\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\nimport getRandomNumber from './getRandomNumber'\n\n/**\n * Return a random integer between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random integer.\n * @private\n */\nexport default function getRandomInt(start, end) {\n  return Math.floor(getRandomNumber(start, end));\n}\n","/**\n * @file getRandomNumber\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n /**\n * Return a random number between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random number.\n * @private\n */\nexport default function getRandomNumber(start, end) {\n  return Math.random() * (end - start) + start;\n}\n","/**\n * @file DfinitySymbolD3\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport * as PIXI from 'pixi.js';\nimport * as filters from 'pixi-filters';\nimport getRandomInt from '../../utils/getRandomInt';\n\n/**\n * This class draws the DFINITY logo infinity symbol using a d3 force-directed graph.\n */\nclass DfinitySymbolD3 extends Component  {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * True for logo mode, where the symbol is shaped more like the DFINITY logo, and various\n     * adjustments are made with the intention of rendering at small sizes (e.g., in an app bar).\n     */\n    logoMode: PropTypes.bool,\n    /**\n     * The width of the component, or 0 for use built-in simulationWidth.\n     */\n    width: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a DfinitySymbolD3 object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.dragStarted = this.dragStarted.bind(this);\n    this.dragged = this.dragged.bind(this);\n    this.dragEnded = this.dragEnded.bind(this);\n    this.tick = this.tick.bind(this);\n    this.rotate = this.rotate.bind(this);\n\n    // A force-directed graph can be a difficult beast to tame. Most changes to settings in this\n    // class will likely change the shape of the graph and require changing other settings through\n    // trial and error in order to get the graph back to the DFINITY logo shape. Any number of the\n    // settings below could be made into constructor parameters. Another idea would be to pre-define\n    // different groups of settings that produce a shape which approximates the DFINITY logo\n    // shape, and then allow the caller to specify which group of settings to use. Since there is\n    // currently only one group of settings defined, settings groups would not currently be useful.\n\n    // PixiJS members.\n    this.stage = null;\n    this.renderer = null;\n    this.linksGraphics = null;\n\n    // Code is customized for this window size. Modifying these values will cause the d3 force-\n    // directed graph to change shape unless scaleToWindow is adjusted to keep the object the same\n    // size.\n    this.simulationWidth = this.props.logoMode ? 780 : 800;\n    this.simulationHeight = 400;\n    this.scaleSimulationToPixi = 1.0;\n\n    this.centerX = this.simulationWidth / 2;\n    this.centerY = this.simulationHeight / 2;\n    this.scaleToWindow = this.simulationWidth / 2 * 0.8;\n\n    // Specify the number of symbol nodes and the number of vertices for each symbol node. The\n    // current values of 36 symbol nodes and 8 vertices (octagon) was arrived at after trial and\n    // error to produce a shape which resembles the DFINITY logo.\n    this.numSymbolNodes = this.props.logoMode ? 41 : 36;\n    this.numVertices = this.props.logoMode ? 10 : 8;\n    this.numNodes = this.numSymbolNodes * this.numVertices;\n\n    // Specify the charge of the symbol nodes and the non-symbol nodes. \"A positive value causes\n    // nodes to attract each other, similar to gravity, while a negative value causes nodes to\n    // repel each other, similar to electrostatic charge.\" The default value is -30, but we specify\n    // much lower in magnitude values because we do not want the nodes to repel very much. For the\n    // fixed nodes which draw the infinity symbol, we do not want any force at all.\n    this.forceManyBodyStrengthSymbolNodes = 0;\n    this.forceManyBodyStrengthNonSymbolNodes = this.props.logoMode ? -3.75 : -9;\n\n    // Specify the link distance. \"The link force pushes linked nodes together or apart according to\n    // the desired link distance.\" The default value is 30.\n    this.linkDistance = this.props.logoMode ? 19 : 14;\n\n    // Specify node and link drawing properties.\n    this.nodeStrokeWidth = 1;\n    this.nodeRadius = 4.5;\n    this.nodeRadiusSelected = this.props.logoMode ? 11 : 5.5;\n    // DCM 01.mar.2019: Always use same node fill color as stroke color.\n    //this.nodeFillColorArray = [127, 127, 127];\n    this.nodeSelectedFillColorArray = [255, 255, 255];\n    this.nodeSelectedStrokeColorArray = [255, 255, 255];\n    this.nodeOpacity = 0.5;\n    this.nodeOpacitySelected = 0.75;\n    this.linkStrokeWidth = this.props.logoMode ? 3 : 2; // why do lines get blurry when this is increased?\n    this.linkStrokeWidthIncreaseAtMagnitude = this.props.logoMode ? 1.5 : 0;\n\n    // Adjust the symbolHeightMultiplier to make the symbol shorter or taller. A value of 1.0\n    // represents normal height.\n    this.symbolHeightMultiplier = this.props.logoMode ? 1.325 : 1.111111;\n\n    // The initial rotateOffset does two things: it determines which part of the symbol goes in\n    // front (blue is on top in the DFINITY logo), and it makes a small adjustment to align the\n    // colors correctly.\n    this.rotateOffset = this.numSymbolNodes / 2 - 1.2;\n\n    // The rotate interval frequency.\n    this.rotateTimeMs = 33.3; // 30 frames/sec max\n\n    // The amount of rotation for every rotate interval.\n    this.rotateAmount = this.props.logoMode ? 0 : 0.000015;\n\n    // The currently selected node index.\n    this.selectedNodeIndex = -1;\n\n    // New block timer members.\n    this.newBlockNodeStartTime = null;\n    this.newBlockLinksStartTime = null;\n    this.newBlockNodeTimerMs = 1000;\n    this.newBlockLinksTimerMs = 1500;\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Set the value of scaleSimulationToPixi based on the width prop. We scale the force-directed\n    // graph by keeping the d3 simulation as is, since it is finely tuned to appear in a certain\n    // way, and instead scaling coordinates from simulation space to PixiJS space when rendering.\n    // In this way, the graph can be scaled to any width by changing the widths prop. A width prop\n    // of 0 indicates no scaling. Note that drag/drop is not currently implemented when scaling.\n    this.scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n\n    // Draw the DFINITY logo infinity symbol.\n    this.draw();\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Cleanup PixiJS properties.\n    this.renderer.destroy();\n    this.stage.destroy();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @public\n   */\n  componentDidUpdate() {\n    // Make the necessary PixiJS adjustments when the width prop changes.\n    const scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n    if (this.scaleSimulationToPixi !== scaleSimulationToPixi) {\n      this.scaleSimulationToPixi = scaleSimulationToPixi;\n\n      // Resize the renderer.\n      this.pixiResizeRenderer();\n\n      // Draw circles for the nodes.\n      if (this.nodesData) {\n        this.nodesData.forEach((node) => { this.pixiDrawNode(node); });\n      }\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return <div ref={(el) => { this.element = el }}/>;\n  }\n\n  /**\n   * Draw the DFINITY logo infinity symbol.\n   * @public\n   */\n  draw() {\n    // Set up the nodes and links of the graph.\n    this.addNodes();\n    this.addLinks();\n\n    // Create the d3 simulation.\n    this.createSimulation();\n\n    // Set up PixiJS to draw the simulation.\n    this.pixiSetup();\n  }\n\n  /**\n   * Add a new block.\n   * @public\n   */\n  addNewBlock() {\n    // If there is a selected node still animating, stop the animation and return it to normal.\n    if (this.newBlockNodeStartTime) {\n        const node = this.nodesData[this.selectedNodeIndex];\n        this.pixiDrawNode(node);\n    }\n\n    // Select node and enable new block timers.\n    this.selectedNodeIndex = getRandomInt(0, this.numNodes - 1);\n    this.newBlockNodeStartTime = this.newBlockLinksStartTime = new Date();\n  }\n\n  /**\n   * Populate nodesData[] with the nodes of the graph.\n   * @private\n   */\n  addNodes() {\n    // Add the symbol nodes to nodesData[] at fixed positions (fx, fy). _fx and _fy save the fixed\n    // position across drag/drop operations, linkCount is used to calculate the strength of the\n    // force of a link.\n    this.nodesData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      const pos = this.getNodePosition(i);\n      this.nodesData.push({\n        'fx' : pos[0],\n        'fy' : pos[1],\n        '_fx' : pos[0],\n        '_fy' : pos[1],\n        'linkCount' : 0});\n    }\n\n    // Add the non-symbol nodes at non-fixed positions.\n    for (let i = this.numSymbolNodes; i < this.numNodes; i++) {\n      this.nodesData.push({'linkCount' : 0});\n    }\n  }\n\n  /**\n   * Get the position of the node with the specified index.\n   * @param {Number} index The node index.\n   * @return {Array} An array containing the [x, y] position of the node.\n   * @private\n   */\n  getNodePosition(index) {\n    const t =\n      2 * Math.PI * ((index + this.rotateOffset) % this.numSymbolNodes) / this.numSymbolNodes;\n    const scale = 2 / (3 - Math.cos(2 * t));\n    const fx = this.centerX + scale * Math.cos(t) * this.scaleToWindow;\n    const fy =\n      this.centerY +\n      scale * Math.sin(2 * t) * this.symbolHeightMultiplier / 2 * this.scaleToWindow;\n    return [fx, fy];\n  }\n\n  /**\n   * Populate linksData[] with the links of the graph.\n   * @private\n   */\n  addLinks() {\n    this.linksData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {   \n      // Define the ith link of the symbol.\n      const indexSymbol = i;\n      const indexSymbolNext = (i + 1) % this.numSymbolNodes;\n      this.addLink(indexSymbol, indexSymbolNext, 0, 1);\n           \n      // Link at top of shape, parallel to symbol link, invisible.\n      const vertexShapeTop = this.numVertices / 2;\n      const indexShapeTop = vertexShapeTop * this.numSymbolNodes + i;\n      const indexShapeTopNext =\n        vertexShapeTop * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;\n      this.addLink(indexShapeTop, indexShapeTopNext, 1, 0);\n      \n      // Cross bar, invisible. This pulls the graph in and provides stability. Rather than linking\n      // the cross bar from the link at top of shape to the symbol index, we link it from the shape\n      // node prior. Found that this produces a more interesting graph. Note that previously this\n      // code was in the for loop below and executed when j === 3, but with the same parameters to\n      // addLink(). This produced a slightly different/thicker graph.\n      const vertexShapeAlmostTop = vertexShapeTop - 1;\n      const indexShapeAlmostTop = vertexShapeAlmostTop * this.numSymbolNodes + i;\n      this.addLink(indexShapeAlmostTop, indexSymbol, 1, 0);\n      \n      for (let j = 0; j < this.numVertices; j++) {     \n        // Define the jth link of the shape (e.g., if numVertices is 6, shape is 6-sided polygon).\n        const index = j * this.numSymbolNodes + i;\n        const indexShapeNext = (index + this.numSymbolNodes) % this.numNodes;\n        this.addLink(index, indexShapeNext, 0, 0.7);\n      \n        // Define the jth link of the spiral which spirals around the shapes. Two spirals are used\n        // for better stability.\n        const indexSpiralNext =\n          (j + 1) % this.numVertices * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;            \n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n      }\n    }\n  }\n\n  /**\n   * Add a link of the graph to linksData[].\n   * @param {Number} indexSource The index of the source node of the link.\n   * @param {Number} indexTarget The index of the target node of the link.\n   * @param {Number} The strength of the link, or 0 for use default strength.\n   * @param {Number} opacity The opacity of the link.\n   * @private\n   */\n  addLink(indexSource, indexTarget, strength, opacity) {\n    this.linksData.push({\n      'source': indexSource.toString(),\n      'target': indexTarget.toString(),\n      '_strength' : strength,\n      'opacity' : opacity,\n      '_opacity' : opacity});\n    this.nodesData[indexSource].linkCount++;\n    this.nodesData[indexTarget].linkCount++;\n  }\n\n  /**\n   * Create the d3 simulation of the force-directed graph. Nodes and links must be added before\n   * calling this function.\n   * @private\n   */\n  createSimulation() {\n    // Create a new simulation containing the nodes.\n    this.simulation = d3.forceSimulation(this.nodesData);\n\n    // Add a charge to each node and a centering force.\n    this.simulation\n      .force('charge', d3.forceManyBody()\n        .strength((d) => {\n          return d.index < this.numSymbolNodes ?\n            this.forceManyBodyStrengthSymbolNodes : this.forceManyBodyStrengthNonSymbolNodes;\n        }))\n      .force('center', d3.forceCenter(this.simulationWidth / 2, this.simulationHeight / 2));\n\n    // Add the links, with the strength of the force of a link optionally specified by the link's\n    // _strength.\n    const link_force =  d3.forceLink(this.linksData)\n      .strength((d) => {\n        return d._strength > 0 ?\n          d._strength :\n          1 / Math.min(d.source.linkCount, d.target.linkCount); // default\n      })\n      .distance(this.linkDistance);        \n      this.simulation.force('links', link_force);\n\n    // Call tick() for every tick.\n    this.simulation.on('tick', this.tick);\n\n    // Set the decay rate to zero to have the simulation run forever at the current alpha.\n    this.simulation.alphaDecay(0);\n\n    // Rotate the symbol using a d3 interval.\n    if (this.rotateAmount)\n      d3.interval(this.rotate, this.rotateTimeMs);\n  }\n\n  /**\n   * Set up PixiJS to draw the simulation using WebGL (with Canvas fallback for older platforms).\n   * @private\n   */\n  pixiSetup() {\n    // Disable PIXI console log message.\n    PIXI.utils.skipHello();\n    \n    // Create PixiJS WebGL renderer element to hold the force-directed graph. We set the resolution\n    // to 3, then auto-resize the window back down to the correct size in order to increase the\n    // resolution. With resolution set to 1, it looks low resolution and pixelated.\n    this.stage = new PIXI.Container();\n    this.renderer = PIXI.autoDetectRenderer(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi,\n      {antialias: true, transparent: true, resolution: 3}\n    );\n    this.renderer.autoResize = true;\n    this.pixiResizeRenderer();\n    this.element.appendChild(this.renderer.view);\n\n    // Draw circles for the nodes.\n    this.nodesData.forEach((node) => {\n      node.graphics = new PIXI.Graphics();\n      this.pixiDrawNode(node);\n      this.stage.addChild(node.graphics);\n    });\n\n    // Set up drag/drop.\n    d3.select(this.renderer.view)\n      .call(d3.drag()\n        .container(this.renderer.view)\n        .subject(() => this.simulation.find(d3.event.x, d3.event.y))\n        .on('start', this.dragStarted)\n        .on('drag', this.dragged)\n        .on('end', this.dragEnded));\n\n    // Set up graphics for the links.\n    this.linksGraphics = new PIXI.Graphics();\n    this.stage.addChild(this.linksGraphics);\n  }\n\n  /**\n   * Resize the PixiJS renderer based on the width and height.\n   * @private\n   */\n   pixiResizeRenderer() {\n    this.renderer.resize(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Move the PixiJS position of the specified node.\n   * @param {Object} node The node to move the position of.\n   * @private\n   */\n  pixiMoveNode(node) {\n    let { x, y, graphics } = node;\n    graphics.position =\n      new PIXI.Point(x * this.scaleSimulationToPixi, y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the circle for a node.\n   * @param {Object} node The node to draw the circle for.\n   * @param {Number} selectedNodeMagnitude If this is the currently selected node, indicates the\n   * magnitude percentage (0 - 1.0) of the selection. A value of 0 indicates that this is not the\n   * currently selected node.\n   * @private\n   */\n  pixiDrawNode(node, selectedNodeMagnitude = 0) {\n    let nodeStrokeColor;\n    let nodeFillColor;\n    let nodeOpacity;\n    let nodeRadius;\n    if (selectedNodeMagnitude) {\n      // Scale the node properties based on the magnitude.\n      nodeStrokeColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedStrokeColorArray,\n          this.getNodeStrokeColorArray(node),\n          selectedNodeMagnitude));\n      nodeFillColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedFillColorArray,\n          // DCM 01.mar.2019: Always use same node fill color as stroke color.\n          this.getNodeStrokeColorArray(node),\n          //this.props.logoMode ? this.getNodeStrokeColorArray(node) : this.nodeFillColorArray,\n          selectedNodeMagnitude));\n      nodeOpacity =\n        this.nodeOpacity + (this.nodeOpacitySelected - this.nodeOpacity) * selectedNodeMagnitude;\n      nodeRadius =\n        this.nodeRadius + (this.nodeRadiusSelected - this.nodeRadius) * selectedNodeMagnitude;\n    }\n    else {\n      nodeStrokeColor = this.rgbNumberFromArray(this.getNodeStrokeColorArray(node));\n      // DCM 01.mar.2019: Always use same node fill color as stroke color.\n      nodeFillColor = nodeStrokeColor;\n      //nodeFillColor = this.rgbNumberFromArray(\n      //  this.props.logoMode ?\n      //    this.getNodeStrokeColorArray(node) : this.nodeFillColorArray);\n\n      nodeOpacity = this.nodeOpacity;\n      nodeRadius = this.nodeRadius;\n    }\n\n    node.graphics.clear();\n    node.graphics.lineStyle(\n      this.nodeStrokeWidth * this.scaleSimulationToPixi,\n      nodeStrokeColor,\n      nodeOpacity);\n    node.graphics.beginFill(nodeFillColor, nodeOpacity);\n    if (selectedNodeMagnitude) {\n      node.graphics.filters = [\n        new filters.GlowFilter(\n          5,                          // distance\n          4 * selectedNodeMagnitude,  // outerStrength\n          0,                          // innerStrength\n          nodeStrokeColor,            // color\n          0.5)                        // quality\n      ]\n    }\n    else\n      node.graphics.filters = null;\n    node.graphics.drawCircle(0, 0, nodeRadius * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the line for a link between nodes.\n   * @param {Object} link The link to draw the line for.\n   * @param {Number} linkMagnitude Indicates the magnitude percentage (0 - 1.0) of the link opacity\n   * boost.\n   * @private\n   */\n  pixiDrawLink(link, linkMagnitude) {\n    let { source, target, opacity } = link;\n    const linkOpacity = opacity + 0.25 * (this.props.logoMode ? 1 : linkMagnitude);\n    this.linksGraphics.alpha = linkOpacity;\n    this.linksGraphics.lineStyle(\n      (this.linkStrokeWidth + this.linkStrokeWidthIncreaseAtMagnitude * linkMagnitude) *\n        this.scaleSimulationToPixi,\n      this.rgbNumberFromArray(this.getColorArray(link.index, this.linksData.length)));\n      this.linksGraphics.moveTo(\n        source.x * this.scaleSimulationToPixi, source.y * this.scaleSimulationToPixi);\n      this.linksGraphics.lineTo(\n        target.x * this.scaleSimulationToPixi, target.y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Return the color based on the specified index and number of indices.\n   * @param {Number} index The index to return the color of.\n   * @param {Number} numIndices The total number of indices used to determine the color.\n   * @return {Array} The color arrayof the specified index.\n   * @private\n   */\n  getColorArray(index, numIndices) {\n    // These colors come from the DFINITY logo.\n    const purple = [99,38,132];\n    const pink = [237,30,121];\n    const darkOrange = [241,90,36];\n    const lightOrange = [251,176,59];\n    const blue = [41,171,226];\n\n    // Certain color transitions in the DFINITY logo are small, others are gradual.\n    const transitionPercentSmall = 0.02;\n    const transitionPercentGradual = 0.1;\n    const transitionIndicesSmall = numIndices * transitionPercentSmall;\n    const transitionIndicesGradual = numIndices * transitionPercentGradual;\n\n    // The number of indices of each color was determined by analyzing the DFINITY logo.\n    const lastPurpleIndex = numIndices * 0.15 - transitionIndicesGradual;\n    const lastPinkIndex =\n      lastPurpleIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastDarkOrangeIndex =\n      lastPinkIndex + transitionIndicesSmall + numIndices * 0.15 - transitionIndicesGradual;\n    const lastLightOrangeIndex =\n      lastDarkOrangeIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastBlueIndex =\n      lastLightOrangeIndex + transitionIndicesSmall + numIndices * 0.4 - transitionIndicesSmall;\n\n    // Determine the color based on the color zone the index is in.\n    if (index <= lastPurpleIndex)\n      return purple;\n    else if (index <= lastPurpleIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastPurpleIndex) / transitionIndicesGradual;\n      return this.gradientColor(pink, purple, percentage);\n    }\n    else if (index <= lastPinkIndex)\n      return pink;\n    else if (index <= lastPinkIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastPinkIndex) / transitionIndicesSmall;\n      return this.gradientColor(darkOrange, pink, percentage);\n    }\n    else if (index <= lastDarkOrangeIndex)\n      return darkOrange;\n    else if (index <= lastDarkOrangeIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastDarkOrangeIndex) / transitionIndicesGradual;\n      return this.gradientColor(lightOrange, darkOrange, percentage);\n    }\n    else if (index <= lastLightOrangeIndex)\n      return lightOrange;\n    else if (index <= lastLightOrangeIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastLightOrangeIndex) / transitionIndicesSmall;\n      return this.gradientColor(blue, lightOrange, percentage);\n    }     \n    else if (index <= lastBlueIndex)\n      return blue;\n    else\n    {\n      const percentage = (index - lastBlueIndex) / transitionIndicesSmall;\n      return this.gradientColor(purple, blue, percentage);\n    }\n  }\n\n  /**\n   * Return the gradient color based on the specified parameters.\n   * @param {Array} color1 The RGB array of color 1.\n   * @param {Array} color2 The RGB array of color 2.\n   * @param {Number} percent The percentage of the gradient.\n   * @return {Array} The RGB array of the gradient color.\n   * @private\n   */\n  gradientColor(color1, color2, percent) {\n    const p1 = percent;\n    const p2 = 1 - p1;\n    const rgb = [\n      Math.round(color1[0] * p1 + color2[0] * p2),\n      Math.round(color1[1] * p1 + color2[1] * p2),\n      Math.round(color1[2] * p1 + color2[2] * p2)];\n    return rgb;\n  }\n\n  /**\n   * Return the RGB color number corresponding to the specified RGB color array.\n   * @param {Array} array The RGB array.\n   * @return {Number} The RGB color number.\n   * @private\n   */\n  rgbNumberFromArray(array) {\n    let color = 0;\n    array.forEach(element => {\n      color = (color << 8) + element;\n    });\n    return Number(color);\n  }\n\n/**\n   * Return the stroke color of the specified node.\n   * @param {Object} node The node to return the stroke color of.\n   * @return {Array} The stroke color array of the specified node.\n   * @private\n   */\n  getNodeStrokeColorArray(node) {\n    return this.getColorArray(node.index % this.numSymbolNodes, this.numSymbolNodes)\n  }\n\n/**\n   * Start dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragStarted(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0.3).restart();\n    }\n    d3.event.subject.fx = d3.event.subject.x;\n    d3.event.subject.fy = d3.event.subject.y;\n  }\n\n  /**\n   * Continue dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragged(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    d3.event.subject.fx = d3.event.x;\n    d3.event.subject.fy = d3.event.y;\n  }\n\n  /**\n   * Stop dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragEnded(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0);\n    }\n    d3.event.subject.fx = d3.event.subject._fx;\n    d3.event.subject.fy = d3.event.subject._fy;\n  }\n\n  /**\n   * Update the node and link positions on each tick of the simulation.\n   * @private\n   */\n  tick() {\n    // Move the node positions.\n    this.nodesData.forEach((node) => { this.pixiMoveNode(node); });\n\n    // Animate the selected node to grow larger and change to white, then shrink smaller and change\n    // back to original colors.\n    if (this.newBlockNodeStartTime != null) {\n      const node = this.nodesData[this.selectedNodeIndex];\n      const elapsedMs = new Date() - this.newBlockNodeStartTime;\n      if (elapsedMs > this.newBlockNodeTimerMs) {\n        // Draw a normal node circle.\n        this.pixiDrawNode(node);\n\n        // Disable new block node timer.\n        this.newBlockNodeStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        const selectedNodeMagnitude =\n          (elapsedMs <= this.newBlockNodeTimerMs / 2 ?\n            elapsedMs :\n            this.newBlockNodeTimerMs - elapsedMs) /\n          (this.newBlockNodeTimerMs / 2);\n\n        // Draw a modifified node circle based on the magnitude.\n        this.pixiDrawNode(node, selectedNodeMagnitude);\n      }\n    }\n\n    // Calculate link magnitude.\n    let linkMagnitude = 0;\n    if (this.newBlockLinksStartTime != null) {\n      const elapsedMs = new Date() - this.newBlockLinksStartTime;\n      if (elapsedMs > this.newBlockLinksTimerMs) {\n        // Disable new block links timer.\n        this.newBlockLinksStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        linkMagnitude =\n          elapsedMs <= this.newBlockLinksTimerMs / 3 ?\n            elapsedMs / (this.newBlockLinksTimerMs / 3) :\n            (this.newBlockLinksTimerMs - elapsedMs) /\n              (this.newBlockLinksTimerMs * 2 / 3);\n      }\n    }\n\n    // Draw lines for the links.\n    this.linksGraphics.clear();\n    this.linksData.forEach((link) => {\n      this.pixiDrawLink(link, linkMagnitude);\n    });\n    this.linksGraphics.endFill();\n\n    this.renderer.render(this.stage);\n  }\n\n  /**\n   * Rotate the symbol.\n   * @param {Number} elapsed Elapsed time since the timer became active.\n   * @private\n   */\n  rotate(elapsed) {\n    // In order to increase efficiency, it might be possible to decrease the frequency at which we\n    // rotate, then use d3 transition so that the movement is smooth. The problem is, non-symbol\n    // nodes will still be moving based on the simulation, so it's unknown whether this will\n    // actually improve performance. Since it does not seem like d3.interval() can be counted on to\n    // call this function with precision, this may not be a feasible approach, since if you do not\n    // know when the next call will be, you cannot know how long to make the transition.\n    // See webpage \"D3.selectAll(...).transition() Explained\"\n    // (http://bl.ocks.org/Kcnarf/9e4813ba03ef34beac6e)\n\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      this.rotateOffset += this.rotateAmount;\n      const pos = this.getNodePosition(i);\n      this.nodesData[i].fx = this.nodesData[i]._fx = pos[0];\n      this.nodesData[i].fy = this.nodesData[i]._fy = pos[1];\n    }\n  }\n}\n\nexport default DfinitySymbolD3;\n","/**\n * @file ImageLinkGrid\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Grid\n} from '@material-ui/core';\nimport Fade from 'react-reveal/Fade';\n\n/**\n * This component displays a grid of images that link to other pages.\n */\nclass ImageLinkGrid extends Component {\n  static propTypes = {\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * An array of objects describing the image links, where each object contains:\n     *  src: The <img> src attribute.\n     *  height: The <img> height attribute.\n     *  alt: The <img> alt attribute.\n     *  href: The <a> href attribute.\n     */    \n    imageLinks: PropTypes.array.isRequired,\n    /**\n     * The Material-UI justify prop to apply to each row.\n     * @see See [Material-UI Grid documentation](https://material-ui.com/api/grid/).\n     */\n    justifyRow: PropTypes.string,\n    /**\n     * The amount of space between rows.\n     */\n    marginBetweenRows: PropTypes.number,\n    /**\n     * The number of images per row.\n     */\n    perRow: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a ImageLinkGrid object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.state = {widths: [], maxHeight: 0};\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    this.calculateMaxImageDimensions();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    // Determine whether the props have changed.\n    let arePropsChanged = false;\n    const { imageLinks } = this.props;\n    if (imageLinks.length === prevProps.imageLinks.length) {\n      imageLinks.forEach((imageLink, index) => {\n        if (imageLink.src !== prevProps.imageLinks[index].src ||\n            imageLink.height !== prevProps.imageLinks[index].height)\n          arePropsChanged = true;\n      });\n    }\n    else\n      arePropsChanged = true;\n\n    // Only calculate max image dimensions if props have changed, otherwise we would cause an\n    // infinite loop of updating the state.\n    if (arePropsChanged)\n      this.calculateMaxImageDimensions();\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      className,\n      imageLinks,\n      justifyRow,\n      marginBetweenRows,\n      perRow\n    } = this.props;\n    const { widths } = this.state;\n\n    // Make the container slightly taller than the max image height to account for Grid bug where\n    // there are a few pixels of whitespace added under the image. This '+ 4' can be removed once\n    // the Grid bug is fixed.\n    const containerHeight = this.state.maxHeight + 4;\n\n    // The image grid is an array of rows, where each row is an array of image objects. Creating\n    // a two-dimensional array like this is an extra step, but makes the code below more readable.\n    // TODO: Consider an alternate approach to solve the problem of the center column of 3-item rows\n    // not being centered. Use the same maxWidth for all cells. For cells on left, left align. For\n    // cells on right, right align. For all other cells, center. To do this, we'd likely need a cell\n    // within a cell, so that columns could first be centered relative to the column, then placed\n    // in a second wrapper cell (Grid) aligned either left, right, or center. Would need to test\n    // with different row lengths and numbers of images to see what effect it has on spacing for all\n    // conditions. It seems possible this would look wrong for rows longer than 3, since the spacing\n    // at the edges could be greater because the cell within the cell at the edges is not centered.!!!\n    let imageLinkGrid = [];\n    let maxWidthColumn = Array(perRow).fill(0);\n    for (let i = 0; i < imageLinks.length;) {\n      let row = [];\n      const isShortRow = imageLinks.length - i < perRow;\n      for (var j = 0; j < perRow && i < imageLinks.length; j++) {\n        // Do not update maxWidthColumn[j] if this is a short row (last row with fewer columns).\n        if (!isShortRow && widths[i])\n          maxWidthColumn[j] = Math.max(widths[i], maxWidthColumn[j]);\n        row.push(imageLinks[i++]);\n      }\n      imageLinkGrid.push(row);\n    }\n    \n    return (\n      <div className={className}>\n        {imageLinkGrid.map((row, rowIndex) => {\n          const isShortRow = row.length < perRow;\n          return (\n            <Grid container\n              direction='row'\n              // Always set justify='space-around' for a short row (last row with fewer columns).\n              justify={isShortRow ? 'space-around' : (justifyRow || 'space-between')}\n              alignItems='center'\n              key={rowIndex}\n              style={{ marginTop: (rowIndex && marginBetweenRows) ? marginBetweenRows : 0 }}\n            >\n              {row.map((imageLink, columnIndex) => {\n                const index = rowIndex * perRow + columnIndex;\n                return (\n                  <Grid container\n                    direction='column'\n                    justify='center'\n                    alignItems='center'\n                    key={columnIndex}\n                    // Do not use maxWidthColumn[j] if this is a short row (last row with fewer\n                    // columns).\n                    style={{\n                      width: isShortRow ? widths[index] : maxWidthColumn[columnIndex],\n                      height: containerHeight\n                    }}\n                  >\n                    <Grid item>\n                      <a href={imageLink.href} target='_blank' rel='noopener noreferrer'>\n                        <Fade\n                          bottom\n                          delay={index * 50}\n                          timeout={500}\n                        >\n                          <img\n                            src={imageLink.src}\n                            height={imageLink.height}\n                            alt={imageLink.alt}>\n                          </img>\n                        </Fade>\n                      </a>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /**\n   * Calculate the maximum width and height of all images by loading the images. This allows us to\n   * create Grid containers for the images which are all the same size. An image will be\n   * horizontally and vertically centered in its container.\n   * @private\n   */\n  calculateMaxImageDimensions() {\n    const { imageLinks } = this.props;\n    this.setState({\n      widths: Array(imageLinks.length).fill(0),\n      maxHeight: 0\n    });\n\n    // Calculate the widths[] and maxHeight of the images by loading them.\n    imageLinks.forEach((imageLink, index) => {\n      const img = new Image();\n      img.onload = event => {\n        const { naturalWidth, naturalHeight } = event.currentTarget;\n        if (naturalHeight) {\n          // Scale width from natural width to image link width.\n          const width = imageLink.height / naturalHeight * naturalWidth;\n          this.setState(prevState => ({\n            widths: [\n              ...prevState.widths.slice(0, index),\n              width,\n              ...prevState.widths.slice(index + 1)\n            ],\n            maxHeight: Math.max(imageLink.height, prevState.maxHeight)\n          }));\n        }\n      }\n      // Setting src after we have set the onload event will cause the event to be triggered after\n      // the image has loaded.\n      img.src = imageLink.src;\n    });\n  }\n}\n\nexport default ImageLinkGrid;\n","export default __webpack_public_path__ + \"static/media/banner-x-horizon.9056e3df.png\";","export default __webpack_public_path__ + \"static/media/dfinity-explorer-logo-large.e727fdd1.png\";","export default __webpack_public_path__ + \"static/media/dfinity-logo-dark-mode.833a5708.png\";","export default __webpack_public_path__ + \"static/media/dfinity-logo-light-mode.4b1dc033.png\";","export default __webpack_public_path__ + \"static/media/github-octocat.f7138e25.png\";","export default __webpack_public_path__ + \"static/media/material-ui-logo.9f19218a.png\";","export default __webpack_public_path__ + \"static/media/nomics-logo-dark-mode.5b14d685.png\";","export default __webpack_public_path__ + \"static/media/nomics-logo-light-mode.b7e4e88c.png\";","export default __webpack_public_path__ + \"static/media/react-logo-text.da36e367.png\";","export default __webpack_public_path__ + \"static/media/styled-components-logo-dark-mode.f47c6a86.png\";","export default __webpack_public_path__ + \"static/media/styled-components-logo-light-mode.44706a78.png\";","/**\n * @file AboutPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { Parallax } from 'react-parallax';\nimport Fade from 'react-reveal/Fade';\nimport Flip from 'react-reveal/Flip';\nimport LightSpeed from 'react-reveal/LightSpeed';\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\nimport TrackablePage from '../TrackablePage/TrackablePage';\nimport DfinitySymbolD3 from '../DfinitySymbolD3/DfinitySymbolD3';\nimport ImageLinkGrid from '../ImageLinkGrid/ImageLinkGrid';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport bannerXHorizon from './banner-x-horizon.png';\nimport dfinityExplorerLogo from './dfinity-explorer-logo-large.png';\nimport dfinityLogoDark from './dfinity-logo-dark-mode.png';\nimport dfinityLogoLight from './dfinity-logo-light-mode.png';\nimport githubOctocat from './github-octocat.png';\nimport materialUiLogo from './material-ui-logo.png';\nimport nomicsLogoDark from './nomics-logo-dark-mode.png';\nimport nomicsLogoLight from './nomics-logo-light-mode.png';\nimport reactLogo from './react-logo-text.png';\nimport styledComponentsLogoDark from './styled-components-logo-dark-mode.png';\nimport styledComponentsLogoLight from './styled-components-logo-light-mode.png';\n\nconst PaperParallax = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorBodyBackground};\n    /* Allows shadow to overlap the element below it. */\n    position: relative;\n  }\n`;\n\nconst GridParallax = styled(Grid)`\n  && {\n    height: 280px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 200px;       \n      `\n    }\n  }\n`;\n\nconst TypographyParallax = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 200;\n    color: ${props => props.theme.colorAboutHeaderText};  \n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `)\n    }\n  }\n`;\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-top: 96px;\n    padding-bottom: 96px;\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: 64px;\n        padding-bottom: 64px;\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n      `)\n    }\n  }\n`;\n\nconst GridSectionPrimary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundPrimary};\n  }\n`;\n\nconst GridSectionSecondary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundSecondary};\n  }\n`;\n\nconst GridItem = styled(Grid)`\n  && {\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_LG/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_MD/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridImageLeft = styled(GridItem)`\n  && {\n    order: 1;\n  }\n`;\n\nconst GridImageRight = styled(GridItem)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 1;\n      `\n    }\n  }\n`;\n\nconst GridSymbolLeft = styled(GridImageLeft)`\n  && {\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-top: -32px;\n        margin-bottom: -32px;     \n      `\n    }\n  }\n`;\n\nconst GridText = styled(GridItem)`\n  && {\n    ${({ breakpoint }) =>\n    (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        margin-top: 48px;\n      `\n    }\n  }\n`;\n\nconst GridTextLeft = styled(GridText)`\n  && {\n    order: 1;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst GridTextRight = styled(GridText)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst TypographyHeading = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 300;\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};       \n      `\n    }\n  }\n`;\n\n// From the Material Design documentation: \"The ideal length for legibility of body copy is 40-60\n// characters per line.\"\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\nconst StyledA = styled.a`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    text-decoration: none;\n    &:hover {\n      cursor: pointer;\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst ImgSection = styled.img`\n  && {\n    max-width: 100%;\n    max-height: 300px;\n  }\n`;\n\nconst SpanHeart = styled.span`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n  }\n`;\n\nconst PaperTwitter = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorAboutTwitterBackground};\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        max-width: 640px;\n        margin: auto;\n      `\n    }\n  }\n`;\n\nconst ImageLinkGridThanks = styled(ImageLinkGrid)`\n  && {\n    margin-top: ${Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT/2 + 'px'};\n  }\n`;\n\n/**\n * Component for the about page.\n */\nclass AboutPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getHeader()}\n        {this.getSectionMission()}\n        {this.getSectionOpenSource()}\n        {this.getSectionCommunity()}\n        {this.getSectionContributors()}\n        {this.getSectionThanks()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the header based on the current breakpoint.\n   * @return {Object} The elements for the header based on the current breakpoint.\n   * @private\n   */\n  getHeader()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <PaperParallax elevation={2}>\n        <Fade timeout={1200}>\n          <Parallax bgImage={bannerXHorizon} bgImageAlt='banner' bgImageStyle={{marginTop: '-223px'}} strength={370}>\n            <GridParallax container direction='column' justify='center' alignItems='flex-start' breakpoint={breakpoint}>\n              <Grid item>\n                <TypographyParallax breakpoint={breakpoint}>\n                  A dashboard for the Internet Computer.\n                  <br />\n                  Open source, community built.\n                </TypographyParallax>\n              </Grid>\n            </GridParallax>\n          </Parallax>\n        </Fade>\n      </PaperParallax>\n    );\n  }\n\n  /**\n   * Return the elements for the Mission section based on the current breakpoint.\n   * @return {Object} The elements for the Mission section based on the current breakpoint.\n   * @private\n   */\n  getSectionMission()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridSymbolLeft item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <DfinitySymbolD3\n              width={this.getDfinitySymbolD3Width()}\n              isThemeDark={isThemeDark}\n            />\n          </Grid>\n        </GridSymbolLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Mission\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Our mission is to provide a bridge between you and the '}\n              {'Internet Computer, allowing you to easily search for and retrieve information '}\n              {'which is useful in a format that is understandable, with everything you want to '}\n              {'know right at your fingertips.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              <StyledA href={Constants.URI_ABOUT_DFINITY} target='_blank' rel='noopener noreferrer'>DFINITY</StyledA>\n              {' once had a goal of building their foundation into a “NASA for decentralization”. '}\n              {'There have in fact been '}\n              <StyledA href={Constants.URI_NASA_EXPLORER} target='_blank' rel='noopener noreferrer'>89 NASA “Explorer” missions</StyledA>\n              {' since 1958, carrying a wide variety of scientific investigations. We want DFINITY '}\n              {'Explorer to be the perfect vehicle to explore the Internet Computer universe.'}\n              &nbsp;&nbsp;🚀\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the elements for the Open Source section based on the current breakpoint.\n   * @return {Object} The elements for the Open Source section based on the current breakpoint.\n   * @private\n   */\n  getSectionOpenSource()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Open, Transparent, Trusted\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is an open-source project under the '}\n              <StyledA href={Constants.URI_GITHUB_MIT_LICENSE} target='_blank' rel='noopener noreferrer'>MIT license</StyledA>\n              {', providing transparency, reliability, and security.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'We believe that all dashboards of public blockchains should be open source. '}\n              {'If you’re going to trust a dashboard to provide timely, accurate, and '}\n              {'uncensored information, the code should be open for all to see.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Flip right timeout={800}>\n              <ImgSection\n                src={dfinityExplorerLogo}\n                alt='logo'>\n              </ImgSection>\n            </Flip>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Community section based on the current breakpoint.\n   * @return {Object} The elements for the Community section based on the current breakpoint.\n   * @private\n   */\n  getSectionCommunity()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    const theme = isThemeDark ? 'dark' : 'light';\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridImageLeft item breakpoint={breakpoint}>\n          <Fade timeout={2000}>\n            {/* Twitter card looks better at elevation 2 than 1, since card/body are same color. */}\n            <PaperTwitter elevation={2} breakpoint={breakpoint}>\n              <TwitterTimelineEmbed\n                sourceType='profile'\n                screenName='dfinityexplorer'\n                theme={theme}\n                options={{height: 432}}\n                // Setting key here is a bit of a hack. Since TwitterTimelineEmbed only uses the theme\n                // prop when it mounts, the TwitterTimelineEmbed theme will not change if the user changes\n                // the theme after the page has loaded. By setting key to the theme string, we can force a\n                // remount of TwitterTimelineEmbed when the theme changes, so that it picks up the change\n                // to its theme prop. \n                key={theme}\n                noFooter\n                transparent\n              />\n            </PaperTwitter>\n          </Fade>\n        </GridImageLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Community\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Follow '}\n              <StyledA href={Constants.URI_TWITTER_DFINITY_EXPLORER} target='_blank' rel='noopener noreferrer'>@dfinityexplorer</StyledA>\n              {' on Twitter to learn about the latest Internet Computer-related news, videos, and events.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'Learn more about our project on '}\n              <StyledA href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT} target='_blank' rel='noopener noreferrer'>GitHub</StyledA>\n              {'.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n  \n  /**\n   * Return the elements for the Contributors section based on the current breakpoint.\n   * @return {Object} The elements for the Contributors section based on the current breakpoint.\n   * @private\n   */\n  getSectionContributors()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container\n        direction='row'\n        justify='space-between'\n        alignItems='center'\n        breakpoint={breakpoint}\n      >\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Contributors\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is a cooperative effort, made with '}\n              <SpanHeart>♥</SpanHeart>\n              {' by '}\n              <StyledA href={Constants.URI_GITHUB_DYLAN} target='_blank' rel='noopener noreferrer'>@dylancm4</StyledA>\n              {' and a friendly bunch of '}\n              <StyledA href={Constants.URI_GITHUB_CONTRIBUTORS} target='_blank' rel='noopener noreferrer'>contributors</StyledA>\n              {' from the IC community. We are passionate about the Internet Computer and we '}\n              {'want to build things to help it to succeed.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <LightSpeed right timeout={800}>\n              <ImgSection\n                src={githubOctocat}\n                alt='GitHub Octocat'>\n              </ImgSection>\n            </LightSpeed>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Thanks section based on the current breakpoint.\n   * @return {Object} The elements for the Thanks section based on the current breakpoint.\n   * @private\n   */\n  getSectionThanks() {\n    // Possibly add: Recharts!!!\n    const { breakpoint, isThemeDark } = this.props;\n    \n    // Adjust heights based on the perceived size of images (i.e., some images contain smaller logos\n    // to make room for the text, so those images need to be enlarged).\n    const reactHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.3;\n    const styledComponentsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.4;\n    const materialUiHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT;\n    const nomicsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 0.9;\n    const dfinityHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.2;\n\n    // Define the image link objects for the ImageLinkGrid.\n    const imageLinks = [\n      {\n        src: reactLogo,\n        height: reactHeight,\n        alt: 'React logo',\n        href: Constants.URI_ABOUT_REACT\n      },\n      {\n        src: isThemeDark ? styledComponentsLogoDark : styledComponentsLogoLight,\n        height: styledComponentsHeight,\n        alt: 'Styled Components logo',\n        href: Constants.URI_ABOUT_STYLED_COMPONENTS\n      },\n      {\n        src: materialUiLogo,\n        height: materialUiHeight,\n        alt: 'Material-UI logo',\n        href: Constants.URI_ABOUT_MATERIAL_UI\n      },\n      {\n        src: isThemeDark ? nomicsLogoDark : nomicsLogoLight,\n        height: nomicsHeight,\n        alt: 'Nomics logo',\n        href: Constants.URI_ABOUT_NOMICS\n      },\n      {\n        src: isThemeDark ? dfinityLogoDark : dfinityLogoLight,\n        height: dfinityHeight,\n        alt: 'DFINITY logo',\n        href: Constants.URI_ABOUT_DFINITY\n      }\n    ];\n\n    // Calculate images per row based on the current breakpoint.\n    let imagesPerRow;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        imagesPerRow = 1;\n        break;\n      case Breakpoints.SM:\n        imagesPerRow = 2;\n        break;\n      default:\n        imagesPerRow = 3;\n        break;\n    }\n\n    return (\n      <GridSectionPrimary container\n        direction='column'\n        justify='flex-start'\n        alignItems='stretch'\n        breakpoint={breakpoint}\n      >\n        <Grid container direction='row' justify='center' alignItems='center'>\n          <Grid item>\n            <Fade bottom timeout={500}>\n              <TypographyHeading breakpoint={breakpoint}>Special thanks to:</TypographyHeading>\n            </Fade>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ImageLinkGridThanks\n            imageLinks={imageLinks}\n            perRow={imagesPerRow}\n            justifyRow={breakpoint === Breakpoints.XS ? 'center' : 'space-between'}\n            marginBetweenRows={Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT / 2}\n          />\n        </Grid>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @return {Number} The width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @private\n   */\n  getDfinitySymbolD3Width() {\n    const { breakpoint, isDesktopDrawerOpen } = this.props;\n    const contentWidth =  window.innerWidth - (isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0);\n\n    let width;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_XS*2;\n        break;\n      case Breakpoints.SM:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_SM*2;\n        break;\n      case Breakpoints.MD:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_MD*3/2;\n        // This is a bit of a hack, but we scale the symbol slightly larger because it does not fill\n        // its window all the way to the edges.\n        width *= 1.2;\n        break;\n      default:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_LG*3/2;\n        width *= 1.2;\n        break;\n    }\n    return width;\n  }\n}\n\nexport default AboutPage;\n","export default __webpack_public_path__ + \"static/media/dfinity-explorer-logo.fedaf93e.png\";","/**\n * @file DEAppBar\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport {\n  AppBar,\n  Divider,\n  Drawer,\n  Fade,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  SwipeableDrawer,\n  SvgIcon,\n  Toolbar,\n  Typography,\n  Zoom\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport RevealFade from 'react-reveal/Fade';\nimport RevealZoom from 'react-reveal/Zoom';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent'\nimport {\n  Breakpoints,\n  getBreakpoint,\n  isBreakpointLessOrEqualTo,\n  isBreakpointDesktop\n} from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport dfinityExplorerLogo from './dfinity-explorer-logo.png';\n\nconst StyledAppBar = styled(AppBar)`\n  && {\n    background: ${props => props.theme.colorAppBarBackground};\n    /* AppBar is above Drawer */\n    z-index: ${zIndex.drawer + 1};\n  }\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  && {\n    padding-left: 12px;\n    padding-right: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: 4px;\n        padding-right: 4px;\n      `\n    }\n  }\n`;\n\nconst ImgProductIcon = styled.img`\n  && {\n    margin-left: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 0px;\n      `\n    }\n  }\n`;\n\n// Specify font-size in px rather than rem for app name, since it should not change based on browser\n// settings.\nconst TypographyAppName = styled(Typography)`\n  && {\n    margin-top: 1px;\n    font-family: 'Istok Web', sans-serif;\n    font-weight: bold;\n    font-size: 20px;\n    user-select: none;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: 14px;\n      `\n    }\n  }\n`;\n\nconst TypographyDfinity = styled(TypographyAppName)`\n  && {\n    margin-left: 12px;\n    letter-spacing: 12px;\n    color: ${props => props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 8.4px;\n        letter-spacing: 8.4px;\n      `\n    }\n  }\n`;\n\n/**\n * A separate div is used for the border between DFINITY and Explorer, so that it can be\n * animated. The height is based on TypographyAppName font-size, and matches exactly what\n * \"border-right: 1px solid\" in TypographyDfinity would look like.\n */\nconst TypographyBorder = styled.div`\n  && {\n    width: 0px;\n    height: 29px;\n    border-right: ${props => '1px solid ' + props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 20.3px;\n      `\n    }\n  }\n`;\n\nconst TypographyExplorer = styled(TypographyAppName)`\n  && {\n    margin-left: 14px;\n    letter-spacing: 7.5px;\n    color: ${props => props.theme.colorAppBarExplorerText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 9.8px;\n        letter-spacing: 5.25px;\n      `\n    }\n  }\n`;\n\n/* Rebranding Experimental - KEEP\n// Internet Computer | Explorer\nconst TypographyDfinity = styled(TypographyAppName)`\n  && {\n    margin-left: 20px;\n    margin-right: 7px;\n    letter-spacing: 3px;\n    color: ${props => props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 8.4px;\n        letter-spacing: 3px;\n      `\n    }\n  }\n`;\n\nconst TypographyExplorer = styled(TypographyAppName)`\n && {\n   margin-left: 10px;\n   letter-spacing: 3px;\n   color: ${props => props.theme.colorAppBarExplorerText};\n   ${({ breakpoint }) =>\n     breakpoint === Breakpoints.XS && `\n       margin-left: 9.8px;\n       letter-spacing: 3px;\n     `\n   }\n }\n`;\n\n// INTERNET COMPUTER | EXPLORER\nconst TypographyDfinity = styled(TypographyAppName)`\n  && {\n    margin-left: 12px;\n    margin-right: 8px;\n    //letter-spacing: 1px;\n    color: ${props => props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 8.4px;\n        letter-spacing: 8.4px;\n      `\n    }\n  }\n`;\n\nconst TypographyExplorer = styled(TypographyAppName)`\n && {\n   margin-left: 10px;\n   //letter-spacing: 1px;\n   color: ${props => props.theme.colorAppBarExplorerText};\n   ${({ breakpoint }) =>\n     breakpoint === Breakpoints.XS && `\n       margin-left: 9.8px;\n       letter-spacing: 5.25px;\n     `\n   }\n }\n`;\n\n*/\n\nconst StyledIconButton = styled(IconButton)`\n  && {\n    color: ${props => props.theme.colorAppBarTextButton};\n\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorAppBarTextButton};\n      }\n    }\n  }\n`;\n\nconst StyledMenuIcon = styled(MenuIcon)`\n  && {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nconst StyledSwipeableDrawer = styled(({ ...other }) => (\n  <SwipeableDrawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n  }\n`;\n\nconst StyledDrawer = styled(({ ...other }) => (\n  <Drawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background:\n      ${props => props.isdesktopdrawertransparent === 'true' ?\n        props.theme.colorDrawerBackgroundTransparent : props.theme.colorDrawerBackground};\n    border-right:\n      ${props => props.theme.isDark ? `1px solid ${props.theme.colorBodyBackground}` : '0px'};\n  }\n`;\n\nconst StyledDivider = styled(Divider)`\n  && {\n    background: ${props => props.theme.colorDrawerDivider};\n  }\n`;\n\nconst DrawerListItemIcon = styled(ListItemIcon)``;\n\nconst DrawerSvgIcon = styled(SvgIcon)`\n  && {\n    padding-left: 2px;\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nconst DrawerListItemText = styled(({ ...other }) => (\n  <ListItemText {...other} classes={{ primary: 'primary' }} />\n))``;\n\nconst DrawerListItem = styled(ListItem)`\n  && {\n    padding-top: 9.5px;\n    padding-bottom: 9.5px;\n    ${DrawerListItemIcon} {\n      margin-left: 8px;\n      color: ${\n        props => props.selected ?\n          props.theme.colorDrawerIconTextSelected :\n          props.theme.colorDrawerIcon\n      };\n    }\n    ${DrawerListItemText} {\n      margin-left: -8px;\n      & .primary {\n        font-family: ${Constants.FONT_PRIMARY};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_BUTTON};\n        font-weight: ${props => props.selected ? 600 : 400};\n        color: ${\n          props => props.selected ?\n            props.theme.colorDrawerIconTextSelected :\n            props.theme.colorDrawerText\n        };\n      }\n    }\n  }\n`;\n\n// DCM 2019-02-02: I tried for a few hours to change the \"selected\" background color of a ListItem\n// using styled-components, but I was unsuccessful even though it seems like the code below should\n// work. I was able to change the color using the Material-UI withStyles() technique of styling:\n// https://stackoverflow.com/questions/50371315/how-to-override-material-ui-menuitem-selected-background-color\n// However, that technique does not have access to props, so it would not work well with the way\n// we're currently doing theming. There is likely a way to get this working in a way that does not\n// use styled-components, but the \"selected\" background color is not important enough to spend the\n// time on this issue right now.\n/*const DrawerListItem = styled(({ ...other }) => (\n  <ListItem classes={{ selected: 'selected' }} {...other} />\n))`\n  && {\n    background: pink;\n    &:focus {\n      background: cyan;\n    }\n    &:hover {\n      background: red;\n    }\n    // All of the above colors work, but the \"selected\" background color does not work.\n    & .selected {\n      background: blue !important;\n    }\n  }\n`;*/\n\n/**\n * The App Bar provides content and actions related to the current screen.\n */\nclass DEAppBar extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * Callback fired when the App Bar is resized.\n     */\n    handleAppBarResize: PropTypes.func,\n    /**\n     * Callback fired when the desktop drawer (large screens) menu button is clicked.\n     */\n    handleDesktopDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * Callback fired when the mobile drawer (small screens) menu button is clicked.\n     */\n    handleMobileDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True if the desktop drawer (large screens) should be transparent.\n     */    \n    isDesktopDrawerTransparent: PropTypes.bool.isRequired,\n    /**\n     * True if the mobile drawer (small screens) is open.\n     */    \n    isMobileDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired,\n    /**\n     * Reference to the <HashRouter> element.\n     */\n    routerRef: PropTypes.object\n  };\n\n  /**\n   * Create a DEAppBar object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.toolbarDivRef = React.createRef();\n\n    // Bind to make 'this' work in callbacks.\n    this.isActiveRoute = this.isActiveRoute.bind(this);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <Fragment>\n        {/* Toolbar shim to compensate for AppBar position='fixed'. */}\n        <div ref={this.toolbarDivRef}>\n          <Toolbar />\n        </div>\n        <Fade in={true} timeout={200} mountOnEnter unmountOnExit>\n          <StyledAppBar elevation={2}>\n            {this.getToolbarDefaultContent()}\n          </StyledAppBar>\n        </Fade>\n        {this.getDrawer()}\n      </Fragment>\n    );\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    super.handleWindowResize();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n\n    // Close the mobile drawer (small screens) when screen is resized larger, so that it does not\n    // reappear when the screen is resized smaller.\n    if (isBreakpointDesktop() && this.props.isMobileDrawerOpen)\n      this.props.handleMobileDrawerMenuClick();\n  }\n\n  /**\n   * Return the elements for the toolbar based on the current breakpoint.\n   * @return {Object} The elements for the toolbar based on the current breakpoint.\n   * @private\n   */\n  getToolbarDefaultContent() {\n    const breakpoint = getBreakpoint();\n    return (\n      <StyledToolbar breakpoint={breakpoint}>\n        <Grid container alignItems='center' wrap='nowrap'>\n          <Grid item>\n            {this.getMenuButton()}\n          </Grid>\n          {this.getAppTitle()}\n        </Grid>\n      </StyledToolbar>\n    );\n  }\n\n  /**\n   * Return the elements for the menu button on the current breakpoint.\n   * @return {Object} The elements for the menu button based on the current breakpoint.\n   * @private\n   */\n  getMenuButton() {\n    const { handleMobileDrawerMenuClick, handleDesktopDrawerMenuClick } = this.props;\n    return (\n      <Zoom in={true} timeout={300}>\n        <StyledIconButton\n          onClick={\n            isBreakpointDesktop() ? handleDesktopDrawerMenuClick : handleMobileDrawerMenuClick\n          }\n        >\n          <StyledMenuIcon />\n        </StyledIconButton>\n      </Zoom>\n    );\n  }\n\n  /**\n   * Return the elements for the app title based on the current breakpoint.\n   * @return {Object} The elements for the app title based on the current breakpoint.\n   * @private\n   */\n  getAppTitle() {\n    const breakpoint = getBreakpoint();\n    return (\n      <Link\n        style={{ textDecoration: 'none' }}\n        to='/'\n      >\n        <Grid container alignItems='center' justify='flex-start' wrap='nowrap'>\n          <RevealFade timeout={500}>\n            <Grid item>\n              <ImgProductIcon\n                src={dfinityExplorerLogo}\n                height={this.getProductIconHeight()}\n                alt='logo'\n                breakpoint={breakpoint}\n              >\n              </ImgProductIcon>\n            </Grid>\n            <Grid item>\n              <TypographyDfinity breakpoint={breakpoint}>DFINITY</TypographyDfinity>\n            </Grid>\n            <RevealZoom timeout={350}>\n              <Grid item>\n                <TypographyBorder breakpoint={breakpoint} />\n              </Grid>\n            </RevealZoom>\n            <Grid item>\n              <TypographyExplorer breakpoint={breakpoint}>ExpIorer</TypographyExplorer>\n            </Grid>\n          </RevealFade>\n        </Grid>\n      </Link>\n    );\n  }\n\n  /**\n   * Return the height of the product icon based on the current breakpoint.\n   * @return {Number} The height of the product icon based on the current breakpoint.\n   * @private\n   */\n  getProductIconHeight() {\n    if (isBreakpointLessOrEqualTo(Breakpoints.XS))\n      return 23.8;\n    else\n      return 34;\n  }\n\n  /**\n   * Return the elements for the drawer based on the current breakpoint.\n   * @return {Object} The elements for the drawer based on the current breakpoint.\n   * @private\n   */\n  getDrawer() {\n    // The Material Design documentation states: \"Modal drawer: In a responsive layout grid, at a\n    // defined minimum breakpoint of at least 600dp width, a standard drawer should be replaced with\n    // a modal drawer.\" We use a modal drawer for breakpoints xs and sm (i.e., up to 960px).\n    const {\n      handleMobileDrawerMenuClick,\n      isDesktopDrawerOpen,\n      isDesktopDrawerTransparent,\n      isMobileDrawerOpen\n    } = this.props;\n    if (isBreakpointDesktop()) {\n      return (\n        <StyledDrawer\n          variant='persistent'\n          open={isDesktopDrawerOpen}\n          isdesktopdrawertransparent={isDesktopDrawerTransparent ? 'true' : 'false'}\n        >\n          {this.getDrawerContent()}\n        </StyledDrawer>\n      );\n    }\n    else {\n      return (\n        <StyledSwipeableDrawer\n          open={isMobileDrawerOpen}\n          onOpen={handleMobileDrawerMenuClick}\n          onClose={handleMobileDrawerMenuClick}\n        >\n          <div onClick={handleMobileDrawerMenuClick}>\n            {this.getDrawerContent()}\n          </div>\n        </StyledSwipeableDrawer>\n      );\n    }  \n  }\n\n  /**\n   * Return the elements for the drawer content based on the current breakpoint.\n   * @return {Object} The elements for the drawer content based on the current breakpoint.\n   * @private\n   */\n  getDrawerContent() {\n    /* Use constants for paths such as 'about' everywhere in code!!! */\n    return (\n      <Fragment>\n        {/* Shim to compensate for AppBar position='fixed'. */}\n        <Toolbar/>\n        <List>\n          {/* Could change this to be more generic by calling map() on an array of route objects\n              which contain info such as: path, menu text, and icon.\n              See: https://stackoverflow.com/questions/50801093/material-ui-drawer-selection-how-to-route\n          */}\n          <DrawerListItem button component={Link} to='/' selected={this.isActiveRoute('/')}>\n            <DrawerListItemIcon>\n              <HomeIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Home' selected={this.isActiveRoute('/')} />\n          </DrawerListItem>\n          <DrawerListItem button component={Link} to='/datacenters' selected={this.isActiveRoute('/datacenters')}>\n            <DrawerListItemIcon>\n              <DrawerSvgIcon>\n                <path d={Constants.ICON_SVG_PATH_DATA_CENTERS} />\n              </DrawerSvgIcon>\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Data Centers' />\n          </DrawerListItem>\n          <DrawerListItem button component={Link} to='/txs' selected={this.isActiveRoute('/txs')}>\n            <DrawerListItemIcon>\n              <SvgIcon>\n                <path d={Constants.ICON_SVG_PATH_MPS} />\n              </SvgIcon>\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Transactions' />\n          </DrawerListItem>\n          <StyledDivider />\n          <DrawerListItem button component={Link} to='/about' selected={this.isActiveRoute('/about')}>\n            <DrawerListItemIcon>\n              <InfoIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='About' />\n          </DrawerListItem>\n        </List>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Return true if the specified route matches the current route, false otherwise.\n   * @param {String} routeName The name of the route to check.\n   * @return {Boolean} True if the specified route matches the current route, false otherwise.\n   * @private\n   */\n  isActiveRoute(routeName) {\n    return this.props.location.pathname === routeName;\n  }\n};\n\nexport default withRouter(DEAppBar);","/**\n * @file Footer\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Checkbox,\n  Grid,\n  Icon,\n  IconButton,\n  SvgIcon,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\nimport { Breakpoints, getBreakpoint } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst FooterToolbar = styled(Toolbar)`\n  && {\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: ${Constants.FOOTER_HEIGHT + 'px'};\n    padding-left: 0px;\n    padding-right: 0px;\n    text-align: center;\n    background: ${props => props.theme.colorFooterBackground};\n    color: ${props => props.theme.colorFooterTextIcon};\n  }\n`;\n\nconst OneThirdGrid = styled(Grid)`\n  && {\n    width: 33.33%;\n  }\n`;\n\nconst LeftThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-left: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst RightThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-right: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-right: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst FooterTypography = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: 12px;\n  }\n`;\n\nconst FooterA = styled.a`\n  && {\n    color: ${props => props.theme.colorFooterTextIcon};\n    text-decoration: underline;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst AwesomeIconButtonGrid = styled(Grid)`\n  && {\n    // Look into why this is needed!!!\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        min-width: 35px;\n      `\n    }\n  }\n`;\n\nconst AwesomeIconButton = styled(IconButton)`\n  && {\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: inherit;\n      }\n    }\n  }\n`;\n\nconst AwesomeIcon = styled(Icon)`\n  && {\n    font-size: 20px;\n  }\n`;\n\nconst ThemeCheckbox = styled(Checkbox)`\n  && {\n    width: 26px;\n    height: 26px;\n    color: ${props => props.theme.colorFooterTextIcon};\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorFooterTextIcon};\n      }\n    }\n  }\n`;\n\nconst ThemeSvgIcon = styled(SvgIcon)`\n  && {\n    margin-top: -1px;\n    font-size: 17px;\n  }\n`;\n\n/**\n * The Footer provides information related to the current screen.\n */\nclass Footer extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * Callback fired when the value of the theme checkbox changes.\n     */    \n    handleThemeChange: PropTypes.func.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    loadCSS(Constants.URI_CDN_FONT_AWESOME, document.querySelector('#insertion-point-jss'));\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const breakpoint = getBreakpoint();\n    return (\n      <FooterToolbar>\n        <LeftThirdGrid\n          container\n          direction='row'\n          justify='flex-start'\n          alignItems='center'\n          breakpoint={breakpoint}\n        >\n          <Grid item>\n            <FooterTypography color='inherit'>\n              {this.getCopyrightText()}\n            </FooterTypography>\n          </Grid>\n        </LeftThirdGrid>\n        <OneThirdGrid container direction='column' justify='center' alignItems='center'>\n          { this.props.location.pathname === '/' &&\n            <Grid item>\n              <FooterTypography color='inherit'>Site Under Development</FooterTypography>\n              <FooterTypography color='inherit'>\n                {'('}\n                <FooterA href={Constants.URI_ABOUT_NOMICS} target='_blank' rel='noopener noreferrer'>\n                  {this.getNomicsText()}\n                </FooterA>\n                {')'}\n              </FooterTypography>\n            </Grid>\n          }\n        </OneThirdGrid>\n        <RightThirdGrid\n          container direction='row'\n          justify='flex-end'\n          alignItems='center'\n          wrap='nowrap'\n          breakpoint={breakpoint}\n        >\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_TWITTER_DFINITY_EXPLORER}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-twitter' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-github' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <ThemeCheckbox\n              color='default'\n              checked={this.props.isThemeDark}\n              icon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_LIGHT} />\n                </ThemeSvgIcon>\n              }\n              checkedIcon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_DARK} />\n                </ThemeSvgIcon>\n              }\n              onChange={this.props.handleThemeChange}\n            />\n          </AwesomeIconButtonGrid>\n        </RightThirdGrid>\n      </FooterToolbar>\n    );\n  }\n\n  /**\n   * Return the copyright text.\n   * @return {String} the copyright text.\n   * @private\n   */\n   getCopyrightText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return '© 2021 IC Explorer';\n      case Breakpoints.SM:\n        return '© 2021 Internet Computer Explorer';\n      default:\n        return '© 2021 Internet Computer Explorer | All rights reserved';\n    }\n  }\n\n  /**\n   * Return the Nomics attribution link text.\n   * @return {String} The Nomics attribution link text.\n   * @private\n   */\n  getNomicsText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return 'Pricing Data By Nomics';\n      default:\n        return 'Crypto Market Cap & Pricing Data Provided By Nomics';\n    }\n  }\n};\n\nexport default withRouter(Footer);\n","/**\n * @file App\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, an dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport {\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport ReactGA from 'react-ga';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Grid\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { GlobalStyle, themeLight, themeDark } from './theme/globalStyle';\nimport HomePage from './Components/HomePage/HomePage';\nimport DataCentersPage from './Components/DataCentersPage/DataCentersPage';\nimport TransactionPage from './Components/TransactionPage/TransactionPage';\nimport TransactionsPage from './Components/TransactionsPage/TransactionsPage';\nimport AboutPage from './Components/AboutPage/AboutPage';\nimport DEAppBar from './Components/DEAppBar/DEAppBar';\nimport Footer from './Components/Footer/Footer';\nimport Constants from './constants';\nimport { getBreakpoint, isBreakpointDesktop } from './utils/breakpoint';\nimport { Breakpoints } from './utils/breakpoint';\n\n// Initialize the react-ga library. We do not need user consent to be GDPR compliant. According to\n// Google: \"When using Google Analytics Advertising Features, you must also comply with the European\n// Union User Consent Policy.\" Advertising Features are not enabled for DFINITY Explorer. Under the\n// GDPR, an IP address is considered Personally Identifiable Information (PII), so we anonymize the\n// IP addresses sent to Google Analytics.\nReactGA.initialize(Constants.GOOGLE_ANALYTICS_TRACKING_ID);\nReactGA.set({ anonymizeIp: true });\n\nconst ContentDiv = styled.div`\n  && {\n    // Drawer open/close transition applies to all content within the div whenever margin-left\n    // changes.\n    transition: ${props =>\n      'margin-left ' +\n      (props.isDesktopDrawerOpen ? duration.enteringScreen : duration.leavingScreen) +\n      'ms ' +\n      easing.easeInOut};\n    // For the Data Centers page, we always use the full width (i.e., margin-left: '0px'), except\n    // for the special case of breakpoint SM with the desktop drawer open, in which case we set\n    // margin-left to Constants.DRAWER_WIDTH, so that the globe fills the width to the right of the\n    // desktop drawer.\n    ${({ breakpoint, isDesktopDrawerOpen, isPageDataCenters }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        margin-left: ${(isDesktopDrawerOpen && !isPageDataCenters) ? Constants.DRAWER_WIDTH + 'px' : '0px'};\n      `) ||\n      ((breakpoint === Breakpoints.SM) && `\n        margin-left: ${isDesktopDrawerOpen ? Constants.DRAWER_WIDTH + 'px' : '0px'};\n      `) ||\n      ((breakpoint === Breakpoints.XS) && `\n        margin-left: 0px;\n      `)\n    }\n  }\n`;\n\nconst ContentGrid = styled(Grid)`\n  && {\n    /* The height of the body + footer is the total viewport height - App Bar height. */\n    min-height: calc(100vh - ${props => props.appbarheight + 'px'});\n  }\n`;\n\nconst FooterDiv = styled.div`\n  && {\n    // For the Data Centers page, since we always use the full width for breakpoints MD and higher,\n    // we need to set the margin for the footer to Constants.DRAWER_WIDTH when the desktop drawer is\n    // open.\n    // Future enhancement: Implement margin-left transition to exactly match the drawer slide\n    // transition. Attempted to do this, but the transition did not begin until the drawer slide\n    // transition was complete.\n    ${({ breakpoint, isDesktopDrawerOpen, isPageDataCenters }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        margin-left: ${(isDesktopDrawerOpen && isPageDataCenters) ? Constants.DRAWER_WIDTH + 'px' : '0px'};\n      `)\n    }\n  }\n`;\n\n/**\n * Top-level component of the app.\n */\nclass App extends Component {\n  /**\n   * Create an App object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      routerRef: null,\n      appBarHeight: 0,\n      isDesktopDrawerEnabled: true,\n      isMobileDrawerOpen: false,\n      isPageDataCenters: false,\n      isThemeDark: true\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.setRouterRef = this.setRouterRef.bind(this);\n    this.handleAppBarResize = this.handleAppBarResize.bind(this);\n    this.handleDesktopDrawerMenuClick = this.handleDesktopDrawerMenuClick.bind(this);\n    this.handleMobileDrawerMenuClick = this.handleMobileDrawerMenuClick.bind(this);\n    this.handleSetIsPageDataCenters = this.handleSetIsPageDataCenters.bind(this);\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Load fonts.\n    loadCSS(\n      Constants.URI_CDN_GOOGLE_FONTS,\n      document.querySelector('#insertion-point-jss')\n    );\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      appBarHeight,\n      isDesktopDrawerEnabled,\n      isMobileDrawerOpen,\n      isPageDataCenters,\n      isThemeDark,\n      routerRef\n    } = this.state;\n\n    const isDesktopDrawerOpen = isDesktopDrawerEnabled && isBreakpointDesktop();\n    const breakpoint = getBreakpoint(isDesktopDrawerOpen);\n    /* Breakpoint debug code\n    let breakpointText = 'undefined';\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        breakpointText = 'XS';\n        break;\n      case Breakpoints.SM:\n        breakpointText = 'SM';\n        break;\n      case Breakpoints.MD:\n        breakpointText = 'MD';\n        break;\n      case Breakpoints.LG:\n        breakpointText = 'LG';\n        break;\n      case Breakpoints.XL:\n        breakpointText = 'XL';\n        break;\n    }\n    console.log(breakpointText);\n    */\n\n    return (\n      <Fragment>\n        <GlobalStyle isPageDataCenters={isPageDataCenters} theme={this.getTheme()} />\n        <ThemeProvider theme={this.getTheme()}>\n          <HashRouter ref={this.setRouterRef}>\n            <div>\n              <DEAppBar\n                handleAppBarResize={this.handleAppBarResize}\n                handleDesktopDrawerMenuClick={this.handleDesktopDrawerMenuClick}\n                handleMobileDrawerMenuClick={this.handleMobileDrawerMenuClick}\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isDesktopDrawerTransparent={isPageDataCenters}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                routerRef={routerRef}\n              />\n              <ContentDiv\n                breakpoint={breakpoint}\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                isPageDataCenters={isPageDataCenters}\n                /* Workaround to force react-parallax to update when drawer opens/closes. Perhaps */\n                /* file an issue with react-parallax that Parallax does not update when */\n                /* margin-left changes. */\n                onTransitionEnd={() => window.dispatchEvent(new Event('resize'))}\n              >\n                <ContentGrid\n                  container\n                  direction='column'\n                  justify='space-between'\n                  appbarheight={appBarHeight}\n                >                 \n                  <Route\n                    exact path='/'\n                    render={(props) => \n                      <HomePage\n                        {...props}\n                        breakpoint={breakpoint}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/datacenters'\n                    render={(props) =>\n                      <DataCentersPage\n                        {...props}\n                        breakpoint={breakpoint}\n                        handleSetIsPageDataCenters={this.handleSetIsPageDataCenters}\n                        isDesktopDrawerOpen={isDesktopDrawerOpen}\n                        isThemeDark={isThemeDark}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/txs'\n                    render={(props) => \n                      <TransactionsPage\n                        {...props}\n                        breakpoint={breakpoint}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/about'\n                    render={(props) => \n                      <AboutPage\n                        {...props}\n                        breakpoint={breakpoint}\n                        isDesktopDrawerOpen={isDesktopDrawerOpen}\n                        isThemeDark={isThemeDark}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path=\"/tx/:hash\"\n                    render={(props) => \n                      <TransactionPage\n                        {...props}\n                        breakpoint={breakpoint}\n                      />\n                    }\n                  />\n                  <FooterDiv\n                    breakpoint={breakpoint}\n                    isDesktopDrawerOpen={isDesktopDrawerOpen}\n                    isPageDataCenters={isPageDataCenters}\n                  >\n                    <Footer                  \n                      handleThemeChange={this.handleThemeChange}\n                      isThemeDark={isThemeDark}\n                    />\n                  </FooterDiv>\n                </ContentGrid>\n              </ContentDiv>\n            </div>\n          </HashRouter>\n        </ThemeProvider>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Set a reference to the HashRouter element.\n   * @public\n   */\n  setRouterRef(element) {\n    this.setState({ routerRef: element });\n  };\n\n  /**\n   * Callback fired when the App Bar is resized.\n   * @private\n   */\n  handleAppBarResize(height) {\n    this.setState({\n      appBarHeight: height\n    });\n  }\n\n  /**\n   * Callback fired when the desktop drawer (large screens) menu button is clicked.\n   * @private\n   */\n  handleDesktopDrawerMenuClick(contentRect) {\n    this.setState({\n      isDesktopDrawerEnabled: !this.state.isDesktopDrawerEnabled\n    });\n  }\n\n  /**\n   * Callback fired when the mobile drawer (small screens) menu button is clicked.\n   * @private\n   */\n  handleMobileDrawerMenuClick(contentRect) {\n    this.setState({\n      isMobileDrawerOpen: !this.state.isMobileDrawerOpen\n    });\n  }\n\n  /**\n   * Callback fired when the value isPageDataCenters changes.\n   * @param {Boolean} isPageDataCenters The value of isPageDataCenters.\n   * @public\n   */\n  handleSetIsPageDataCenters(isPageDataCenters) {\n    this.setState({\n      isPageDataCenters: isPageDataCenters\n    });\n  }\n\n  /**\n   * Callback fired when the value of the Footer component theme checkbox changes.\n   * @param {Object} event The event source of the callback.\n   * @param {Number} checked The checked value of the switch.\n   * @public\n   */\n  handleThemeChange(event, checked) {\n    this.setState({\n      isThemeDark: checked\n    });\n  }\n\n  /**\n   * Return the current theme.\n   * @return {Object} The current theme.\n   * @private\n   */\n  getTheme() {\n    return this.state.isThemeDark ? themeDark : themeLight;\n  }\n}\n\nexport default App;\n","/**\n * @file index\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\ndocument.getElementById(\"root\"));\n"],"sourceRoot":""}