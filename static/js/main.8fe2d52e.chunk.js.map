{"version":3,"sources":["Components/AboutPage/banner-x-horizon.png","Components/AboutPage/dfinity-explorer-logo-large.png","Components/AboutPage/dfinity-logo-dark-mode.png","Components/AboutPage/dfinity-logo-light-mode.png","Components/AboutPage/github-octocat.png","Components/AboutPage/material-ui-logo.png","Components/AboutPage/nomics-logo-dark-mode.png","Components/AboutPage/nomics-logo-light-mode.png","Components/AboutPage/react-logo-text.png","Components/AboutPage/styled-components-logo-dark-mode.png","Components/AboutPage/styled-components-logo-light-mode.png","Components/DEAppBar/dfinity-explorer-logo.png","constants.js","theme/globalStyle.js","Components/ResponsiveComponent/ResponsiveComponent.js","Components/TrackablePage/TrackablePage.js","Components/DashCard/DashCard.js","Components/BlocksCard/BlocksCard.js","Components/BlockTimeCard/BlockTimeCard.js","Components/CyclesCard/CyclesCard.js","Components/PriceCard/PriceCard.js","utils/breakpoint.js","Components/BarChart/BarChart.js","utils/roundDownDateToDay.js","Components/BlocksChart/BlocksChart.js","Components/CanistersChart/CanistersChart.js","Components/MessagesChart/MessagesChart.js","utils/roundDownDateToHour.js","Components/AreaChart/AreaChart.js","Components/PriceChart/PriceChart.js","Components/HomePage/HomePage.js","Components/CpuCoresCard/CpuCoresCard.js","Components/MemoryCard/MemoryCard.js","Components/NodesCard/NodesCard.js","Components/SubnetsCard/SubnetsCard.js","Components/DfinityEarth/DfinityEarth.js","Components/DataCentersPage/DataCentersPage.js","utils/getRandomInt.js","utils/getRandomNumber.js","Components/DfinitySymbolD3/DfinitySymbolD3.js","Components/ImageLinkGrid/ImageLinkGrid.js","Components/AboutPage/AboutPage.js","Components/DEAppBar/DEAppBar.js","Components/Footer/Footer.js","App.js","index.js"],"names":["module","exports","Constants","Object","freeze","URI_CDN_FONT_AWESOME","URI_CDN_GOOGLE_FONTS","URI_ABOUT_DFINITY","URI_ABOUT_NOMICS","URI_ABOUT_MATERIAL_UI","URI_ABOUT_REACT","URI_ABOUT_STYLED_COMPONENTS","URI_GITHUB_CONTRIBUTORS","URI_GITHUB_DFINITY_EXPLORER_PROJECT","URI_GITHUB_DYLAN","URI_GITHUB_MIT_LICENSE","URI_GITHUB_TODD","URI_GLOBE_EARTH_IMAGE_DARK","URI_GLOBE_EARTH_IMAGE_LIGHT","URI_NASA_EXPLORER","URI_TWITTER_DFINITY_EXPLORER","COLOR_DFINITY_BLACK","COLOR_DFINITY_BLACK_LIGHTER","COLOR_DFINITY_BLACK_DARKER","COLOR_DFINITY_LIGHT_ORANGE","COLOR_DFINITY_DARK_ORANGE","COLOR_DFINITY_BLUE_400","COLOR_DFINITY_BLUE_500","COLOR_DFINITY_BLUE_600","COLOR_DFINITY_BLUE_700","COLOR_DFINITY_BLUE_800","COLOR_DFINITY_BLUE_900","COLOR_TEXT_LIGHT","COLOR_DARK_TEXT","COLOR_DARK_TEXT_FADED","COLOR_TEXT_DARKER","COLOR_TEXT_DARKEST","COLOR_LIGHT_TEXT_FADED","COLOR_DARK_BODY_DARKER_MAC_OS","COLOR_DARK_BODY_LIGHTER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_YOUTUBE","COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX","COLOR_DARK_TEXT_MAC_OS","COLOR_LIGHT_BODY_TEXT_GOOGLE","COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE","COLOR_LIGHT_CHART_GOOGLE","COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE","COLOR_LIGHT_DRAWER_ICON_GOOGLE","COLOR_LIGHT_DRAWER_TEXT_GOOGLE","COLOR_TWITTER_BLUE","COLOR_TWITTER_GREEN","COLOR_TWITTER_ORANGE","COLOR_TWITTER_PURPLE","COLOR_GRAY_ON_WHITE","FONT_PRIMARY","MATERIAL_FONT_SIZE_H1","MATERIAL_FONT_SIZE_H2","MATERIAL_FONT_SIZE_H3","MATERIAL_FONT_SIZE_H4","MATERIAL_FONT_SIZE_H5","MATERIAL_FONT_SIZE_H6","MATERIAL_FONT_SIZE_SUBTITLE_1","MATERIAL_FONT_SIZE_SUBTITLE_2","MATERIAL_FONT_SIZE_BODY_1","MATERIAL_FONT_SIZE_BODY_2","MATERIAL_FONT_SIZE_BUTTON","MATERIAL_FONT_SIZE_CAPTION","MATERIAL_FONT_SIZE_OVERLINE","MATERIAL_CIRCULAR_INDICATOR_SIZE","MATERIAL_UI_ICON_BUTTON_FONT_SIZE","FONT_SIZE_TABLE_XS","BREAKPOINT_MIN_XS","BREAKPOINT_MAX_XS","BREAKPOINT_MIN_SM","BREAKPOINT_MAX_SM","BREAKPOINT_MIN_MD","BREAKPOINT_MAX_MD","BREAKPOINT_MIN_LG","BREAKPOINT_MAX_LG","BREAKPOINT_MIN_XL","BREAKPOINT_LG_MAX_WIDTH","DRAWER_WIDTH","FOOTER_HEIGHT","FOOTER_MARGIN_XS","FOOTER_MARGIN_SM_AND_UP","ICON_SVG_PATH_BLOCK","ICON_SVG_PATH_BLOCK_TIME","ICON_SVG_PATH_CPU_CORES","ICON_SVG_PATH_CYCLES_BURNED","ICON_SVG_PATH_DATA_CENTERS","ICON_SVG_PATH_MEMORY","ICON_SVG_PATH_MPS","ICON_SVG_PATH_NODES","ICON_SVG_PATH_PRICE","ICON_SVG_PATH_SUBNETS","ICON_SVG_PATH_THEME_LIGHT","ICON_SVG_PATH_THEME_DARK","ABOUT_PAGE_MARGIN_XS","ABOUT_PAGE_MARGIN_SM","ABOUT_PAGE_MARGIN_MD","ABOUT_PAGE_MARGIN_LG","DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP","HOME_PAGE_MARGIN_XS","HOME_PAGE_MARGIN_SM_AND_UP","ABOUT_PAGE_PROJECT_ICONS_HEIGHT","GOOGLE_ANALYTICS_TRACKING_ID","BLOCKS_CARD_POLL_INTERVAL_MS","BLOCK_TIME_CARD_POLL_INTERVAL_MS","CYCLES_CARD_POLL_INTERVAL_MS","MESSAGES_TIME_POLL_INTERVAL_MS","PRICE_POLL_INTERVAL_MS","NETWORK_ERROR_THRESHOLD","IC_RELEASE","NOMICS_API_KEY","GlobalStyle","createGlobalStyle","props","isPageDataCenters","theme","colorDataCentersPageBackground","colorBodyBackground","themeLight","isDark","colorAboutBackgroundPrimary","colorAboutBackgroundSecondary","colorAboutHeaderText","colorAboutTwitterBackground","colorAppBarBackground","colorAppBarTextButton","colorAppBarDfinityText","colorAppBarExplorerText","colorBodyButtonBackground","colorBodyButtonText","colorBodyButtonHoverBackground","colorBodyButtonHoverText","colorBodyText","colorBodyTextDim","colorBodyTextLink","colorDashCardBackground","colorDashCardIcon","colorDashCardIconOpacity","colorDataCentersCardBackground","colorDrawerBackground","colorDrawerDivider","colorDrawerIcon","colorDrawerIconTextSelected","colorDrawerText","colorChartBackground","colorChartTooltipBackground","colorChartAxes","colorChartGrid","colorChartText","colorChartLine","colorChartActiveDotStroke","colorIconButtonHover","colorTableBackgroundPrimary","colorTableRowBorder","colorTableTextDim","colorFooterBackground","colorFooterTextIcon","colorSearchText","colorSearchIcon","opacityActionDisabled","opacityActionHover","uriGlobeEarthImage","themeDark","ResponsiveComponent","handleWindowResize","bind","throttledHandleWindowResize","throttle","window","addEventListener","this","removeEventListener","forceUpdate","Component","TrackablePage","scrollTo","pathName","location","pathname","search","trackPage","prevProps","currentPathName","nextPathName","ReactGA","set","page","pageview","GridNoWrap","styled","Grid","SvgIconCard","SvgIcon","cardindex","TypographyTitle","Typography","TypographyValue","DashCard","cardIndex","className","svgIconPath","title","value","Paper","elevation","container","direction","justify","alignItems","wrap","item","d","noWrap","BlocksCard","state","blockHeight","error","pollForBlockHeight","interval","setInterval","clearInterval","blockHeightText","toLocaleString","axios","get","then","res","data","block","length","newBlockHeight","parseInt","setState","catch","prevState","BlockTimeCard","blocks","lastBlockHeight","blocksPerSecond","pollForBlockTime","blockTimeText","toFixed","maxExpectedBlocksPerInterval","resetCalculation","height","timestamp","Date","push","expiredDate","getTime","shift","CyclesCard","cyclesBurned","pollForCyclesBurned","cyclesBurnedText","cycles_burned","newCyclesBurned","PriceCard","price","pollForPrice","priceText","url","parseFloat","Breakpoints","XS","SM","MD","LG","XL","getBreakpoint","isDesktopDrawerOpen","drawerWidth","matchMedia","matches","isBreakpointDesktop","breakpoint","isBreakpointGreaterOrEqualTo","StyledPaper","StyledBarChart","RechartsBarChart","BarChart","chartHeight","getData","getTitle","width","margin","top","right","left","bottom","style","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","vertical","dataKey","getDataKeyX","tick","fill","tickFormatter","getGetTickX","tickMargin","tickSize","getGetTickY","tickLine","labelFormatter","getGetTooltipX","formatter","getGetTooltipY","contentStyle","background","border","borderRadius","fontSize","boxShadow","shadows","itemStyle","color","labelStyle","cursor","animationDuration","type","getDataKeyY","strokeWidth","fillOpacity","Error","roundDownDateToDay","date","Math","floor","BlocksChart","blocksData","endDate","startDate","setDate","getDate","values","result","prevHeight","slice","map","numBlocks","max","toLocaleDateString","timeZone","k","Number","isInteger","propTypes","PropTypes","number","isRequired","object","withTheme","CanistersChart","canistersData","prevTotal","total","numCanisters","MessagesChart","messagesData","numMessages","toLocaleTimeString","hour","minute","StyledAreaChart","RechartsAreaChart","PriceChart","priceData","dateToRfc3339","candle","close","console","log","dataMin","dataMax","ceil","year","month","day","toISOString","split","replace","domain","getDomainMinY","getDomainMaxY","activeDot","r","GridSection","duration","standard","easing","easeInOut","GridSectionCharts2","GridCard","GridChart","CardBlocks","CardBlockTime","CardCycles","CardPrice","HomePage","getSectionDisclaimer","getSectionCards","getSectionCharts","timeout","delay","CpuCoresCard","numberOfCpuCores","getNumberOfCpuCores","numberOfCpuCoresText","ic_cpu_cores","newNumberOfCpuCores","MemoryCard","memoryTotal","getMemoryTotal","memoryTotalText","ic_memory_total","newMemoryTotal","NodesCard","numberOfNodes","getNumberOfNodes","numberOfNodesText","ic_nodes_count","newNumberOfNodes","SubnetsCard","numberOfSubnets","getNumberOfSubnets","numberOfSubnetsText","ic_subnet_total","newNumberOfSubnets","DfinityEarthWithSize","isThemeDark","size","DfinityEarth","globeEl","cities","subnetArcs","controls","autoRotate","autoRotateSpeed","pointOfView","lat","lng","altitude","locations","key","latitude","longitude","name","totalNodes","total_nodes","filter","locationsByNameMap","Map","forEach","locationsByName","citiesWithSameName","city","find","calculateDistance","dataCenters","subnets","Set","i","nodes","Array","_","index","sort","random","x","y","add","subnetIndex","subnet","j","startLat","startLng","endLat","endLng","startName","endName","OPACITY","showGlobe","purple","pink","darkOrange","lightOrange","blue","arcColorPairs","when","ref","el","globeImageUrl","showAtmosphere","animateIn","backgroundColor","arcsData","arcStroke","arcDashLength","arcDashGap","arcDashInitialGap","arcDashAnimateTime","arcColor","subnetArc","arcsTransitionDuration","labelsData","labelColor","labelText","labelLabel","labelHtml","dataCenter","labelDotRadius","pointsData","pointColor","pointAltitude","pointRadius","pointsMerge","lat1","lng1","lat2","lng2","dLat","deg2rad","dLon","a","sin","cos","atan2","sqrt","deg","PI","GridEarth","GridCardLast","CardCpuCores","CardMemory","CardNodes","CardSubnets","DataCentersPage","handleSetIsPageDataCenters","bool","getRandomInt","start","end","getRandomNumber","DfinitySymbolD3","dragStarted","dragged","dragEnded","rotate","stage","renderer","linksGraphics","simulationWidth","logoMode","simulationHeight","scaleSimulationToPixi","centerX","centerY","scaleToWindow","numSymbolNodes","numVertices","numNodes","forceManyBodyStrengthSymbolNodes","forceManyBodyStrengthNonSymbolNodes","linkDistance","nodeStrokeWidth","nodeRadius","nodeRadiusSelected","nodeSelectedFillColorArray","nodeSelectedStrokeColorArray","nodeOpacity","nodeOpacitySelected","linkStrokeWidth","linkStrokeWidthIncreaseAtMagnitude","symbolHeightMultiplier","rotateOffset","rotateTimeMs","rotateAmount","selectedNodeIndex","newBlockNodeStartTime","newBlockLinksStartTime","newBlockNodeTimerMs","newBlockLinksTimerMs","draw","destroy","pixiResizeRenderer","nodesData","node","pixiDrawNode","element","addNodes","addLinks","createSimulation","pixiSetup","pos","getNodePosition","t","scale","linksData","indexSymbol","indexSymbolNext","addLink","vertexShapeTop","indexShapeTop","indexShapeTopNext","indexShapeAlmostTop","indexShapeNext","indexSpiralNext","indexSource","indexTarget","strength","opacity","toString","linkCount","simulation","d3","force","link_force","_strength","min","source","target","distance","on","alphaDecay","PIXI","skipHello","antialias","transparent","resolution","autoResize","appendChild","view","graphics","addChild","call","subject","resize","position","nodeStrokeColor","nodeFillColor","selectedNodeMagnitude","rgbNumberFromArray","gradientColor","getNodeStrokeColorArray","clear","lineStyle","beginFill","filters","drawCircle","link","linkMagnitude","linkOpacity","alpha","getColorArray","moveTo","lineTo","numIndices","transitionIndicesSmall","transitionIndicesGradual","lastPurpleIndex","lastPinkIndex","lastDarkOrangeIndex","lastLightOrangeIndex","lastBlueIndex","percentage","color1","color2","percent","p1","p2","round","array","active","alphaTarget","restart","fx","fy","_fx","_fy","pixiMoveNode","elapsedMs","pixiDrawLink","endFill","render","elapsed","ImageLinkGrid","widths","maxHeight","calculateMaxImageDimensions","arePropsChanged","imageLinks","imageLink","src","justifyRow","marginBetweenRows","perRow","containerHeight","imageLinkGrid","maxWidthColumn","row","isShortRow","rowIndex","marginTop","columnIndex","href","rel","alt","img","Image","onload","event","currentTarget","naturalWidth","naturalHeight","PaperParallax","GridParallax","TypographyParallax","GridSectionPrimary","GridSectionSecondary","GridItem","GridImageLeft","GridImageRight","GridSymbolLeft","GridText","GridTextLeft","GridTextRight","TypographyHeading","TypographyBody","StyledA","ImgSection","SpanHeart","span","PaperTwitter","ImageLinkGridThanks","AboutPage","getHeader","getSectionMission","getSectionOpenSource","getSectionCommunity","getSectionContributors","getSectionThanks","bgImage","bannerXHorizon","bgImageAlt","bgImageStyle","getDfinitySymbolD3Width","dfinityExplorerLogo","sourceType","screenName","options","noFooter","githubOctocat","imagesPerRow","reactHeight","styledComponentsHeight","materialUiHeight","nomicsHeight","dfinityHeight","reactLogo","styledComponentsLogoDark","styledComponentsLogoLight","materialUiLogo","nomicsLogoDark","nomicsLogoLight","dfinityLogoDark","dfinityLogoLight","contentWidth","innerWidth","StyledAppBar","AppBar","zIndex","drawer","StyledToolbar","Toolbar","ImgProductIcon","TypographyAppName","TypographyDfinity","TypographyBorder","div","TypographyExplorer","StyledIconButton","IconButton","fade","StyledMenuIcon","MenuIcon","StyledSwipeableDrawer","other","SwipeableDrawer","classes","paper","StyledDrawer","Drawer","StyledDivider","Divider","DrawerListItemIcon","ListItemIcon","DrawerSvgIcon","DrawerListItemText","ListItemText","primary","DrawerListItem","ListItem","selected","DEAppBar","toolbarDivRef","React","createRef","isActiveRoute","in","mountOnEnter","unmountOnExit","getToolbarDefaultContent","getDrawer","handleAppBarResize","current","offsetHeight","isMobileDrawerOpen","handleMobileDrawerMenuClick","getMenuButton","getAppTitle","handleDesktopDrawerMenuClick","Zoom","onClick","textDecoration","to","getProductIconHeight","BREAKPOINT_MAX_XL","isBreakpointLessOrEqualTo","variant","open","getDrawerContent","onOpen","onClose","List","button","component","Link","routeName","func","routerRef","withRouter","FooterToolbar","OneThirdGrid","LeftThirdGrid","RightThirdGrid","FooterTypography","FooterA","AwesomeIconButtonGrid","AwesomeIconButton","AwesomeIcon","Icon","ThemeCheckbox","Checkbox","ThemeSvgIcon","Footer","loadCSS","document","querySelector","getCopyrightText","getNomicsText","checked","icon","checkedIcon","onChange","handleThemeChange","initialize","anonymizeIp","ContentDiv","enteringScreen","leavingScreen","ContentGrid","appbarheight","App","appBarHeight","isDesktopDrawerEnabled","setRouterRef","getTheme","onTransitionEnd","dispatchEvent","Event","exact","path","contentRect","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.8fe2d52e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner-x-horizon.78a73653.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-explorer-logo-large.6854aee0.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-logo-dark-mode.03f02872.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-logo-light-mode.5a960076.png\";","module.exports = __webpack_public_path__ + \"static/media/github-octocat.c833384a.png\";","module.exports = __webpack_public_path__ + \"static/media/material-ui-logo.1d6a085f.png\";","module.exports = __webpack_public_path__ + \"static/media/nomics-logo-dark-mode.a32c7cc9.png\";","module.exports = __webpack_public_path__ + \"static/media/nomics-logo-light-mode.6f5390ee.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-text.24432c06.png\";","module.exports = __webpack_public_path__ + \"static/media/styled-components-logo-dark-mode.3b3add6f.png\";","module.exports = __webpack_public_path__ + \"static/media/styled-components-logo-light-mode.33f922e4.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-explorer-logo.52c54b15.png\";","/**\n * @file constants\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nconst Constants = Object.freeze({\n  URI_CDN_FONT_AWESOME:\n    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css',\n  // Remove any fonts that aren't used!!!\n  URI_CDN_GOOGLE_FONTS:\n    'https://fonts.googleapis.com/css?family=Istok+Web:400|Muli:200,300,400,500',\n  URI_ABOUT_DFINITY: 'https://dfinity.org/',\n  URI_ABOUT_NOMICS: 'https://nomics.com/',\n  URI_ABOUT_MATERIAL_UI: 'https://material-ui.com/',\n  URI_ABOUT_REACT: 'https://reactjs.org/',\n  URI_ABOUT_STYLED_COMPONENTS: 'https://www.styled-components.com/',\n  URI_GITHUB_CONTRIBUTORS: 'https://github.com/orgs/dfinityexplorer/people',\n  URI_GITHUB_DFINITY_EXPLORER_PROJECT: 'https://github.com/dfinityexplorer/dfinityexplorer-dashboard',\n  URI_GITHUB_DYLAN: 'https://github.com/dylancm4',\n  URI_GITHUB_MIT_LICENSE: 'https://github.com/dfinityexplorer/dfinityexplorer/blob/master/LICENSE',\n  URI_GITHUB_TODD: 'https://github.com/toddkitchens',\n  URI_GLOBE_EARTH_IMAGE_DARK: '//unpkg.com/three-globe/example/img/earth-night.jpg',\n  URI_GLOBE_EARTH_IMAGE_LIGHT: '//unpkg.com/three-globe/example/img/earth-day.jpg',\n  URI_NASA_EXPLORER: 'https://nssdc.gsfc.nasa.gov/multi/explorer.html',\n  URI_TWITTER_DFINITY_EXPLORER: 'https://twitter.com/dfinityexplorer',\n  // Remove colors that are not used!!!\n  COLOR_DFINITY_BLACK: 'rgb(41, 42, 46)', // from dfinity.org/press\n  COLOR_DFINITY_BLACK_LIGHTER: 'rgb(73, 75, 82)', //  COLOR_DFINITY_BLACK scaled lighter\n  COLOR_DFINITY_BLACK_DARKER: 'rgb(27, 28, 31)', // COLOR_DFINITY_BLACK scaled darker\n  COLOR_DFINITY_LIGHT_ORANGE: 'rgb(251, 176, 59)', // from dfinity.org style guide\n  COLOR_DFINITY_DARK_ORANGE: 'rgb(241, 90, 36)', // from dfinity.org style guide\n  COLOR_DFINITY_BLUE_400: '#29ABE2', // DFINITY logo blue\n  COLOR_DFINITY_BLUE_500: '#009DDD',\n  COLOR_DFINITY_BLUE_600: '#0090CF',\n  COLOR_DFINITY_BLUE_700: '#007DBC',\n  COLOR_DFINITY_BLUE_800: '#006DA8',\n  COLOR_DFINITY_BLUE_900: '#004E88',\n  COLOR_TEXT_LIGHT: '#FFFFFF', // This should be removed, replaced with COLOR_DARK_TEXT!!!\n  COLOR_DARK_TEXT: '#FFFFFF',\n  COLOR_DARK_TEXT_FADED: 'rgb(190, 191, 192)', // rgba(255, 255, 255, 0.7) on COLOR_DFINITY_BLACK, matches Material-UI Tab opacity\n  COLOR_TEXT_DARKER: 'rgb(148, 149, 151)', // rgba(255, 255, 255, 0.5) on COLOR_DFINITY_BLACK\n  COLOR_TEXT_DARKEST: 'rgb(106, 106, 109)', // rgba(255, 255, 255, 0.3) on COLOR_DFINITY_BLACK\n  COLOR_LIGHT_TEXT_FADED: 'rgb(77, 77, 77)', // rgba(0, 0, 0, 0.7) on white, matches Material-UI Tab opacity\n  COLOR_DARK_BODY_DARKER_MAC_OS: '#1B1B1B', // Calendar, Finder, iTunes, Messages\n  COLOR_DARK_BODY_LIGHTER_MAC_OS: '#262626', // Finder\n  COLOR_DARK_DRAWER_DIVIDER_MAC_OS: '#4B4B4B', // Calendar, Messages\n  COLOR_DARK_DRAWER_DIVIDER_YOUTUBE: '#333333',\n  COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX: '#808080',\n  COLOR_DARK_TEXT_MAC_OS: '#DCDCDC', // Calendar, iTunes\n  COLOR_LIGHT_BODY_TEXT_GOOGLE: '#202124', // About, Account, News, Gmail, Contacts, Docs, Keep, Material\n  COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE: '#5F6368', // About, Account, Contacts, Docs, Drive, Gmail, Material\n  COLOR_LIGHT_CHART_GOOGLE: '#9E9E9E', // Analytics, Firebase\n  COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE: '#E3E3E3', // Docs, Sheets\n  COLOR_LIGHT_DRAWER_ICON_GOOGLE: '#5F6368', // Account, Docs, Drive, Calendar, Keep, Photos, Sheets\n  COLOR_LIGHT_DRAWER_TEXT_GOOGLE: '#3C4043', // Account, Docs, Calendar, News, Photos, Sheets\n  COLOR_TWITTER_BLUE: 'rgb(100, 164, 224)',\n  COLOR_TWITTER_GREEN: 'rgb(131, 175, 97)',\n  COLOR_TWITTER_ORANGE: 'rgb(244, 174, 78)',\n  COLOR_TWITTER_PURPLE: 'rgb(165, 144, 211)',\n  COLOR_GRAY_ON_WHITE: 'rgb(235, 235, 235)', // matches Material-UI IconButton hover\n  FONT_PRIMARY: '\\'Muli\\', sans-serif',\n  MATERIAL_FONT_SIZE_H1: '6rem', // 96px\n  MATERIAL_FONT_SIZE_H2: '3.75rem', // 60px\n  MATERIAL_FONT_SIZE_H3: '3rem', // 48px\n  MATERIAL_FONT_SIZE_H4: '2.125rem', // 34px\n  MATERIAL_FONT_SIZE_H5: '1.5rem', // 24px\n  MATERIAL_FONT_SIZE_H6: '1.25rem', // 20px\n  MATERIAL_FONT_SIZE_SUBTITLE_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_SUBTITLE_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BODY_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_BODY_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BUTTON: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_CAPTION: '0.75rem', // 12px\n  MATERIAL_FONT_SIZE_OVERLINE: '0.625rem', // 10px\n  MATERIAL_CIRCULAR_INDICATOR_SIZE: 48,\n  MATERIAL_UI_ICON_BUTTON_FONT_SIZE: 24,\n  FONT_SIZE_TABLE_XS: '0.6875rem', // 11px\n  BREAKPOINT_MIN_XS: 0,\n  BREAKPOINT_MAX_XS: 599,\n  BREAKPOINT_MIN_SM: 600,\n  BREAKPOINT_MAX_SM: 959,\n  BREAKPOINT_MIN_MD: 960,\n  BREAKPOINT_MAX_MD: 1279,\n  BREAKPOINT_MIN_LG: 1280,\n  BREAKPOINT_MAX_LG: 1919,\n  BREAKPOINT_MIN_XL: 1920,\n  BREAKPOINT_LG_MAX_WIDTH: 1140, // from Bootstrap\n  DRAWER_WIDTH: 256,\n  FOOTER_HEIGHT: 96,\n  FOOTER_MARGIN_XS: 8,\n  FOOTER_MARGIN_SM_AND_UP: 32,\n  ICON_SVG_PATH_BLOCK: 'M12 0L1 6v12.131L12 24l11-5.869V6.065L12 0zm7.91 6.646l-7.905 4.218L4.133 6.57l7.862-4.289 7.915 4.365zM3 8.23l8 4.363V21.2l-8-4.268V8.23zM13 21.2v-8.6l8-4.269v8.6L13 21.2z',\n  ICON_SVG_PATH_BLOCK_TIME: 'M13 12l-.688-4h-.609L11 12a1.99 1.99 0 0 0-1 1.723 2 2 0 0 0 4 0A1.99 1.99 0 0 0 13 12zm-1-8C6.478 4 2 8.477 2 14s4.478 10 10 10 10-4.477 10-10S17.522 4 12 4zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8zM10 2.181V0h4v2.181c-1.438-.243-2.592-.238-4 0zm9.179 2.226L20.586 3 22 4.414l-1.321 1.321a12.134 12.134 0 0 0-1.5-1.328z',\n  ICON_SVG_PATH_CPU_CORES: 'M10 2H8V0h2v2zM2 8H0v2h2V8zm0-5c0-.551.448-1 1-1h4V0H3a3 3 0 00-3 3v4h2V3zm0 8H0v2h2v-2zM16 0h-2v2h2V0zm-3 0h-2v2h2V0zM2 14H0v2h2v-2zm18-2.042h-2.277l-2.36 5.386-2.883-7.93-2.442 5.78-2.071-4.14-1.129 1.966H4V20h16v-8.042zm-16 .063h2.259L8.027 8.94l1.935 3.866 2.589-6.126 2.899 7.976 1.62-3.697H20V4H4v8.021zM14 24h2v-2h-2v2zm8-11h2v-2h-2v2zM2 21v-4H0v4a3 3 0 003 3h4v-2H3c-.552 0-1-.449-1-1zm20 0c0 .551-.448 1-1 1h-4v2h4a3 3 0 003-3v-4h-2v4zm0-11h2V8h-2v2zm0 6h2v-2h-2v2zm2-13a3 3 0 00-3-3h-4v2h4c.552 0 1 .449 1 1v4h2V3zM8 24h2v-2H8v2zm3 0h2v-2h-2v2z',\n  ICON_SVG_PATH_CYCLES_BURNED: 'M9.797.094c0 .004.047.101.113.215.524.957.824 2.109.79 3.03-.02.481-.102.786-.325 1.227-.281.559-.621.961-1.719 2.051-.836.828-1.215 1.254-1.578 1.774-.469.68-.715 1.214-.871 1.89a7.975 7.975 0 00-.016 3.504c.02.086.028.156.024.16-.016.016-.293-.25-.426-.406-.617-.738-1.02-1.781-1.168-3.023-.047-.414-.047-1.164 0-1.426.016-.102.027-.188.027-.192-.011-.007-.277.278-.433.465a8.483 8.483 0 00-.676.98 6.772 6.772 0 00-.828 2.462c-.055.41-.055 1.66 0 2.18.254 2.257 1.078 4.12 2.492 5.609.953 1.004 2.293 1.816 3.727 2.258.14.043.265.078.277.074.012-.004-.047-.086-.133-.18-.469-.531-.84-1.101-1.062-1.617-.266-.625-.32-1.14-.184-1.688.098-.398.195-.613.52-1.125.351-.554.468-.828.52-1.21.046-.383-.028-.887-.22-1.438-.054-.16-.097-.293-.09-.297.008-.012.255.086.45.18.496.246.93.601 1.195.976.113.168.3.508.328.606.004.031.02.047.028.039a1.358 1.358 0 00-.028-.215c-.054-.293-.054-1 0-1.285.086-.461.278-.945.508-1.313.348-.55.922-1.109 1.535-1.496.192-.117.64-.343.828-.414l.118-.043-.086.2a2.612 2.612 0 00-.223 1.226c.016.324.05.48.164.695.117.235.273.418.773.907.25.246.512.515.582.597.473.563.692 1.074.774 1.828.043.418-.024.844-.195 1.254-.047.102-.09.203-.094.219-.008.02.058-.039.148-.125.528-.535.965-1.383 1.102-2.152.023-.117.043-.23.05-.25.012-.04.075.03.239.261.558.801.691 1.93.367 3.184a7.072 7.072 0 01-1.238 2.492c-.074.094-.121.168-.102.168.043 0 .477-.14.73-.234.29-.11.798-.352 1.083-.516 1.5-.867 2.648-2.234 3.215-3.812.289-.813.43-1.684.43-2.664a5.76 5.76 0 00-.052-.907c-.105-.75-.28-1.441-.656-2.539-.433-1.289-.543-1.672-.61-2.101a6.669 6.669 0 01.618-3.907c.055-.117.098-.222.094-.226-.02-.02-.528.156-.86.3-.824.344-1.691.903-2.289 1.473-.382.364-.785.918-1.066 1.473-.066.133-.117.223-.113.2.027-.095.101-.622.125-.86.03-.324.03-.945.004-1.266a7.158 7.158 0 00-1.477-3.703 11.699 11.699 0 00-1.66-1.66 10.793 10.793 0 00-3.07-1.727c-.356-.129-.43-.156-.43-.14zm0 0',\n  ICON_SVG_PATH_DATA_CENTERS: 'M13.144 8.171c-.035-.066.342-.102.409-.102.074.009-.196.452-.409.102zm-2.152-3.072l.108-.031c.064.055-.072.095-.051.136.086.155.021.248.008.332-.014.085-.104.048-.149.093-.053.066.258.075.262.085.011.033-.375.089-.304.171.096.136.824-.195.708-.176.225-.113.029-.125-.097-.19-.043-.215-.079-.547-.213-.68l.088-.102c-.206-.299-.36.362-.36.362zM24 12c0 6.627-5.373 12-12 12-6.628 0-12-5.373-12-12S5.372 0 12 0c6.627 0 12 5.373 12 12zm-8.31-5.371c-.006-.146-.19-.284-.382-.031-.135.174-.111.439-.184.557-.104.175.567.339.567.174.025-.277.732-.063.87-.025.248.069.643-.226.211-.381-.355-.13-.542-.269-.574-.523 0 0 .188-.176.106-.166-.218.027-.614.786-.614.395zM21.986 12c0-1.035-.177-2.08-.357-2.632a.611.611 0 00-.359-.378c-.256-.1-1.337.597-1.5.254-.107-.229-.324.146-.572.008-.12-.066-.454-.515-.605-.46-.309.111.474.964.688 1.076.201-.152.852-.465.992-.038.268.804-.737 1.685-1.251 2.149-.768.694-.624-.449-1.147-.852-.275-.211-.272-.66-.55-.815-.124-.07-.693-.725-.688-.813l-.017.166c-.094.071-.294-.268-.315-.321 0 .295.48.765.639 1.001.271.405.416.995.748 1.326.178.178.858.914 1.035.898.193-.017.803-.458.911-.433.644.152-1.516 3.205-1.721 3.583-.169.317.138 1.101.113 1.476-.029.433-.37.573-.693.809-.346.253-.265.745-.556.925-.517.318-.889 1.353-1.623 1.348-.216-.001-1.14.36-1.261.007-.094-.256-.22-.45-.353-.703-.13-.248-.015-.505-.173-.724-.109-.152-.475-.497-.508-.677-.002-.155.117-.626.28-.708.229-.117.044-.458.016-.656-.048-.354-.267-.646-.53-.851-.389-.299-.188-.537-.097-.964 0-.204-.124-.472-.398-.392-.564.164-.393-.44-.804-.413-.296.021-.538.209-.813.292-.346.104-.7-.082-1.042-.125-1.407-.178-1.866-1.786-1.499-2.946.037-.19-.114-.542-.048-.689.158-.352.48-.747.762-1.014.158-.15.361-.112.547-.229.287-.181.291-.553.572-.781.4-.325.946-.318 1.468-.388.278-.037 1.336-.266 1.503-.06 0 .038.191.604-.019.572.433.023 1.05.749 1.461.579.211-.088.134-.736.567-.423.262.188 1.436.272 1.68.069.15-.124.234-.93.052-1.021.116.115-.611.124-.679.098-.12-.044-.232.114-.425.025.116.055-.646-.354-.218-.667-.179.131-.346-.037-.539.107-.133.108.062.18-.128.274-.302.153-.53-.525-.644-.602-.116-.076-1.014-.706-.77-.295l.789.785c-.039.025-.207-.286-.207-.059.053-.135.02.579-.104.347-.055-.089.09-.139.006-.268 0-.085-.228-.168-.272-.226-.125-.155-.457-.497-.637-.579-.05-.023-.764.087-.824.11a1.78 1.78 0 00-.179.311 2.02 2.02 0 00-.419.214l-.157.353c-.068.061-.765.291-.769.3.029-.075-.487-.171-.453-.321.038-.165.213-.68.168-.868-.048-.197 1.074.284 1.146-.235.029-.225.046-.487-.313-.525.068.008.695-.246.799-.36.146-.168.481-.442.724-.442.284 0 .223-.413.354-.615.131.053-.07.376.087.507-.01-.103.445.057.489.033.104-.054.684-.022.594-.294-.1-.277.051-.195.181-.253-.022.009.34-.619.402-.413-.043-.212-.421.074-.553.063-.305-.024-.176-.52-.061-.665.089-.115-.243-.256-.247-.036-.006.329-.312.627-.241 1.064.108.659-.735-.159-.809-.114-.28.17-.509-.214-.364-.444.148-.235.505-.224.652-.476.104-.178.225-.385.385-.52.535-.449.683-.09 1.216-.041.521.048.176.124.104.324-.069.19.286.258.409.099a2.65 2.65 0 00.298-.494c.089-.222.901-.197.334-.536-.374-.223-2.004-.672-3.096-.672-.236 0-.401.263-.581.412-.356.295-1.268.874-1.775.698-.519-.179-1.63.66-1.808.666-.065.004.004-.634.358-.681-.153.023 1.247-.707 1.209-.859-.046-.18-2.799.822-2.676 1.023.059.092.299.092-.016.294-.18.109-.372.801-.541.801-.505.221-.537-.435-1.099.409l-.894.36a9.96 9.96 0 00-2.58 5.183c-.013.079.334.226.379.28.112.134.112.712.167.901.138.478.479.744.74 1.179.154.259.41.914.329 1.186.108-.178 1.07.815 1.246 1.022.414.487.733 1.077.061 1.559-.217.156.33 1.129.048 1.368l-.361.093c-.356.219-.195.756.021.982a9.96 9.96 0 007.22 3.087c5.517 0 9.989-4.472 9.989-9.989zM10.479 5.643c.125-.055.293-.053.311-.22.015-.148.044-.046.08-.1.035-.053-.067-.138-.11-.146-.064-.014-.108.069-.149.104l-.072.019-.068.087.008.048-.087.106c-.085.084.002.139.087.102z',\n  ICON_SVG_PATH_MEMORY: 'M15.297.168c-.078.016-.211.066-.3.113-.153.078-.517.434-7.388 7.305C2.008 13.187.371 14.84.313 14.94a1.24 1.24 0 00-.02 1.176c.059.125.445.52 3.758 3.832 3.312 3.313 3.707 3.7 3.832 3.758a1.24 1.24 0 001.176-.02c.097-.054.504-.449 1.535-1.476A86.67 86.67 0 0012 20.793c0-.016-.469-.496-1.04-1.07-1.108-1.114-1.14-1.153-1.218-1.442a1.476 1.476 0 01.012-.64c.144-.473.605-.82 1.09-.825.21-.003.37.036.566.133.145.07.246.168 1.2 1.121.578.57 1.058 1.04 1.07 1.04.027 0 1.875-1.848 1.875-1.876 0-.011-.47-.492-1.04-1.066-1.109-1.113-1.14-1.152-1.218-1.445a1.403 1.403 0 01.015-.637c.145-.473.602-.82 1.086-.824.211-.004.372.035.567.133.144.07.25.168 1.203 1.117a36.05 36.05 0 001.066 1.043c.028 0 1.875-1.848 1.875-1.875 0-.012-.468-.492-1.039-1.07-1.11-1.114-1.14-1.15-1.218-1.442a1.403 1.403 0 01.015-.637 1.18 1.18 0 011.09-.824c.207-.004.367.031.566.129.141.074.247.172 1.2 1.121.574.574 1.054 1.043 1.07 1.043.008 0 .648-.633 1.418-1.406 1.027-1.031 1.422-1.438 1.477-1.535a1.24 1.24 0 00.019-1.176c-.059-.121-.395-.469-2.832-2.918C16.977 1.043 16.281.355 16.141.28a1.503 1.503 0 00-.582-.144c-.07 0-.188.015-.262.031zm.469 6.016c.191.039.39.148.546.304.368.364.454.867.239 1.332-.063.137-.172.25-1.317 1.399-.683.687-1.289 1.281-1.34 1.316-.05.035-.16.094-.242.125-.21.078-.547.086-.761.008a1.175 1.175 0 01-.676-1.645c.047-.101.25-.32 1.293-1.363.68-.683 1.277-1.27 1.332-1.308.265-.188.578-.243.926-.168zm-5.832 5.949c.175.058.351.172.492.316.332.348.406.887.18 1.34-.083.164-2.543 2.625-2.715 2.719a1.19 1.19 0 01-.57.144 1.117 1.117 0 01-.813-.343 1.137 1.137 0 01-.215-1.36c.059-.12.227-.297 1.336-1.406 1.223-1.227 1.277-1.273 1.437-1.352.09-.043.22-.086.278-.101a1.38 1.38 0 01.59.043zm0 0',\n  ICON_SVG_PATH_MPS: 'M16 8V4l8 8-8 8v-4h-5V8h5zM9 8H7v8h2V8zM4.986 8H3v8h1.986V8zM1 8H0v8h1V8z',\n  ICON_SVG_PATH_NODES: 'M24 8H0v4h24V8zM2 11l.863-2h1.275l-.863 2H2zm2.066 0l.864-2h1.275l-.863 2H4.066zm2.067 0l.863-2h1.275l-.864 2H6.133zm2.066 0l.863-2h1.274l-.863 2H8.199zm3.341 0h-1.274l.863-2h1.275l-.864 2zM21 11a1 1 0 110-2 1 1 0 010 2zm3 3H0v4h24v-4zM2 17l.863-2h1.275l-.863 2H2zm2.066 0l.863-2h1.275l-.863 2H4.066zm2.067 0l.863-2h1.275l-.864 2H6.133zm2.066 0l.863-2h1.274l-.863 2H8.199zm3.341 0h-1.274l.863-2h1.275l-.864 2zM21 17a1 1 0 110-2 1 1 0 010 2zm3 3H0v4h24v-4zM2 23l.863-2h1.275l-.863 2H2zm2.066 0l.863-2h1.275l-.863 2H4.066zm2.067 0l.863-2h1.275l-.864 2H6.133zm2.066 0l.863-2h1.274l-.863 2H8.199zm3.341 0h-1.274l.863-2h1.275l-.864 2zM21 23a1 1 0 110-2 1 1 0 010 2zm1-17H2l4-6h12l4 6z',\n  ICON_SVG_PATH_PRICE: 'M19 16.166c0-4.289-4.465-5.483-7.887-7.091-2.079-1.079-1.816-3.658 1.162-3.832 1.652-.1 3.351.39 4.886.929l.724-3.295c-1.814-.551-3.437-.803-4.885-.841V0h-2v2.134c-3.89.535-5.968 2.975-5.968 5.7 0 4.876 5.693 5.62 7.556 6.487 2.54 1.136 2.07 3.5-.229 4.021-1.993.451-4.538-.337-6.45-1.079L5 20.551c1.787.923 3.931 1.417 6 1.453V24h2v-2.105c3.313-.464 6.005-2.293 6-5.729z',\n  ICON_SVG_PATH_SUBNETS: 'M10.26 4.171a26.138 26.138 0 00-1.581-.719C9.449 1.372 10.561 0 12 0c1.402 0 2.494 1.301 3.26 3.292-.492.211-.998.447-1.572.739C13.1 2.464 12.43 1.756 12 1.756c-.442 0-1.14.75-1.74 2.415zM12 22.244c-.429 0-1.1-.708-1.688-2.275a26.3 26.3 0 01-1.572.739C9.507 22.699 10.598 24 12 24c1.439 0 2.551-1.372 3.321-3.452a26.244 26.244 0 01-1.581-.719c-.6 1.665-1.298 2.415-1.74 2.415zm-4.708-2.216c-1.917.705-4.778 1.392-5.916-.317-.562-.845-.771-2.468 1.42-5.408a23.307 23.307 0 011.937-2.249 36.856 36.856 0 015.505-4.598C9.155 6.86 7.974 6.29 6.822 5.865c-1.18-.434-2.219-.675-3.015-.675-.508 0-.886.107-1.009.289-.131.192-.138.783.445 1.842l.21-.012c1.048 0 1.897.865 1.897 1.932s-.85 1.932-1.897 1.932-1.897-.865-1.897-1.932c0-.345.089-.669.246-.95-1.11-1.96-.881-3.139-.419-3.815C1.707 4 2.392 3.434 3.807 3.434c2.514 0 5.901 1.66 8.082 2.946 2.214-1.363 5.717-3.16 8.304-3.16 1.421 0 2.106.581 2.431 1.069.562.845.771 2.468-1.42 5.407-3.084 4.137-9.216 8.606-13.912 10.332zM19.83 8.634c1.506-2.019 1.552-3.082 1.366-3.361-.126-.189-.492-.298-1.003-.298-1.953 0-4.926 1.459-6.638 2.447a39.854 39.854 0 013.522 2.617c-.407.413-.834.819-1.271 1.211a37.84 37.84 0 00-3.9-2.811 37.847 37.847 0 00-4.603 3.551 37.087 37.087 0 003.721 2.873c-.522.331-1.05.648-1.652.98l-.013-.009a38.44 38.44 0 01-3.316-2.632c-2.818 2.878-3.612 4.964-3.239 5.525.126.189.492.298 1.003.298 2.35 0 6.08-2.017 8.287-3.464 2.709-1.776 5.799-4.328 7.736-6.927zm2.377 7.091c.141-.27.22-.577.22-.903 0-1.067-.849-1.932-1.897-1.932s-1.897.865-1.897 1.932.849 1.932 1.897 1.932l.258-.018c.553 1.024.544 1.598.415 1.787-.124.181-.501.288-1.009.288-1.602 0-3.833-.945-5.27-1.658-.48.342-1.077.748-1.659 1.119 1.926 1.037 4.758 2.295 6.929 2.295 1.415 0 2.1-.566 2.424-1.042.461-.674.69-1.85-.411-3.8z',\n  ICON_SVG_PATH_THEME_LIGHT: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88zm3.584-8.047a10.7 10.7 0 0 1 4.723-3.41l.027-.01a10.433 10.433 0 0 0-1.752 7.118 10.444 10.444 0 0 0 3.912 7.033 10.448 10.448 0 0 0 10.135 1.64c.196-.072.39-.15.583-.232A10.697 10.697 0 0 1 15.975 22 10.665 10.665 0 0 1 5.63 20.327a10.656 10.656 0 0 1-3.99-7.174A10.653 10.653 0 0 1 3.89 5.259z',\n  ICON_SVG_PATH_THEME_DARK: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88z',\n  ABOUT_PAGE_MARGIN_XS: 8,\n  ABOUT_PAGE_MARGIN_SM: 48,\n  ABOUT_PAGE_MARGIN_MD: 64,\n  ABOUT_PAGE_MARGIN_LG: 128,\n  DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP: 380,\n  HOME_PAGE_MARGIN_XS: 8,\n  HOME_PAGE_MARGIN_SM_AND_UP: 32,\n  ABOUT_PAGE_PROJECT_ICONS_HEIGHT: 55,\n  GOOGLE_ANALYTICS_TRACKING_ID: 'UA-138212575-1',\n  BLOCKS_CARD_POLL_INTERVAL_MS: 3000,\n  BLOCK_TIME_CARD_POLL_INTERVAL_MS: 3000, // Changed from 10000 for the BlockTimeCard \"No Historical Blocks\" fix!!!\n  CYCLES_CARD_POLL_INTERVAL_MS: 3000,\n  MESSAGES_TIME_POLL_INTERVAL_MS: 30000,\n  PRICE_POLL_INTERVAL_MS: 30000,\n  NETWORK_ERROR_THRESHOLD: 10,\n  IC_RELEASE: 'sodium',\n  NOMICS_API_KEY: '38f4023ce681a328edc018f7a8a28e06'\n});\n\nexport default Constants;\n","/**\n * @file globalStyle\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { createGlobalStyle } from 'styled-components';\nimport Constants from '../constants';\n\n/**\n * StyledComponent that handles global styles.\n */\nexport const GlobalStyle = createGlobalStyle`\n   body {\n    margin: 0;\n    padding: 0;\n    background: ${\n      props => props.isPageDataCenters ?\n        props.theme.colorDataCentersPageBackground : props.theme.colorBodyBackground\n    };\n   }\n`;\n\n/**\n * The styled-components ThemeProvider light theme.\n */\nexport const themeLight = {\n  // Should use constants for all!!!\n  isDark: false,\n  colorAboutBackgroundPrimary: '#FFFFFF',\n  colorAboutBackgroundSecondary: '#F8F9FA', // Google Analytics (verified), Wikipedia (verified)\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: '#FFFFFF',\n  colorAppBarBackground: '#FFFFFF',\n  colorAppBarTextButton: Constants.COLOR_LIGHT_TEXT_FADED, // (#4D4D4D)\n  colorAppBarDfinityText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyBackground: '#F8F9FA', // Wikipedia (verified)\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorBodyTextDim: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_700,\n  colorDashCardBackground: '#FFFFFF',\n  colorDashCardIcon: [Constants.COLOR_DFINITY_BLUE_700, '#9440A6', '#F79308', '#DA005E'], // Ori's purple and orange\n  colorDashCardIconOpacity: 1.0,\n  colorDataCentersCardBackground: '#FFFFFF',\n  colorDataCentersPageBackground: '#F8F9FA', // Wikipedia (verified)\n  colorDrawerBackground: '#FFFFFF',\n  colorDrawerDivider: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorDrawerIcon: Constants.COLOR_LIGHT_DRAWER_ICON_GOOGLE,\n  colorDrawerIconTextSelected: Constants.COLOR_DFINITY_BLUE_700,\n  colorDrawerText: Constants.COLOR_LIGHT_DRAWER_TEXT_GOOGLE,\n  colorChartBackground: '#FFFFFF',\n  colorChartTooltipBackground: 'rgba(255, 255, 255, 0.96)',\n  colorChartAxes: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartGrid: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorChartText: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_700,\n  colorChartActiveDotStroke: '#FFFFFF',\n  colorIconButtonHover: '#000000',\n  colorTableBackgroundPrimary: '#FFFFFF',\n  colorTableRowBorder: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorTableTextDim: '#909090', // YouTube, footer text dim (verified)\n  colorFooterBackground: '#F5F5F5',\n  colorFooterTextIcon: '#909090', // YouTube (verified)\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon(verified)\n  opacityActionDisabled: 0.26, // Material-UI createPalette.js theme.palette.action.disabled light theme\n  opacityActionHover: 0.08, // Material-UI createPalette.js theme.palette.action.hoverOpacity light theme\n  uriGlobeEarthImage: Constants.URI_GLOBE_EARTH_IMAGE_LIGHT\n}\n\n/**\n * The styled-components ThemeProvider dark theme.\n */\nexport const themeDark = {\n  isDark: true,\n  colorAboutBackgroundPrimary: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorAboutBackgroundSecondary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarTextButton: Constants.COLOR_DARK_TEXT_FADED,\n  colorAppBarDfinityText: Constants.COLOR_DARK_TEXT,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_LIGHT_ORANGE,\n  colorBodyBackground: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextDim: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_600,\n  colorDashCardBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDashCardIcon: ['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF'],\n  colorDashCardIconOpacity: 0.5,\n  colorDataCentersCardBackground: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorDataCentersPageBackground: '#000000',\n  colorDrawerBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDrawerDivider: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorDrawerIcon: Constants.COLOR_DARK_TEXT_FADED,\n  colorDrawerIconTextSelected: '#FFFFFF',\n  colorDrawerText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorChartTooltipBackground: 'rgba(38, 38, 38, 0.96)',\n  colorChartAxes: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorChartGrid: Constants.COLOR_DARK_DRAWER_DIVIDER_MAC_OS,\n  colorChartText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_600,\n  colorChartActiveDotStroke: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorIconButtonHover: Constants.COLOR_DARK_TEXT,\n  colorTableBackgroundPrimary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorTableRowBorder: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorTableTextDim: '#717171', // YouTube (Dark), footer text dim (verified)\n  colorFooterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorFooterTextIcon: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon (verified)\n  opacityActionDisabled: 0.3, // Material-UI createPalette.js theme.palette.action.disabled dark theme\n  opacityActionHover: 0.1, // Material-UI createPalette.js theme.palette.action.hoverOpacity dark theme\n  uriGlobeEarthImage: Constants.URI_GLOBE_EARTH_IMAGE_DARK\n}\n","/**\n * @file ResponsiveComponent\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { Component } from 'react';\nimport { throttle } from 'throttle-debounce';\n\n/**\n * Base class component which re-renders when the window is resized.\n */\nclass ResponsiveComponent extends Component {\n  /**\n   * Create a ResponsiveComponent object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    // Bind to make 'this' work in callbacks.\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n\n    // Throttle the calls to handleWindowResize() so that we're not constantly re-rendering.\n    this.throttledHandleWindowResize = throttle(200, true, this.handleWindowResize);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    this.forceUpdate();\n  }\n};\n\nexport default ResponsiveComponent;\n","/**\n * @file TrackablePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport ReactGA from 'react-ga';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\n\n/**\n * Base class component for a page which is trackable by react-ga.\n */\nclass TrackablePage extends ResponsiveComponent {\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Scroll to the top on every page change.\n    window.scrollTo(0, 0);\n\n    const pathName = this.props.location.pathname + this.props.location.search;\n    this.trackPage(pathName);\n}\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    const currentPathName = prevProps.location.pathname + prevProps.location.search;\n    const nextPathName = this.props.location.pathname + this.props.location.search;\n\n    if (currentPathName !== nextPathName)\n      this.trackPage(nextPathName);\n  }\n\n  /**\n   * Track the page using react-ga.\n   * @param {String} pathName The path name of the page.\n   * @private\n   */\n  trackPage(pathName) {\n    // Track production build, but not development build.\n    if (process.env.NODE_ENV === 'production') {\n      ReactGA.set({ page: pathName });\n      ReactGA.pageview(pathName);\n    }\n  }\n}\n\nexport default TrackablePage;\n","/**\n * @file DashCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport Constants from '../../constants';\n\nconst GridNoWrap = styled(Grid)`\n  && {\n    /* Setting min-width to 0px allows the Grid to narrow past the implied width of its children. */\n    min-width: 0px;\n  }\n`;\n\nconst SvgIconCard = styled(SvgIcon)`\n  && {\n    /* The combination of margin, padding, and font-size explicitly set the height of the card. */\n    margin: 30px;\n    font-size: 42px;\n    opacity: ${props => props.theme.colorDashCardIconOpacity};\n    color: ${props => props.theme.colorDashCardIcon[props.cardindex]};\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 300;\n    font-size: 14px;\n  }\n`;\n\nconst TypographyValue = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 200;\n    font-size: 28px;\n  }\n`;\n\n/**\n * This component displays a dashboard card.\n */\nclass DashCard extends Component { \n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * The d attribute of the SvgIcon path.\n     */\n    svgIconPath: PropTypes.string.isRequired,\n    /**\n     * The title string of the card.\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * The value string of the card.\n     */\n    value: PropTypes.string.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let {\n      cardIndex,\n      className,\n      svgIconPath,\n      title,\n      value\n    } = this.props;\n\n    return (\n      <Paper className={className} elevation={1}>\n        <Grid container direction='row' justify='flex-start' alignItems='center' wrap='nowrap'>\n          <Grid item>\n            <SvgIconCard cardindex={cardIndex}>\n              <path d={svgIconPath} />\n            </SvgIconCard>\n          </Grid>\n          <GridNoWrap container direction='column' justify='center' alignItems='flex-start'>\n            {/* The usage of Grid elements here is required to get Typography noWrap to work. */}\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyTitle className={className} noWrap>\n                  {title}\n                </TypographyTitle>\n              </GridNoWrap>\n            </Grid>\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyValue className={className} noWrap>\n                  {value}\n                </TypographyValue>\n              </GridNoWrap>\n            </Grid>\n          </GridNoWrap>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default DashCard;\n","/**\n * @file BlocksCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current block height retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class BlocksCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlocksCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blockHeight: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block height using intervals.\n    this.pollForBlockHeight();\n    this.interval = setInterval(\n      () => { this.pollForBlockHeight() },\n      Constants.BLOCKS_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blockHeight, error } = this.state;\n    \n    let blockHeightText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      blockHeightText = 'Network error';\n    else if (blockHeight === -1)\n      blockHeightText = 'Loading...';\n    else\n      blockHeightText = blockHeight.toLocaleString();\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Blocks'\n        value={blockHeightText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK}\n      />\n    );\n  }\n\n  /** KEEP for now: dashboard.dfinity.network version\n   * Update the block height.\n   * @private\n   *\n  pollForBlockHeight() {\n    // Get 10 minutes of minute data. If there is an API to get just the current block height, we\n    // should use it here.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 10);\n    const endDate = new Date();\n    const secondsInMinute = 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length >= 2) {\n          let { blockHeight } = this.state;\n          const values = res.data.data.result[0].values;\n          // Temporary workaround fix: Use second to last value, since dashboard.dfinity.network\n          // seems to have a bug where the last value isn't always reliable!!!\n          const lastValue = values[values.length-2];\n          const newBlockHeight = Math.floor(lastValue[1]);\n          if (newBlockHeight > blockHeight) {\n            this.setState({\n              blockHeight: newBlockHeight,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }*/\n\n  /**\n   * Update the block height.\n   * @private\n   */\n  pollForBlockHeight() {\n    const url =\n      `https://dashboard.internetcomputer.org/api/metrics/block`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.block.length === 2) {\n          let { blockHeight } = this.state;\n          const newBlockHeight = parseInt(res.data.block[1]);\n          if (newBlockHeight > blockHeight) {\n            this.setState({\n              blockHeight: newBlockHeight,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default BlocksCard;\n","/**\n * @file BlockTimeCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with seconds per block retrieved from\n * dashboard.internetcomputer.org/api.\n */\nclass BlockTimeCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlockTimeCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.blocks = [];\n    this.lastBlockHeight = 0;\n\n    this.state = {\n      blocksPerSecond: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block time using intervals.\n    this.pollForBlockTime();\n    this.interval = setInterval(\n      () => { this.pollForBlockTime() },\n      Constants.BLOCK_TIME_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blocksPerSecond, error } = this.state;\n    \n    let blockTimeText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      blockTimeText = 'Network error';\n    else if (blocksPerSecond === -1)\n      blockTimeText = 'Calculating...';//\"No Historical Blocks\" fix!!!'Loading...';\n    else\n      blockTimeText = blocksPerSecond.toFixed(1) + ' bps';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Avg Blocks'\n        value={blockTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK_TIME}\n      />\n    );\n  }\n\n  /** KEEP for now: dashboard.dfinity.network version\n   * Update the block time.\n   * \n   * This version was added for the \"No Historical Blocks\" fix!!! This function is basically a copy\n   * of pollForBlockHeight() in BlocksCard. This method of calculating the block time is intended to\n   * be temporary until we receive more reliable API data.\n   * @private\n   *\n  pollForBlockTime() {\n    // Get 10 minutes of minute data. If there is an API to get just the current block height, we\n    // should use it here.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 10);\n    const endDate = new Date();\n    const secondsInMinute = 60;\n    const url =\n      // NOTE: IC_RELEASE vs. non IC_RELEASE is '%22${Constants.IC_RELEASE}' vs. '~%22.%2B'.\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length >= 2) {\n          const values = res.data.data.result[0].values;\n          // Temporary workaround fix: Use second to last value, since dashboard.dfinity.network\n          // seems to have a bug where the last value isn't always reliable!!!\n          const lastValue = values[values.length-2];\n          const newBlockHeight = Math.floor(lastValue[1]);\n\n          // Reset calculation if we get a major glitch in the API data.\n          const maxExpectedBlocksPerSecond = 50; // somewhat arbitrary, but based on observations\n          const maxExpectedBlocksPerInterval =\n            Constants.BLOCK_TIME_CARD_POLL_INTERVAL_MS / 1000 * maxExpectedBlocksPerSecond;\n          const resetCalculation =\n            newBlockHeight < this.lastBlockHeight ||\n            newBlockHeight > this.lastBlockHeight + maxExpectedBlocksPerInterval;\n          if (resetCalculation) {\n            this.blocks = [];\n            //console.log('Glitch!'); //!!!\n            //console.log('newBlockHeight: ', newBlockHeight); //!!!\n            //console.log('this.lastBlockHeight: ', this.lastBlockHeight); //!!!\n            //console.log(values);//!!!\n          }\n          this.lastBlockHeight = newBlockHeight;\n  \n          // Add a block object for this block to the blocks[] array.\n          const block = {\n            height: newBlockHeight,\n            timestamp: new Date(),\n          };\n          this.blocks.push(block);\n\n          // Remove blocks that have expired, so that we calculate blocks per second based on only\n          // the last X minutes. The goal here is to minimize the time a minor API data glitch will\n          // affect the blocks per second value.\n          const expireMs = 60 * 1000; // one minute\n          const expiredDate = new Date(block.timestamp.getTime() - expireMs);\n          while (this.blocks[0].timestamp < expiredDate)\n            this.blocks.shift();\n\n          let blocksPerSecond;\n          if (this.blocks.length >= 2) {\n            const numBlocks = this.blocks[this.blocks.length-1].height - this.blocks[0].height;\n            const seconds =\n              (this.blocks[this.blocks.length-1].timestamp - this.blocks[0].timestamp) / 1000;\n            blocksPerSecond = numBlocks / seconds;              \n          }\n          else\n            blocksPerSecond = -1;\n          \n          if (resetCalculation) {\n            // Do not set blocksPerSecond when resetting calculation, avoiding \"Calculating...\".\n            this.setState({\n              error: 0\n            });\n          }\n          else {\n            this.setState({\n              blocksPerSecond: blocksPerSecond,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }*/\n\n  /**\n   * Update the block time.\n   * \n   * This version was added for the \"No Historical Blocks\" fix!!! This function is basically a copy\n   * of pollForBlockHeight() in BlocksCard. This method of calculating the block time is intended to\n   * be temporary until we receive more reliable API data.\n   * @private\n   */\n  pollForBlockTime() {\n    const url =\n      `https://dashboard.internetcomputer.org/api/metrics/block`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.block.length === 2) {\n          const newBlockHeight = parseInt(res.data.block[1]);\n\n          // Reset calculation if we get a major glitch in the API data.\n          const maxExpectedBlocksPerSecond = 200; // somewhat arbitrary, but based on observations\n          const maxExpectedBlocksPerInterval =\n            Constants.BLOCK_TIME_CARD_POLL_INTERVAL_MS / 1000 * maxExpectedBlocksPerSecond;\n          const resetCalculation =\n            newBlockHeight < this.lastBlockHeight ||\n            newBlockHeight > this.lastBlockHeight + maxExpectedBlocksPerInterval;\n          if (resetCalculation)\n            this.blocks = [];\n\n          this.lastBlockHeight = newBlockHeight;\n  \n          // Add a block object for this block to the blocks[] array.\n          const block = {\n            height: newBlockHeight,\n            timestamp: new Date(), // could use timestamp from API result!!!\n          };\n          this.blocks.push(block);\n\n          // Remove blocks that have expired, so that we calculate blocks per second based on only\n          // the last X minutes. The goal here is to minimize the time a minor API data glitch will\n          // affect the blocks per second value.\n          const expireMs = 60 * 1000; // one minute\n          const expiredDate = new Date(block.timestamp.getTime() - expireMs);\n          while (this.blocks[0].timestamp < expiredDate)\n            this.blocks.shift();\n\n          let blocksPerSecond;\n          if (this.blocks.length >= 2) {\n            const numBlocks = this.blocks[this.blocks.length-1].height - this.blocks[0].height;\n            const seconds =\n              (this.blocks[this.blocks.length-1].timestamp - this.blocks[0].timestamp) / 1000;\n            blocksPerSecond = numBlocks / seconds;              \n          }\n          else\n            blocksPerSecond = -1;\n          \n          if (resetCalculation) {\n            // Do not set blocksPerSecond when resetting calculation, avoiding \"Calculating...\".\n            this.setState({\n              error: 0\n            });\n          }\n          else {\n            this.setState({\n              blocksPerSecond: blocksPerSecond,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n\n  /** KEEP: This version was removed for the \"No Historical Blocks\" fix. It was difficult to get\n   * consistent results by looking at historical block heights. We can hopefully go back to this\n   * version later.\n   * \n   * Update the block time.\n   * @private\n   *\n  pollForBlockTime() {*/\n    /* KEEP for now\n    // Get one day of hourly data. Ideally, we would get 10 minutes of minute data, but\n    // dashboard.dfinity.network results are inconsistent with those settings.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 1);\n    const endDate = new Date();\n    const secondsInHour = 60 * 60;*//*\n    // Get 10 minutes of minute data. This is still sometimes glitchy, but we'll try it out\n    // temporarily.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 10);\n    const endDate = new Date();\n    const secondsInMinute = 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length >= 2) {\n          const values = res.data.data.result[0].values;\n          const firstValue = values[0];\n          // Temporary workaround fix when using 10 minutes of minute data: Use second to last\n          // value, since dashboard.dfinity.network seems to have a bug where the last value isn't\n          // always reliable. Note >= 2 above as well, rather than >= 1.!!!\n          const lastValue = values[values.length-2];\n          const numBlocks = Math.max(Math.floor(lastValue[1] - firstValue[1]), 0);\n          const seconds = Math.max(lastValue[0] - firstValue[0], 1);\n          const blocksPerSecond = numBlocks / seconds;\n          if (blocksPerSecond > 0) { // ignore glitchy data from API\n            this.setState({\n              blocksPerSecond: blocksPerSecond,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }*/\n}\n\nexport default BlockTimeCard;\n","/**\n * @file CyclesCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the cycles burned retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class CyclesCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a CyclesCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cyclesBurned: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the cycles burned using intervals.\n    this.pollForCyclesBurned();\n    this.interval = setInterval(\n      () => { this.pollForCyclesBurned() },\n      Constants.CYCLES_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { cyclesBurned, error } = this.state;\n    \n    let cyclesBurnedText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      cyclesBurnedText = 'Network error';\n    else if (cyclesBurned === -1)\n      cyclesBurnedText = 'Loading...';\n    else {\n      const trillionCyclesBurned = cyclesBurned / 1000000000000;\n      cyclesBurnedText = trillionCyclesBurned.toFixed(3) + 'T';\n    }\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Cycles Burned'\n        value={cyclesBurnedText}\n        svgIconPath={Constants.ICON_SVG_PATH_CYCLES_BURNED}\n      />\n    );\n  }\n\n  /**\n   * Update the cycles burned.\n   * @private\n   */\n  pollForCyclesBurned() {\n    const url =\n      `https://dashboard.internetcomputer.org/api/metrics/cycles-burned`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.cycles_burned.length === 2) {\n          let { cyclesBurned } = this.state;\n          const newCyclesBurned = parseInt(res.data.cycles_burned[1]);\n          if (newCyclesBurned > cyclesBurned) {\n            this.setState({\n              cyclesBurned: newCyclesBurned,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default CyclesCard;\n","/**\n * @file PriceCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with price data retrieved from api.nomics.com.\n */\nclass PriceCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a PriceCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      price: 0,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the price using intervals.\n    this.pollForPrice();\n    this.interval = setInterval(\n      () => { this.pollForPrice() },\n      Constants.PRICE_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { price, error } = this.state;\n    \n    let priceText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      priceText = 'Network error';\n    else if (price === 0)\n      priceText = 'Loading...';\n    else\n      priceText = '$' + price.toFixed(2);\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Price - ICP (IOU)'\n        value={priceText}\n        svgIconPath={Constants.ICON_SVG_PATH_PRICE}\n      />\n    );\n  }\n\n  /**\n   * Update the price.\n   * @private\n   */\n  pollForPrice() {\n    const url =\n      `https://api.nomics.com/v1/currencies/ticker?key=${Constants.NOMICS_API_KEY}&ids=ICP&interval=1d`;\n    axios.get(url)\n      .then(res => {\n        const price = parseFloat(res.data[0].price);\n        this.setState({\n          price: price,\n          error: 0\n        });\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default PriceCard;\n","/**\n * @file breakpoint\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport Constants from '../constants';\n\nexport const Breakpoints = Object.freeze({\n  XS: 0,\n  SM: 1,\n  MD: 2,\n  LG: 3,\n  XL: 4\n});\n\n/**\n * Return the current breakpoint.\n * @param {Boolean} isDesktopDrawerOpen True if the desktop drawer (large screens) is open and\n *  caller wants the breakpoint to be calculated based on the non-drawer width of the window.\n * @return {Number} The current breakpoint.\n * @private\n */\nexport function getBreakpoint(isDesktopDrawerOpen) {\n  const drawerWidth =  isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0;\n  if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_XS + drawerWidth) + 'px)').matches)\n    return Breakpoints.XS;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_SM + drawerWidth) + 'px)').matches)\n    return Breakpoints.SM;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_MD  + drawerWidth) + 'px)').matches)\n    return Breakpoints.MD;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_LG + drawerWidth) + 'px)').matches)\n    return Breakpoints.LG;\n  else\n    return Breakpoints.XL;\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointGreaterOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XL + 'px)').matches;\n  }\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the smallest \"desktop\"\n * breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the smallest\n * \"desktop\" breakpoint.\n * @private\n */\nexport function isBreakpointDesktop() {\n  return isBreakpointGreaterOrEqualTo(Breakpoints.MD);\n}\n\n/**\n * Return true if the current breakpoint is less than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is less than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointLessOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XL + 'px)').matches;\n  }\n}\n","/**\n * @file BarChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Bar,\n  BarChart as RechartsBarChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledBarChart = styled(RechartsBarChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements a bar chart component.\n */\nclass BarChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledBarChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{\n                  fill: 'transparent',\n                  stroke: theme.colorChartGrid\n                }}\n                animationDuration={300}\n              />\n              <Bar\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                animationDuration={1000}\n              />\n            </StyledBarChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('BarChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('BarChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('BarChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('BarChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('BarChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('BarChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('BarChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('BarChart.getGetTooltipY() not implemented.');\n  }\n}\n\nexport default BarChart;\n","/**\n * @file roundDownDateToDay\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Round down the specified Date object to the nearest day.\n * @param {Data} date The Date object to round down.\n * @return {Date} The rounded down Date object.\n * @protected\n*/\nexport default function roundDownDateToDay(date) {\n  const millisecondsInDay = 24 * 60 * 60 * 1000;\n  return new Date(Math.floor(date.getTime() / millisecondsInDay) * millisecondsInDay);\n}\n\n","/**\n * @file BlocksChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToDay from '../../utils/roundDownDateToDay';\n\n/**\n * This component displays a number of blocks chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass BlocksChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a BlocksChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocksData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a two weeks of daily data. Note that there is currently a bug in\n    // dashboard.dfinity.network where the last entry returned for this query is one day ago, not\n    // now.\n    const endDate = roundDownDateToDay(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 15);\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting block height.\n        let prevHeight = Math.floor(values[0][1]);\n        const blocksData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const height = Math.floor(value[1]);\n          const numBlocks = Math.max(height - prevHeight, 0);\n          prevHeight = height;\n          return {date: date.getTime(), numBlocks: numBlocks};\n        });\n        this.setState({\n          blocksData: blocksData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Blocks';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { blocksData } = this.state;\n    return blocksData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numBlocks';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Blocks: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(BlocksChart);\n","/**\n * @file CanistersChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToDay from '../../utils/roundDownDateToDay';\n\n/**\n * This component displays a number of canisters chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass CanistersChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a CanistersChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      canistersData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const endDate = roundDownDateToDay(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 15);\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet%2C%20status)%20(replicated_state_registered_canisters%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet%2C%20status)%20(replicated_state_registered_canisters%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting number of canisters.\n        let prevTotal = Math.floor(values[0][1]);\n        const canistersData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numCanisters = Math.max(total - prevTotal, 0);\n          prevTotal = total;\n          return {date: date.getTime(), numCanisters: numCanisters};\n        });\n        this.setState({\n          canistersData: canistersData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Canisters';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { canistersData } = this.state;\n    return canistersData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numCanisters';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Canisters: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(CanistersChart);\n","/**\n * @file MessagesChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToHour from '../../utils/roundDownDateToHour';\n\n/**\n * This component displays a number of messages chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass MessagesChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a MessagesChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get 24 hours of hourly data. Daily data does not currently work, because\n    // dashboard.dfinity.network returns glitchy data for some days within past week.\n    const endDate = roundDownDateToHour(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 1);\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(message_state_transition_completed_ic_duration_seconds_count%7Bic%3D%22${Constants.IC_RELEASE}%22%2C%20ic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInHour}`;\n      //NO IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(message_state_transition_completed_ic_duration_seconds_count%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting number of messages.\n        let prevTotal = Math.floor(values[0][1]);\n        const messagesData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numMessages = Math.max(total - prevTotal, 0);\n          prevTotal = total;\n          return {date: date.getTime(), numMessages: numMessages};\n        });\n        this.setState({\n          messagesData: messagesData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Messages';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { messagesData } = this.state;\n    return messagesData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numMessages';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Messages: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(MessagesChart);\n","/**\n * @file roundDownDateToHour\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Round down the specified Date object to the nearest hour.\n * @param {Data} date The Date object to round down.\n * @return {Date} The rounded down Date object.\n * @protected\n*/\nexport default function roundDownDateToHour(date) {\n  const millisecondsInHour = 60 * 60 * 1000;\n  return new Date(Math.floor(date.getTime() / millisecondsInHour) * millisecondsInHour);\n}\n\n","/**\n * @file AreaChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Area,\n  AreaChart as RechartsAreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledAreaChart = styled(RechartsAreaChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements an area chart component.\n */\nclass AreaChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledAreaChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                domain={[\n                  dataMin => this.getDomainMinY(dataMin),\n                  dataMax => this.getDomainMaxY(dataMax)\n                ]}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{ stroke: theme.colorChartGrid }}\n                animationDuration={300}\n              />\n              <Area\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                activeDot={{ stroke: theme.colorChartActiveDotStroke, r: 5 }}\n                animationDuration={1000}\n              />\n            </StyledAreaChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('AreaChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('AreaChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('AreaChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('AreaChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    throw new Error('AreaChart.getDomainMinY() not implemented.');\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    throw new Error('AreaChart.getDomainMaxY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('AreaChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('AreaChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('AreaChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('AreaChart.getGetTooltipY() not implemented.');\n  }\n}\n\nexport default AreaChart;\n","/**\n * @file PriceChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n \n/**\n * This component displays a chart of Candle objects with data retrieved from api.nomics.com.\n */\nclass PriceChart extends AreaChart {\n\n  static propTypes = {\n    /**\n    * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n    */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n    * The height of the chart (not including the title).\n    */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n    * The styled-components theme.\n    */\n    theme: PropTypes.object.isRequired\n  };\n   \n  /**\n  * Create a PriceChart object.\n  * @constructor\n  */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      priceData: [],\n      error: false\n    };\n  }\n   \n  /**\n  * Invoked by React immediately after a component is mounted (inserted into the tree). \n  * @public\n  */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 14);\n    const url =\n      `https://api.nomics.com/v1/candles?key=${Constants.NOMICS_API_KEY}&interval=1h&currency=ICP&start=${this.dateToRfc3339(startDate)}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.length > 0) {\n          const priceData = res.data.map((candle) => {\n            const date = new Date(candle.timestamp);\n            const price = parseFloat(candle.close);\n            return {date: date.getTime(), price: price};\n          });\n          this.setState({\n            priceData: priceData\n          });\n        }\n        else\n          console.log(\"Exchange data not found.\");\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n \n  /**\n  * Return the title of the chart.\n  * @return {String} The title of the chart.\n  * @protected\n  */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Price - ICP (IOU)';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n \n  /**\n  * Return an array of objects that describe the chart data.\n  * @return {Array} An array of objects that describe the chart data.\n  * @protected\n  */\n  getData() {\n    const { priceData } = this.state;\n    return priceData;\n  }\n \n  /**\n  * Return the key of the data to be displayed in the x-axis.\n  * @return {String} The key of the data to be displayed in the x-axis.\n  * @protected\n  */\n  getDataKeyX() {\n    return 'date';\n  }\n \n  /**\n  * Return the key of the data to be displayed in the y-axis.\n  * @return {String} The key of the data to be displayed in the y-axis.\n  * @protected\n  */\n  getDataKeyY() {\n    return 'price';\n  }\n \n  /**\n  * Return the minimum value of the domain for the Y-axis.\n  * @param {dataMin} value The minumum value of the data.\n  * @return {String} The minimum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin);\n  }\n\n  /**\n  * Return the maximum value of the domain for the Y-axis.\n  * @param {dataMax} value The maximum value of the data.\n  * @return {String} The maximum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax);\n  }\n \n  /**\n  * Return a string for the x-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tick label.\n  * @protected\n  */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default');\n  }\n\n  /**\n  * Return a string for the y-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tick label.\n  * @protected\n  */\n  getGetTickY(value) {\n    return `$${value.toFixed(2)}`;\n  }\n \n  /**\n  * Return a string for the x-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipX(value) {\n    // Display date/time with no seconds.\n    return new Date(value).toLocaleString(\n      'default',\n      {year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute:'2-digit'});\n  }\n\n  /**\n  * Return a string for the y-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipY(value) {\n    return `ICP (IOU): $${value.toFixed(2)}`;\n  }\n\n  /**\n   * Return a string for the date in RFC 3339 (URI escaped) format.\n   * @param {Object} date The date to create the string for.\n   * @return {String} A string for the date in RFC 3339 (URI escaped) format.\n   * @private\n   */\n  dateToRfc3339(date) {\n    // Use toISOString(), removing the fraction of seconds (i.e, after decimal point).\n    const isoNoFraction = date.toISOString().split('.')[0] + 'Z'\n\n    // Escape all ':' characters.\n    return isoNoFraction.replace(/:/g, '%3A');\n  }\n}\n \n // Use the withTheme HOC so that we can use the current theme outside styled components.\n export default withTheme(PriceChart);\n","/**\n * @file HomePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper, // Disclaimer!!!\n  Typography // Disclaimer!!!\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport Fade from 'react-reveal/Fade';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport BlocksCard from '../BlocksCard/BlocksCard';\nimport BlockTimeCard from '../BlockTimeCard/BlockTimeCard';\nimport CyclesCard from '../CyclesCard/CyclesCard';\nimport PriceCard from '../PriceCard/PriceCard';\nimport BlocksChart from '../BlocksChart/BlocksChart';\nimport CanistersChart from '../CanistersChart/CanistersChart';\nimport MessagesChart from '../MessagesChart/MessagesChart';\nimport PriceChart from '../PriceChart/PriceChart';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport { Fragment } from \"react\";\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst GridSectionCharts2 = styled(GridSection)`\n  && {\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n  }\n`;\n\nconst GridCard = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(25% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP*3/4 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.MD || breakpoint === Breakpoints.SM) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridChart = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst CardBlocks = styled(BlocksCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardBlockTime = styled(BlockTimeCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardCycles = styled(CyclesCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardPrice = styled(PriceCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n// Disclaimer!!!\nconst StyledPaper = styled(Paper)`\n  && {\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 8px;\n    padding-right: 8px;\n    margin-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.XS && `\n        margin-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `)\n    }\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n// Disclaimer!!!\nconst TypographyTitle = styled(Typography)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 300;\n    font-size: 14px;\n  }\n`;\n\n/**\n * Component for the home page.\n */\nclass HomePage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getSectionDisclaimer()}\n        {this.getSectionCards()}\n        {this.getSectionCharts()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the Disclaimer section based on the current breakpoint.\n   * @return {Object} The elements for the Disclaimer section based on the current breakpoint.\n   * @private\n   */\n  getSectionDisclaimer()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='center'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <StyledPaper elevation={1} breakpoint={breakpoint}>\n          <TypographyTitle>\n            {'Site Under Development'}\n          </TypographyTitle>\n        </StyledPaper>\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return the elements for the Cards section based on the current breakpoint.\n   * @return {Object} The elements for the Cards section based on the current breakpoint.\n   * @private\n   */\n  getSectionCards()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='space-between'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            timeout={500}\n          >\n            <CardBlocks cardIndex={0} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={50}\n            timeout={500}\n          >\n            <CardBlockTime cardIndex={1} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={100}\n            timeout={500}\n          >\n            <CardCycles cardIndex={2} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={150}\n            timeout={500}\n          >\n            <CardPrice cardIndex={3} />\n          </Fade>\n        </GridCard>\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return the elements for the Charts section based on the current breakpoint.\n   * @return {Object} The elements for the Charts section based on the current breakpoint.\n   * @private\n   */\n  getSectionCharts()\n  {\n    const { breakpoint } = this.props;\n\n    const chartHeight = 352;\n    return (\n      <Fragment>\n        <GridSection container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <BlocksChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <PriceChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSection>\n        <GridSectionCharts2 container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <CanistersChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <MessagesChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSectionCharts2>\n      </Fragment>\n    );\n  }\n}\n\nexport default HomePage;\n","/**\n * @file CpuCoresCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current number of CPU cores retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class CpuCoresCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a CpuCoresCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfCpuCores: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    this.getNumberOfCpuCores();\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { numberOfCpuCores, error } = this.state;\n    \n    let numberOfCpuCoresText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      numberOfCpuCoresText = 'Network error';\n    else if (numberOfCpuCores === -1)\n      numberOfCpuCoresText = 'Loading...';\n    else\n      numberOfCpuCoresText = numberOfCpuCores.toLocaleString();\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='CPU Cores'\n        value={numberOfCpuCoresText}\n        svgIconPath={Constants.ICON_SVG_PATH_CPU_CORES}\n      />\n    );\n  }\n\n  /**\n   * Get the number of CPU cores.\n   * @private\n   */\n  getNumberOfCpuCores() {\n    const url = `https://dashboard.internetcomputer.org/api/metrics/ic-cpu-cores`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_cpu_cores.length === 2) {\n          let { numberOfCpuCores } = this.state;\n          const newNumberOfCpuCores = parseInt(res.data.ic_cpu_cores[1]);\n          if (newNumberOfCpuCores > numberOfCpuCores) {\n            this.setState({\n              numberOfCpuCores: newNumberOfCpuCores,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default CpuCoresCard;\n","/**\n * @file MemoryCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the memory total retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class MemoryCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a MemoryCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      memoryTotal: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    this.getMemoryTotal();\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { memoryTotal, error } = this.state;\n    \n    let memoryTotalText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      memoryTotalText = 'Network error';\n    else if (memoryTotal === -1)\n      memoryTotalText = 'Loading...';\n    else {\n      const memoryTotalPb = memoryTotal / 1000000000000000;                                    \n      memoryTotalText = memoryTotalPb.toFixed(3) + 'PB';\n    }\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Memory'\n        value={memoryTotalText}\n        svgIconPath={Constants.ICON_SVG_PATH_MEMORY}\n      />\n    );\n  }\n\n  /**\n   * Get the memory total.\n   * @private\n   */\n  getMemoryTotal() {\n    const url = `https://dashboard.internetcomputer.org/api/metrics/ic-memory-total`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_memory_total.length === 2) {\n          let { memoryTotal } = this.state;\n          const newMemoryTotal = parseInt(res.data.ic_memory_total[1]);\n          if (newMemoryTotal > memoryTotal) {\n            this.setState({\n              memoryTotal: newMemoryTotal,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default MemoryCard;\n","/**\n * @file NodesCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current number of nodes retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class NodesCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a NodesCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfNodes: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    this.getNumberOfNodes();\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { numberOfNodes, error } = this.state;\n    \n    let numberOfNodesText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      numberOfNodesText = 'Network error';\n    else if (numberOfNodes === -1)\n      numberOfNodesText = 'Loading...';\n    else\n      numberOfNodesText = numberOfNodes.toLocaleString();\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Nodes'\n        value={numberOfNodesText}\n        svgIconPath={Constants.ICON_SVG_PATH_NODES}\n      />\n    );\n  }\n\n  /**\n   * Get the number of nodes.\n   * @private\n   */\n  getNumberOfNodes() {\n    const url = `https://dashboard.internetcomputer.org/api/metrics/ic-nodes-count`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_nodes_count.length === 2) {\n          let { numberOfNodes } = this.state;\n          const newNumberOfNodes = parseInt(res.data.ic_nodes_count[1]);\n          if (newNumberOfNodes > numberOfNodes) {\n            this.setState({\n              numberOfNodes: newNumberOfNodes,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default NodesCard;\n","/**\n * @file SubnetsCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current number of subnets retrieved from\n * dashboard.internetcomputer.org/api.\n */\n class SubnetsCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a SubnetsCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfSubnets: -1,\n      error: 0\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    this.getNumberOfSubnets();\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { numberOfSubnets, error } = this.state;\n    \n    let numberOfSubnetsText;\n    if (error >= Constants.NETWORK_ERROR_THRESHOLD)\n      numberOfSubnetsText = 'Network error';\n    else if (numberOfSubnets === -1)\n      numberOfSubnetsText = 'Loading...';\n    else\n      numberOfSubnetsText = numberOfSubnets.toLocaleString();\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Subnets'\n        value={numberOfSubnetsText}\n        svgIconPath={Constants.ICON_SVG_PATH_SUBNETS}\n      />\n    );\n  }\n\n  /**\n   * Get the number of subnets.\n   * @private\n   */\n  getNumberOfSubnets() {\n    const url = `https://dashboard.internetcomputer.org/api/metrics/ic-subnet-total`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.ic_subnet_total.length === 2) {\n          let { numberOfSubnets } = this.state;\n          const newNumberOfSubnets = parseInt(res.data.ic_subnet_total[1]);\n          if (newNumberOfSubnets > numberOfSubnets) {\n            this.setState({\n              numberOfSubnets: newNumberOfSubnets,\n              error: 0\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          error: prevState.error + 1\n        }));\n      });\n  }\n}\n\nexport default SubnetsCard;\n","/**\n * @file DfinityEarth\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport Globe from 'react-globe.gl';\nimport Fade from 'react-reveal/Fade';\nimport { SizeMe } from 'react-sizeme';\n\n/**\n * This component is a wrapper that provides width and height props to DfinityEarth.\n */\nclass DfinityEarthWithSize extends Component {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired,\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { isThemeDark, theme } = this.props;\n    \n    return (\n      <SizeMe>{({ size }) =>\n        <DfinityEarth\n          height={(typeof size.width !== 'undefined') ? size.width : 0}\n          isThemeDark={isThemeDark}\n          theme={theme}\n          width={(typeof size.width !== 'undefined') ? size.width : 0}\n        />\n      }\n      </SizeMe> \n    );\n  }\n}\n\n/**\n * This component displays DFINITY Earth, a visualization of Internet Computer data centers on a 3D\n * globe, using data retrieved from dashboard.internetcomputer.org/api.\n */\nclass DfinityEarth extends Component { \n  static propTypes = {\n    /**\n     * The height of the component.\n     */\n    height: PropTypes.number.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired,\n    /**\n     * The width of the component.\n     */\n    width: PropTypes.number.isRequired\n  };\n  \n  /**\n   * Create a DfinityEarth object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.globeEl = null;\n\n    this.state = {\n      cities: [],\n      subnetArcs: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    const MAP_CENTER = { lat: 23.5, lng: -84.3880, altitude: 2.1 }; // Atlanta longitude\n    if (this.globeEl != null) {\n      this.globeEl.controls().autoRotate = true;\n      this.globeEl.controls().autoRotateSpeed = 0.05;\n      this.globeEl.pointOfView(MAP_CENTER, 0);\n    }\n\n    const url = `https://dashboard.internetcomputer.org/api/locations`;\n    axios.get(url)\n      .then(res => {\n        // Create an array of data center locations.\n        let locations = res.data.map((value) => {\n          return {\n            key: value.key,\n            lat: value.latitude,\n            lng: value.longitude,\n            name: value.name,\n            totalNodes: value.total_nodes\n          };\n        });\n\n        // Remove data center locations without any nodes.\n        locations = locations.filter((location) => {\n          return location.totalNodes > 0;\n        });\n\n        // Organize the locations by city name.\n        const locationsByNameMap = new Map();\n        locations.forEach((location) => {\n          let locationsByName = locationsByNameMap.get(location.name);\n          if (typeof locationsByName === 'undefined') {\n            locationsByName = [];\n            locationsByNameMap.set(location.name, locationsByName);\n          }\n          locationsByName.push(location);\n        });\n\n        // Create an array of cities and their data centers. Consider locations within 100km of each\n        // other with the same name to be the same city (using the lat/lng of the first location).\n        const cities = [];\n        locationsByNameMap.forEach((locationsByName) => {\n          let citiesWithSameName = [];\n          locationsByName.forEach((location) => {\n            // Search for existing matching city object.\n            let city = citiesWithSameName.find(city =>\n              this.calculateDistance(location.lat, location.lng, city.lat, city.lng) <= 100);\n\n            // If no matching city was found, create a new city object and add it to\n            // citiesWithSameName[].\n            if (typeof city === 'undefined') {\n              city = {\n                name: location.name,\n                lat: location.lat,\n                lng: location.lng,\n                dataCenters: []\n              };\n              citiesWithSameName.push(city);\n            }\n\n            // Add the data center to the city.\n            city.dataCenters.push({key: location.key, totalNodes: location.totalNodes});\n          });\n\n          // Append citiesWithSameName[] to cities.\n          cities.push(...citiesWithSameName);\n        });\n\n\n        // Create a random set of unique subnets.\n        const nodesPerSubnet = 7; // use a Constants value for this!!!\n        const numberOfSubnets = 8; // consider using /api/metrics/ic-subnet-total!!!\n        const subnets = new Set();\n        let i = 0;\n        while (subnets.size !== numberOfSubnets) {\n          let nodes = Array(locations.length).fill().map((_, index) => index);\n          nodes.sort(() => Math.random() - 0.5);\n          nodes = nodes.slice(0, nodesPerSubnet);\n          nodes.sort((x, y) => (x - y));\n          subnets.add(nodes);\n          // Trivial check for infinite loop.\n          if (i++ > subnets * 10)\n            break;\n        }\n\n        // Create an array of subnet arcs, connecting all nodes within each subnet. If two nodes in\n        // a subnet have the same lat/lng (two separate data centers, but at the same lat/lng), they\n        // are not connected by an arc.\n        let subnetIndex = 0;\n        const subnetArcs = [];\n        subnets.forEach((subnet) => {\n          for (let i = 0; i < subnet.length; i++) {\n            for (let j = i + 1; j < subnet.length; j++) {\n              if (locations[subnet[i]].lat !== locations[subnet[j]].lat &&\n                locations[subnet[i]].lng !== locations[subnet[j]].lng)\n              {\n                subnetArcs.push({\n                  subnetIndex: subnetIndex,\n                  startLat: locations[subnet[i]].lat,\n                  startLng: locations[subnet[i]].lng,\n                  endLat: locations[subnet[j]].lat,\n                  endLng: locations[subnet[j]].lng,\n                  startName: locations[subnet[i]].name,\n                  endName: locations[subnet[j]].name\n                });\n              }\n            }\n          }\n          subnetIndex++;\n        });\n\n        this.setState({\n          cities: cities,\n          subnetArcs: subnetArcs\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { height, isThemeDark, theme, width } = this.props;\n    const { cities, subnetArcs } = this.state;\n\n    const OPACITY = isThemeDark ? 0.22 : 0.3;\n    let showGlobe = cities.length > 0;\n\n    // These colors come from the DFINITY logo.\n    const purple = `rgba(99, 38, 132, ${OPACITY})`;\n    const pink = `rgba(237, 30, 121, ${OPACITY})`;\n    const darkOrange = `rgba(241, 90, 36, ${OPACITY})`;\n    const lightOrange = `rgba(251, 176, 59, ${OPACITY})`;\n    const blue = `rgba(41, 171, 226, ${OPACITY})`;\n    const lightOrangeOpaque = `rgb(251, 176, 59)`;\n    let arcColorPairs = [\n      [blue, blue],\n      [purple, pink],\n      [darkOrange, lightOrange],\n      [blue, blue],\n      [pink, purple],\n      [lightOrange, darkOrange]\n    ];\n\n    // For the cities on the Globe, we use large, transparent label points for the tooltips, so that\n    // the user can hover near the city and see the tooltip. We then use smaller, colored points to\n    // mark the city locations. By doing this, the city dots can be small, but the tooltips work\n    // even if the user is hovering in the general area.\n    // TODO: Adjust the size of the \"large, transparent label points\" based on map zoom, so that\n    // they get smaller as you zoom in. This way, tooltips will work for two points that are very\n    // close together if you zoom in enough. Ideally, we would also merge such tooltips when zoomed\n    // out. It would also make sense to adjust the size of the \"smaller, colored points\" based on\n    // map zoom!!!\n    return (\n      <Fade\n        timeout={1000}\n        when={showGlobe}\n      >\n      <Globe\n        ref={(el) => { this.globeEl = el }}\n\n        globeImageUrl={theme.uriGlobeEarthImage}\n        showGlobe={showGlobe}\n        showAtmosphere={showGlobe}\n        animateIn={false}\n        backgroundColor='rgba(0,0,0,0)'\n        width={width}\n        height={height}\n\n        arcsData={subnetArcs}\n        arcStroke={0.5}\n        arcDashLength={0.4}\n        arcDashGap={1}\n        arcDashInitialGap={() => Math.random()}\n        arcDashAnimateTime={4000}\n        arcColor={(subnetArc) => arcColorPairs[subnetArc.subnetIndex % arcColorPairs.length]}\n        arcsTransitionDuration={0}\n  \n        labelsData={cities}\n        labelColor={() => `rgba(0,0,0,0)`}\n        labelText={() => ''}\n        labelLabel={city => {\n          let labelHtml = `<div>${city.name}</div>`;\n          // If there is more than one data center in a city, append the key to each nodes line.\n          if (city.dataCenters.length === 1) {\n            labelHtml +=\n              `<div>${city.dataCenters[0].totalNodes} node${city.dataCenters[0].totalNodes > 1 ? 's' : ''}</div>`;\n          }\n          else {\n            city.dataCenters.forEach((dataCenter) => {\n              labelHtml +=\n                `<div>${dataCenter.totalNodes} node${dataCenter.totalNodes > 1 ? 's' : ''} (${dataCenter.key})</div>`;\n            });\n          }\n          return labelHtml;\n        }} \n        labelDotRadius={d => 1}\n\n        pointsData={cities}\n        pointColor={() => lightOrangeOpaque}\n        pointAltitude={0}\n        pointRadius={0.3}\n        pointsMerge={true}\n      />\n      </Fade>\n    );\n  }\n\n  /**\n   * Calculates the distance in km between two points using the Haversine formula. \n   * @param {Number} lat1 Latitude of the first point.\n   * @param {Number} lng1 Longitude of the first point.\n   * @param {Number} lat2 Latitude of the second point.\n   * @param {Number} lng2 Longitude of the second point.\n   * @return {Number} The distance in km between the two points.\n   * @private\n   */\n  calculateDistance(lat1, lng1, lat2, lng2) {\n    if (lat1 === lat2 && lng1 === lng2) {\n      return 0;\n    }\n    const dLat = this.deg2rad(lat2-lat1);\n    const dLon = this.deg2rad(lng2-lng1); \n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * \n      Math.sin(dLon/2) * Math.sin(dLon/2); \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n    const earthRadiusKm = 6371;\n    const distanceKm = earthRadiusKm * c;\n    return distanceKm;\n  }\n  \n  /**\n   * Converts degrees to radians. \n   * @param {Number} deg The angle in degrees.\n   * @return {Number} The angle in radians.\n   * @private\n   */\n  deg2rad(deg) {\n    return deg * Math.PI / 180;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(DfinityEarthWithSize);\n","/**\n * @file DataCentersPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Grid } from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport Fade from 'react-reveal/Fade';\nimport CpuCoresCard from '../CpuCoresCard/CpuCoresCard';\nimport MemoryCard from '../MemoryCard/MemoryCard';\nimport NodesCard from '../NodesCard/NodesCard';\nimport SubnetsCard from '../SubnetsCard/SubnetsCard';\nimport DfinityEarth from '../DfinityEarth/DfinityEarth';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst GridEarth = styled(Grid)`\n  && {\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: 50%;\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: 50%;\n      `) ||\n      ((breakpoint === Breakpoints.SM) && `\n        width: 100%;\n      `) ||\n      ((breakpoint === Breakpoints.XS) && `\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridCard = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: 100%;\n      `) ||\n      ((breakpoint === Breakpoints.SM) && `      \n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.XS) && `     \n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridCardLast = styled(GridCard)`\n  && {\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n  }\n`;\n\nconst CardCpuCores = styled(CpuCoresCard)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        max-width: ${Constants.DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP + 'px'};\n      `)\n    }\n  }\n`;\n\nconst CardMemory = styled(MemoryCard)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        max-width: ${Constants.DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP + 'px'};\n      `)\n    }\n  }\n`;\n\nconst CardNodes = styled(NodesCard)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        max-width: ${Constants.DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP + 'px'};\n      `)\n    }\n  }\n`;\n\nconst CardSubnets = styled(SubnetsCard)`\n  && {\n    background: ${props => props.theme.colorDataCentersCardBackground};\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        max-width: ${Constants.DATA_CENTERS_PAGE_CARD_MAX_WIDTH_MD_AND_UP + 'px'};\n      `)\n    }\n  }\n`;\n\n/**\n * Component for the data centers page.\n */\nclass DataCentersPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Use a special background color for this component.\n    const { handleSetIsPageDataCenters } = this.props;\n    handleSetIsPageDataCenters(true);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Remove the special background color for this component.\n    const { handleSetIsPageDataCenters } = this.props;\n    handleSetIsPageDataCenters(false);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, isThemeDark } = this.props;\n    return (\n      <Grid container\n        direction='row'\n        justify='space-between'\n        alignItems='center'\n      >\n        <GridEarth item breakpoint={breakpoint}>\n          <DfinityEarth isThemeDark={isThemeDark} />\n        </GridEarth>\n        <GridSection container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridCard item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <CardSubnets breakpoint={breakpoint} cardIndex={0} />\n            </Fade>\n          </GridCard>\n          <GridCard item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <CardNodes breakpoint={breakpoint} cardIndex={1} />\n            </Fade>\n          </GridCard>\n          <GridCard item breakpoint={breakpoint}>\n            <Fade\n              delay={100}\n              timeout={500}\n            >\n              <CardCpuCores breakpoint={breakpoint} cardIndex={2} />\n            </Fade>\n          </GridCard>\n          <GridCardLast item breakpoint={breakpoint}>\n            <Fade\n              delay={150}\n              timeout={500}\n            >\n              <CardMemory breakpoint={breakpoint} cardIndex={3} />\n            </Fade>\n          </GridCardLast>\n        </GridSection>\n      </Grid>\n    );\n  }\n}\n\nexport default DataCentersPage;\n","/**\n * @file getRandomInt\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\nimport getRandomNumber from './getRandomNumber'\n\n/**\n * Return a random integer between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random integer.\n * @private\n */\nexport default function getRandomInt(start, end) {\n  return Math.floor(getRandomNumber(start, end));\n}\n","/**\n * @file getRandomNumber\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n /**\n * Return a random number between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random number.\n * @private\n */\nexport default function getRandomNumber(start, end) {\n  return Math.random() * (end - start) + start;\n}\n","/**\n * @file DfinitySymbolD3\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport * as PIXI from 'pixi.js';\nimport * as filters from 'pixi-filters';\nimport getRandomInt from '../../utils/getRandomInt';\n\n/**\n * This class draws the DFINITY logo infinity symbol using a d3 force-directed graph.\n */\nclass DfinitySymbolD3 extends Component  {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * True for logo mode, where the symbol is shaped more like the DFINITY logo, and various\n     * adjustments are made with the intention of rendering at small sizes (e.g., in an app bar).\n     */\n    logoMode: PropTypes.bool,\n    /**\n     * The width of the component, or 0 for use built-in simulationWidth.\n     */\n    width: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a DfinitySymbolD3 object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.dragStarted = this.dragStarted.bind(this);\n    this.dragged = this.dragged.bind(this);\n    this.dragEnded = this.dragEnded.bind(this);\n    this.tick = this.tick.bind(this);\n    this.rotate = this.rotate.bind(this);\n\n    // A force-directed graph can be a difficult beast to tame. Most changes to settings in this\n    // class will likely change the shape of the graph and require changing other settings through\n    // trial and error in order to get the graph back to the DFINITY logo shape. Any number of the\n    // settings below could be made into constructor parameters. Another idea would be to pre-define\n    // different groups of settings that produce a shape which approximates the DFINITY logo\n    // shape, and then allow the caller to specify which group of settings to use. Since there is\n    // currently only one group of settings defined, settings groups would not currently be useful.\n\n    // PixiJS members.\n    this.stage = null;\n    this.renderer = null;\n    this.linksGraphics = null;\n\n    // Code is customized for this window size. Modifying these values will cause the d3 force-\n    // directed graph to change shape unless scaleToWindow is adjusted to keep the object the same\n    // size.\n    this.simulationWidth = this.props.logoMode ? 780 : 800;\n    this.simulationHeight = 400;\n    this.scaleSimulationToPixi = 1.0;\n\n    this.centerX = this.simulationWidth / 2;\n    this.centerY = this.simulationHeight / 2;\n    this.scaleToWindow = this.simulationWidth / 2 * 0.8;\n\n    // Specify the number of symbol nodes and the number of vertices for each symbol node. The\n    // current values of 36 symbol nodes and 8 vertices (octagon) was arrived at after trial and\n    // error to produce a shape which resembles the DFINITY logo.\n    this.numSymbolNodes = this.props.logoMode ? 41 : 36;\n    this.numVertices = this.props.logoMode ? 10 : 8;\n    this.numNodes = this.numSymbolNodes * this.numVertices;\n\n    // Specify the charge of the symbol nodes and the non-symbol nodes. \"A positive value causes\n    // nodes to attract each other, similar to gravity, while a negative value causes nodes to\n    // repel each other, similar to electrostatic charge.\" The default value is -30, but we specify\n    // much lower in magnitude values because we do not want the nodes to repel very much. For the\n    // fixed nodes which draw the infinity symbol, we do not want any force at all.\n    this.forceManyBodyStrengthSymbolNodes = 0;\n    this.forceManyBodyStrengthNonSymbolNodes = this.props.logoMode ? -3.75 : -9;\n\n    // Specify the link distance. \"The link force pushes linked nodes together or apart according to\n    // the desired link distance.\" The default value is 30.\n    this.linkDistance = this.props.logoMode ? 19 : 14;\n\n    // Specify node and link drawing properties.\n    this.nodeStrokeWidth = 1;\n    this.nodeRadius = 4.5;\n    this.nodeRadiusSelected = this.props.logoMode ? 11 : 5.5;\n    // DCM 01.mar.2019: Always use same node fill color as stroke color.\n    //this.nodeFillColorArray = [127, 127, 127];\n    this.nodeSelectedFillColorArray = [255, 255, 255];\n    this.nodeSelectedStrokeColorArray = [255, 255, 255];\n    this.nodeOpacity = 0.5;\n    this.nodeOpacitySelected = 0.75;\n    this.linkStrokeWidth = this.props.logoMode ? 3 : 2; // why do lines get blurry when this is increased?\n    this.linkStrokeWidthIncreaseAtMagnitude = this.props.logoMode ? 1.5 : 0;\n\n    // Adjust the symbolHeightMultiplier to make the symbol shorter or taller. A value of 1.0\n    // represents normal height.\n    this.symbolHeightMultiplier = this.props.logoMode ? 1.325 : 1.111111;\n\n    // The initial rotateOffset does two things: it determines which part of the symbol goes in\n    // front (blue is on top in the DFINITY logo), and it makes a small adjustment to align the\n    // colors correctly.\n    this.rotateOffset = this.numSymbolNodes / 2 - 1.2;\n\n    // The rotate interval frequency.\n    this.rotateTimeMs = 33.3; // 30 frames/sec max\n\n    // The amount of rotation for every rotate interval.\n    this.rotateAmount = this.props.logoMode ? 0 : 0.000015;\n\n    // The currently selected node index.\n    this.selectedNodeIndex = -1;\n\n    // New block timer members.\n    this.newBlockNodeStartTime = null;\n    this.newBlockLinksStartTime = null;\n    this.newBlockNodeTimerMs = 1000;\n    this.newBlockLinksTimerMs = 1500;\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Set the value of scaleSimulationToPixi based on the width prop. We scale the force-directed\n    // graph by keeping the d3 simulation as is, since it is finely tuned to appear in a certain\n    // way, and instead scaling coordinates from simulation space to PixiJS space when rendering.\n    // In this way, the graph can be scaled to any width by changing the widths prop. A width prop\n    // of 0 indicates no scaling. Note that drag/drop is not currently implemented when scaling.\n    this.scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n\n    // Draw the DFINITY logo infinity symbol.\n    this.draw();\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Cleanup PixiJS properties.\n    this.renderer.destroy();\n    this.stage.destroy();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @public\n   */\n  componentDidUpdate() {\n    // Make the necessary PixiJS adjustments when the width prop changes.\n    const scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n    if (this.scaleSimulationToPixi !== scaleSimulationToPixi) {\n      this.scaleSimulationToPixi = scaleSimulationToPixi;\n\n      // Resize the renderer.\n      this.pixiResizeRenderer();\n\n      // Draw circles for the nodes.\n      if (this.nodesData) {\n        this.nodesData.forEach((node) => { this.pixiDrawNode(node); });\n      }\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return <div ref={(el) => { this.element = el }}/>;\n  }\n\n  /**\n   * Draw the DFINITY logo infinity symbol.\n   * @public\n   */\n  draw() {\n    // Set up the nodes and links of the graph.\n    this.addNodes();\n    this.addLinks();\n\n    // Create the d3 simulation.\n    this.createSimulation();\n\n    // Set up PixiJS to draw the simulation.\n    this.pixiSetup();\n  }\n\n  /**\n   * Add a new block.\n   * @public\n   */\n  addNewBlock() {\n    // If there is a selected node still animating, stop the animation and return it to normal.\n    if (this.newBlockNodeStartTime) {\n        const node = this.nodesData[this.selectedNodeIndex];\n        this.pixiDrawNode(node);\n    }\n\n    // Select node and enable new block timers.\n    this.selectedNodeIndex = getRandomInt(0, this.numNodes - 1);\n    this.newBlockNodeStartTime = this.newBlockLinksStartTime = new Date();\n  }\n\n  /**\n   * Populate nodesData[] with the nodes of the graph.\n   * @private\n   */\n  addNodes() {\n    // Add the symbol nodes to nodesData[] at fixed positions (fx, fy). _fx and _fy save the fixed\n    // position across drag/drop operations, linkCount is used to calculate the strength of the\n    // force of a link.\n    this.nodesData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      const pos = this.getNodePosition(i);\n      this.nodesData.push({\n        'fx' : pos[0],\n        'fy' : pos[1],\n        '_fx' : pos[0],\n        '_fy' : pos[1],\n        'linkCount' : 0});\n    }\n\n    // Add the non-symbol nodes at non-fixed positions.\n    for (let i = this.numSymbolNodes; i < this.numNodes; i++) {\n      this.nodesData.push({'linkCount' : 0});\n    }\n  }\n\n  /**\n   * Get the position of the node with the specified index.\n   * @param {Number} index The node index.\n   * @return {Array} An array containing the [x, y] position of the node.\n   * @private\n   */\n  getNodePosition(index) {\n    const t =\n      2 * Math.PI * ((index + this.rotateOffset) % this.numSymbolNodes) / this.numSymbolNodes;\n    const scale = 2 / (3 - Math.cos(2 * t));\n    const fx = this.centerX + scale * Math.cos(t) * this.scaleToWindow;\n    const fy =\n      this.centerY +\n      scale * Math.sin(2 * t) * this.symbolHeightMultiplier / 2 * this.scaleToWindow;\n    return [fx, fy];\n  }\n\n  /**\n   * Populate linksData[] with the links of the graph.\n   * @private\n   */\n  addLinks() {\n    this.linksData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {   \n      // Define the ith link of the symbol.\n      const indexSymbol = i;\n      const indexSymbolNext = (i + 1) % this.numSymbolNodes;\n      this.addLink(indexSymbol, indexSymbolNext, 0, 1);\n           \n      // Link at top of shape, parallel to symbol link, invisible.\n      const vertexShapeTop = this.numVertices / 2;\n      const indexShapeTop = vertexShapeTop * this.numSymbolNodes + i;\n      const indexShapeTopNext =\n        vertexShapeTop * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;\n      this.addLink(indexShapeTop, indexShapeTopNext, 1, 0);\n      \n      // Cross bar, invisible. This pulls the graph in and provides stability. Rather than linking\n      // the cross bar from the link at top of shape to the symbol index, we link it from the shape\n      // node prior. Found that this produces a more interesting graph. Note that previously this\n      // code was in the for loop below and executed when j === 3, but with the same parameters to\n      // addLink(). This produced a slightly different/thicker graph.\n      const vertexShapeAlmostTop = vertexShapeTop - 1;\n      const indexShapeAlmostTop = vertexShapeAlmostTop * this.numSymbolNodes + i;\n      this.addLink(indexShapeAlmostTop, indexSymbol, 1, 0);\n      \n      for (let j = 0; j < this.numVertices; j++) {     \n        // Define the jth link of the shape (e.g., if numVertices is 6, shape is 6-sided polygon).\n        const index = j * this.numSymbolNodes + i;\n        const indexShapeNext = (index + this.numSymbolNodes) % this.numNodes;\n        this.addLink(index, indexShapeNext, 0, 0.7);\n      \n        // Define the jth link of the spiral which spirals around the shapes. Two spirals are used\n        // for better stability.\n        const indexSpiralNext =\n          (j + 1) % this.numVertices * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;            \n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n      }\n    }\n  }\n\n  /**\n   * Add a link of the graph to linksData[].\n   * @param {Number} indexSource The index of the source node of the link.\n   * @param {Number} indexTarget The index of the target node of the link.\n   * @param {Number} The strength of the link, or 0 for use default strength.\n   * @param {Number} opacity The opacity of the link.\n   * @private\n   */\n  addLink(indexSource, indexTarget, strength, opacity) {\n    this.linksData.push({\n      'source': indexSource.toString(),\n      'target': indexTarget.toString(),\n      '_strength' : strength,\n      'opacity' : opacity,\n      '_opacity' : opacity});\n    this.nodesData[indexSource].linkCount++;\n    this.nodesData[indexTarget].linkCount++;\n  }\n\n  /**\n   * Create the d3 simulation of the force-directed graph. Nodes and links must be added before\n   * calling this function.\n   * @private\n   */\n  createSimulation() {\n    // Create a new simulation containing the nodes.\n    this.simulation = d3.forceSimulation(this.nodesData);\n\n    // Add a charge to each node and a centering force.\n    this.simulation\n      .force('charge', d3.forceManyBody()\n        .strength((d) => {\n          return d.index < this.numSymbolNodes ?\n            this.forceManyBodyStrengthSymbolNodes : this.forceManyBodyStrengthNonSymbolNodes;\n        }))\n      .force('center', d3.forceCenter(this.simulationWidth / 2, this.simulationHeight / 2));\n\n    // Add the links, with the strength of the force of a link optionally specified by the link's\n    // _strength.\n    const link_force =  d3.forceLink(this.linksData)\n      .strength((d) => {\n        return d._strength > 0 ?\n          d._strength :\n          1 / Math.min(d.source.linkCount, d.target.linkCount); // default\n      })\n      .distance(this.linkDistance);        \n      this.simulation.force('links', link_force);\n\n    // Call tick() for every tick.\n    this.simulation.on('tick', this.tick);\n\n    // Set the decay rate to zero to have the simulation run forever at the current alpha.\n    this.simulation.alphaDecay(0);\n\n    // Rotate the symbol using a d3 interval.\n    if (this.rotateAmount)\n      d3.interval(this.rotate, this.rotateTimeMs);\n  }\n\n  /**\n   * Set up PixiJS to draw the simulation using WebGL (with Canvas fallback for older platforms).\n   * @private\n   */\n  pixiSetup() {\n    // Disable PIXI console log message.\n    PIXI.utils.skipHello();\n    \n    // Create PixiJS WebGL renderer element to hold the force-directed graph. We set the resolution\n    // to 3, then auto-resize the window back down to the correct size in order to increase the\n    // resolution. With resolution set to 1, it looks low resolution and pixelated.\n    this.stage = new PIXI.Container();\n    this.renderer = PIXI.autoDetectRenderer(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi,\n      {antialias: true, transparent: true, resolution: 3}\n    );\n    this.renderer.autoResize = true;\n    this.pixiResizeRenderer();\n    this.element.appendChild(this.renderer.view);\n\n    // Draw circles for the nodes.\n    this.nodesData.forEach((node) => {\n      node.graphics = new PIXI.Graphics();\n      this.pixiDrawNode(node);\n      this.stage.addChild(node.graphics);\n    });\n\n    // Set up drag/drop.\n    d3.select(this.renderer.view)\n      .call(d3.drag()\n        .container(this.renderer.view)\n        .subject(() => this.simulation.find(d3.event.x, d3.event.y))\n        .on('start', this.dragStarted)\n        .on('drag', this.dragged)\n        .on('end', this.dragEnded));\n\n    // Set up graphics for the links.\n    this.linksGraphics = new PIXI.Graphics();\n    this.stage.addChild(this.linksGraphics);\n  }\n\n  /**\n   * Resize the PixiJS renderer based on the width and height.\n   * @private\n   */\n   pixiResizeRenderer() {\n    this.renderer.resize(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Move the PixiJS position of the specified node.\n   * @param {Object} node The node to move the position of.\n   * @private\n   */\n  pixiMoveNode(node) {\n    let { x, y, graphics } = node;\n    graphics.position =\n      new PIXI.Point(x * this.scaleSimulationToPixi, y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the circle for a node.\n   * @param {Object} node The node to draw the circle for.\n   * @param {Number} selectedNodeMagnitude If this is the currently selected node, indicates the\n   * magnitude percentage (0 - 1.0) of the selection. A value of 0 indicates that this is not the\n   * currently selected node.\n   * @private\n   */\n  pixiDrawNode(node, selectedNodeMagnitude = 0) {\n    let nodeStrokeColor;\n    let nodeFillColor;\n    let nodeOpacity;\n    let nodeRadius;\n    if (selectedNodeMagnitude) {\n      // Scale the node properties based on the magnitude.\n      nodeStrokeColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedStrokeColorArray,\n          this.getNodeStrokeColorArray(node),\n          selectedNodeMagnitude));\n      nodeFillColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedFillColorArray,\n          // DCM 01.mar.2019: Always use same node fill color as stroke color.\n          this.getNodeStrokeColorArray(node),\n          //this.props.logoMode ? this.getNodeStrokeColorArray(node) : this.nodeFillColorArray,\n          selectedNodeMagnitude));\n      nodeOpacity =\n        this.nodeOpacity + (this.nodeOpacitySelected - this.nodeOpacity) * selectedNodeMagnitude;\n      nodeRadius =\n        this.nodeRadius + (this.nodeRadiusSelected - this.nodeRadius) * selectedNodeMagnitude;\n    }\n    else {\n      nodeStrokeColor = this.rgbNumberFromArray(this.getNodeStrokeColorArray(node));\n      // DCM 01.mar.2019: Always use same node fill color as stroke color.\n      nodeFillColor = nodeStrokeColor;\n      //nodeFillColor = this.rgbNumberFromArray(\n      //  this.props.logoMode ?\n      //    this.getNodeStrokeColorArray(node) : this.nodeFillColorArray);\n\n      nodeOpacity = this.nodeOpacity;\n      nodeRadius = this.nodeRadius;\n    }\n\n    node.graphics.clear();\n    node.graphics.lineStyle(\n      this.nodeStrokeWidth * this.scaleSimulationToPixi,\n      nodeStrokeColor,\n      nodeOpacity);\n    node.graphics.beginFill(nodeFillColor, nodeOpacity);\n    if (selectedNodeMagnitude) {\n      node.graphics.filters = [\n        new filters.GlowFilter(\n          5,                          // distance\n          4 * selectedNodeMagnitude,  // outerStrength\n          0,                          // innerStrength\n          nodeStrokeColor,            // color\n          0.5)                        // quality\n      ]\n    }\n    else\n      node.graphics.filters = null;\n    node.graphics.drawCircle(0, 0, nodeRadius * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the line for a link between nodes.\n   * @param {Object} link The link to draw the line for.\n   * @param {Number} linkMagnitude Indicates the magnitude percentage (0 - 1.0) of the link opacity\n   * boost.\n   * @private\n   */\n  pixiDrawLink(link, linkMagnitude) {\n    let { source, target, opacity } = link;\n    const linkOpacity = opacity + 0.25 * (this.props.logoMode ? 1 : linkMagnitude);\n    this.linksGraphics.alpha = linkOpacity;\n    this.linksGraphics.lineStyle(\n      (this.linkStrokeWidth + this.linkStrokeWidthIncreaseAtMagnitude * linkMagnitude) *\n        this.scaleSimulationToPixi,\n      this.rgbNumberFromArray(this.getColorArray(link.index, this.linksData.length)));\n      this.linksGraphics.moveTo(\n        source.x * this.scaleSimulationToPixi, source.y * this.scaleSimulationToPixi);\n      this.linksGraphics.lineTo(\n        target.x * this.scaleSimulationToPixi, target.y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Return the color based on the specified index and number of indices.\n   * @param {Number} index The index to return the color of.\n   * @param {Number} numIndices The total number of indices used to determine the color.\n   * @return {Array} The color arrayof the specified index.\n   * @private\n   */\n  getColorArray(index, numIndices) {\n    // These colors come from the DFINITY logo.\n    const purple = [99,38,132];\n    const pink = [237,30,121];\n    const darkOrange = [241,90,36];\n    const lightOrange = [251,176,59];\n    const blue = [41,171,226];\n\n    // Certain color transitions in the DFINITY logo are small, others are gradual.\n    const transitionPercentSmall = 0.02;\n    const transitionPercentGradual = 0.1;\n    const transitionIndicesSmall = numIndices * transitionPercentSmall;\n    const transitionIndicesGradual = numIndices * transitionPercentGradual;\n\n    // The number of indices of each color was determined by analyzing the DFINITY logo.\n    const lastPurpleIndex = numIndices * 0.15 - transitionIndicesGradual;\n    const lastPinkIndex =\n      lastPurpleIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastDarkOrangeIndex =\n      lastPinkIndex + transitionIndicesSmall + numIndices * 0.15 - transitionIndicesGradual;\n    const lastLightOrangeIndex =\n      lastDarkOrangeIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastBlueIndex =\n      lastLightOrangeIndex + transitionIndicesSmall + numIndices * 0.4 - transitionIndicesSmall;\n\n    // Determine the color based on the color zone the index is in.\n    if (index <= lastPurpleIndex)\n      return purple;\n    else if (index <= lastPurpleIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastPurpleIndex) / transitionIndicesGradual;\n      return this.gradientColor(pink, purple, percentage);\n    }\n    else if (index <= lastPinkIndex)\n      return pink;\n    else if (index <= lastPinkIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastPinkIndex) / transitionIndicesSmall;\n      return this.gradientColor(darkOrange, pink, percentage);\n    }\n    else if (index <= lastDarkOrangeIndex)\n      return darkOrange;\n    else if (index <= lastDarkOrangeIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastDarkOrangeIndex) / transitionIndicesGradual;\n      return this.gradientColor(lightOrange, darkOrange, percentage);\n    }\n    else if (index <= lastLightOrangeIndex)\n      return lightOrange;\n    else if (index <= lastLightOrangeIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastLightOrangeIndex) / transitionIndicesSmall;\n      return this.gradientColor(blue, lightOrange, percentage);\n    }     \n    else if (index <= lastBlueIndex)\n      return blue;\n    else\n    {\n      const percentage = (index - lastBlueIndex) / transitionIndicesSmall;\n      return this.gradientColor(purple, blue, percentage);\n    }\n  }\n\n  /**\n   * Return the gradient color based on the specified parameters.\n   * @param {Array} color1 The RGB array of color 1.\n   * @param {Array} color2 The RGB array of color 2.\n   * @param {Number} percent The percentage of the gradient.\n   * @return {Array} The RGB array of the gradient color.\n   * @private\n   */\n  gradientColor(color1, color2, percent) {\n    const p1 = percent;\n    const p2 = 1 - p1;\n    const rgb = [\n      Math.round(color1[0] * p1 + color2[0] * p2),\n      Math.round(color1[1] * p1 + color2[1] * p2),\n      Math.round(color1[2] * p1 + color2[2] * p2)];\n    return rgb;\n  }\n\n  /**\n   * Return the RGB color number corresponding to the specified RGB color array.\n   * @param {Array} array The RGB array.\n   * @return {Number} The RGB color number.\n   * @private\n   */\n  rgbNumberFromArray(array) {\n    let color = 0;\n    array.forEach(element => {\n      color = (color << 8) + element;\n    });\n    return Number(color);\n  }\n\n/**\n   * Return the stroke color of the specified node.\n   * @param {Object} node The node to return the stroke color of.\n   * @return {Array} The stroke color array of the specified node.\n   * @private\n   */\n  getNodeStrokeColorArray(node) {\n    return this.getColorArray(node.index % this.numSymbolNodes, this.numSymbolNodes)\n  }\n\n/**\n   * Start dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragStarted(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0.3).restart();\n    }\n    d3.event.subject.fx = d3.event.subject.x;\n    d3.event.subject.fy = d3.event.subject.y;\n  }\n\n  /**\n   * Continue dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragged(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    d3.event.subject.fx = d3.event.x;\n    d3.event.subject.fy = d3.event.y;\n  }\n\n  /**\n   * Stop dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragEnded(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0);\n    }\n    d3.event.subject.fx = d3.event.subject._fx;\n    d3.event.subject.fy = d3.event.subject._fy;\n  }\n\n  /**\n   * Update the node and link positions on each tick of the simulation.\n   * @private\n   */\n  tick() {\n    // Move the node positions.\n    this.nodesData.forEach((node) => { this.pixiMoveNode(node); });\n\n    // Animate the selected node to grow larger and change to white, then shrink smaller and change\n    // back to original colors.\n    if (this.newBlockNodeStartTime != null) {\n      const node = this.nodesData[this.selectedNodeIndex];\n      const elapsedMs = new Date() - this.newBlockNodeStartTime;\n      if (elapsedMs > this.newBlockNodeTimerMs) {\n        // Draw a normal node circle.\n        this.pixiDrawNode(node);\n\n        // Disable new block node timer.\n        this.newBlockNodeStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        const selectedNodeMagnitude =\n          (elapsedMs <= this.newBlockNodeTimerMs / 2 ?\n            elapsedMs :\n            this.newBlockNodeTimerMs - elapsedMs) /\n          (this.newBlockNodeTimerMs / 2);\n\n        // Draw a modifified node circle based on the magnitude.\n        this.pixiDrawNode(node, selectedNodeMagnitude);\n      }\n    }\n\n    // Calculate link magnitude.\n    let linkMagnitude = 0;\n    if (this.newBlockLinksStartTime != null) {\n      const elapsedMs = new Date() - this.newBlockLinksStartTime;\n      if (elapsedMs > this.newBlockLinksTimerMs) {\n        // Disable new block links timer.\n        this.newBlockLinksStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        linkMagnitude =\n          elapsedMs <= this.newBlockLinksTimerMs / 3 ?\n            elapsedMs / (this.newBlockLinksTimerMs / 3) :\n            (this.newBlockLinksTimerMs - elapsedMs) /\n              (this.newBlockLinksTimerMs * 2 / 3);\n      }\n    }\n\n    // Draw lines for the links.\n    this.linksGraphics.clear();\n    this.linksData.forEach((link) => {\n      this.pixiDrawLink(link, linkMagnitude);\n    });\n    this.linksGraphics.endFill();\n\n    this.renderer.render(this.stage);\n  }\n\n  /**\n   * Rotate the symbol.\n   * @param {Number} elapsed Elapsed time since the timer became active.\n   * @private\n   */\n  rotate(elapsed) {\n    // In order to increase efficiency, it might be possible to decrease the frequency at which we\n    // rotate, then use d3 transition so that the movement is smooth. The problem is, non-symbol\n    // nodes will still be moving based on the simulation, so it's unknown whether this will\n    // actually improve performance. Since it does not seem like d3.interval() can be counted on to\n    // call this function with precision, this may not be a feasible approach, since if you do not\n    // know when the next call will be, you cannot know how long to make the transition.\n    // See webpage \"D3.selectAll(...).transition() Explained\"\n    // (http://bl.ocks.org/Kcnarf/9e4813ba03ef34beac6e)\n\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      this.rotateOffset += this.rotateAmount;\n      const pos = this.getNodePosition(i);\n      this.nodesData[i].fx = this.nodesData[i]._fx = pos[0];\n      this.nodesData[i].fy = this.nodesData[i]._fy = pos[1];\n    }\n  }\n}\n\nexport default DfinitySymbolD3;\n","/**\n * @file ImageLinkGrid\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Grid\n} from '@material-ui/core';\nimport Fade from 'react-reveal/Fade';\n\n/**\n * This component displays a grid of images that link to other pages.\n */\nclass ImageLinkGrid extends Component {\n  static propTypes = {\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * An array of objects describing the image links, where each object contains:\n     *  src: The <img> src attribute.\n     *  height: The <img> height attribute.\n     *  alt: The <img> alt attribute.\n     *  href: The <a> href attribute.\n     */    \n    imageLinks: PropTypes.array.isRequired,\n    /**\n     * The Material-UI justify prop to apply to each row.\n     * @see See [Material-UI Grid documentation](https://material-ui.com/api/grid/).\n     */\n    justifyRow: PropTypes.string,\n    /**\n     * The amount of space between rows.\n     */\n    marginBetweenRows: PropTypes.number,\n    /**\n     * The number of images per row.\n     */\n    perRow: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a ImageLinkGrid object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.state = {widths: [], maxHeight: 0};\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    this.calculateMaxImageDimensions();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    // Determine whether the props have changed.\n    let arePropsChanged = false;\n    const { imageLinks } = this.props;\n    if (imageLinks.length === prevProps.imageLinks.length) {\n      imageLinks.forEach((imageLink, index) => {\n        if (imageLink.src !== prevProps.imageLinks[index].src ||\n            imageLink.height !== prevProps.imageLinks[index].height)\n          arePropsChanged = true;\n      });\n    }\n    else\n      arePropsChanged = true;\n\n    // Only calculate max image dimensions if props have changed, otherwise we would cause an\n    // infinite loop of updating the state.\n    if (arePropsChanged)\n      this.calculateMaxImageDimensions();\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      className,\n      imageLinks,\n      justifyRow,\n      marginBetweenRows,\n      perRow\n    } = this.props;\n    const { widths } = this.state;\n\n    // Make the container slightly taller than the max image height to account for Grid bug where\n    // there are a few pixels of whitespace added under the image. This '+ 4' can be removed once\n    // the Grid bug is fixed.\n    const containerHeight = this.state.maxHeight + 4;\n\n    // The image grid is an array of rows, where each row is an array of image objects. Creating\n    // a two-dimensional array like this is an extra step, but makes the code below more readable.\n    // TODO: Consider an alternate approach to solve the problem of the center column of 3-item rows\n    // not being centered. Use the same maxWidth for all cells. For cells on left, left align. For\n    // cells on right, right align. For all other cells, center. To do this, we'd likely need a cell\n    // within a cell, so that columns could first be centered relative to the column, then placed\n    // in a second wrapper cell (Grid) aligned either left, right, or center. Would need to test\n    // with different row lengths and numbers of images to see what effect it has on spacing for all\n    // conditions. It seems possible this would look wrong for rows longer than 3, since the spacing\n    // at the edges could be greater because the cell within the cell at the edges is not centered.!!!\n    let imageLinkGrid = [];\n    let maxWidthColumn = Array(perRow).fill(0);\n    for (let i = 0; i < imageLinks.length;) {\n      let row = [];\n      const isShortRow = imageLinks.length - i < perRow;\n      for (var j = 0; j < perRow && i < imageLinks.length; j++) {\n        // Do not update maxWidthColumn[j] if this is a short row (last row with fewer columns).\n        if (!isShortRow && widths[i])\n          maxWidthColumn[j] = Math.max(widths[i], maxWidthColumn[j]);\n        row.push(imageLinks[i++]);\n      }\n      imageLinkGrid.push(row);\n    }\n    \n    return (\n      <div className={className}>\n        {imageLinkGrid.map((row, rowIndex) => {\n          const isShortRow = row.length < perRow;\n          return (\n            <Grid container\n              direction='row'\n              // Always set justify='space-around' for a short row (last row with fewer columns).\n              justify={isShortRow ? 'space-around' : (justifyRow || 'space-between')}\n              alignItems='center'\n              key={rowIndex}\n              style={{ marginTop: (rowIndex && marginBetweenRows) ? marginBetweenRows : 0 }}\n            >\n              {row.map((imageLink, columnIndex) => {\n                const index = rowIndex * perRow + columnIndex;\n                return (\n                  <Grid container\n                    direction='column'\n                    justify='center'\n                    alignItems='center'\n                    key={columnIndex}\n                    // Do not use maxWidthColumn[j] if this is a short row (last row with fewer\n                    // columns).\n                    style={{\n                      width: isShortRow ? widths[index] : maxWidthColumn[columnIndex],\n                      height: containerHeight\n                    }}\n                  >\n                    <Grid item>\n                      <a href={imageLink.href} target='_blank' rel='noopener noreferrer'>\n                        <Fade\n                          bottom\n                          delay={index * 50}\n                          timeout={500}\n                        >\n                          <img\n                            src={imageLink.src}\n                            height={imageLink.height}\n                            alt={imageLink.alt}>\n                          </img>\n                        </Fade>\n                      </a>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /**\n   * Calculate the maximum width and height of all images by loading the images. This allows us to\n   * create Grid containers for the images which are all the same size. An image will be\n   * horizontally and vertically centered in its container.\n   * @private\n   */\n  calculateMaxImageDimensions() {\n    const { imageLinks } = this.props;\n    this.setState({\n      widths: Array(imageLinks.length).fill(0),\n      maxHeight: 0\n    });\n\n    // Calculate the widths[] and maxHeight of the images by loading them.\n    imageLinks.forEach((imageLink, index) => {\n      const img = new Image();\n      img.onload = event => {\n        const { naturalWidth, naturalHeight } = event.currentTarget;\n        if (naturalHeight) {\n          // Scale width from natural width to image link width.\n          const width = imageLink.height / naturalHeight * naturalWidth;\n          this.setState(prevState => ({\n            widths: [\n              ...prevState.widths.slice(0, index),\n              width,\n              ...prevState.widths.slice(index + 1)\n            ],\n            maxHeight: Math.max(imageLink.height, prevState.maxHeight)\n          }));\n        }\n      }\n      // Setting src after we have set the onload event will cause the event to be triggered after\n      // the image has loaded.\n      img.src = imageLink.src;\n    });\n  }\n}\n\nexport default ImageLinkGrid;\n","/**\n * @file AboutPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { Parallax } from 'react-parallax';\nimport Fade from 'react-reveal/Fade';\nimport Flip from 'react-reveal/Flip';\nimport LightSpeed from 'react-reveal/LightSpeed';\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\nimport 'react-coinbase-commerce/dist/coinbase-commerce-button.css';\nimport TrackablePage from '../TrackablePage/TrackablePage';\nimport DfinitySymbolD3 from '../DfinitySymbolD3/DfinitySymbolD3';\nimport ImageLinkGrid from '../ImageLinkGrid/ImageLinkGrid';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport bannerXHorizon from './banner-x-horizon.png';\nimport dfinityExplorerLogo from './dfinity-explorer-logo-large.png';\nimport dfinityLogoDark from './dfinity-logo-dark-mode.png';\nimport dfinityLogoLight from './dfinity-logo-light-mode.png';\nimport githubOctocat from './github-octocat.png';\nimport materialUiLogo from './material-ui-logo.png';\nimport nomicsLogoDark from './nomics-logo-dark-mode.png';\nimport nomicsLogoLight from './nomics-logo-light-mode.png';\nimport reactLogo from './react-logo-text.png';\nimport styledComponentsLogoDark from './styled-components-logo-dark-mode.png';\nimport styledComponentsLogoLight from './styled-components-logo-light-mode.png';\n\nconst PaperParallax = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorBodyBackground};\n    /* Allows shadow to overlap the element below it. */\n    position: relative;\n  }\n`;\n\nconst GridParallax = styled(Grid)`\n  && {\n    height: 280px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 200px;       \n      `\n    }\n  }\n`;\n\nconst TypographyParallax = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 200;\n    color: ${props => props.theme.colorAboutHeaderText};  \n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};\n      `)\n    }\n  }\n`;\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-top: 96px;\n    padding-bottom: 96px;\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: 64px;\n        padding-bottom: 64px;\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n      `)\n    }\n  }\n`;\n\nconst GridSectionPrimary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundPrimary};\n  }\n`;\n\nconst GridSectionSecondary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundSecondary};\n  }\n`;\n\nconst GridItem = styled(Grid)`\n  && {\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_LG/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_MD/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridImageLeft = styled(GridItem)`\n  && {\n    order: 1;\n  }\n`;\n\nconst GridImageRight = styled(GridItem)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 1;\n      `\n    }\n  }\n`;\n\nconst GridSymbolLeft = styled(GridImageLeft)`\n  && {\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-top: -32px;\n        margin-bottom: -32px;     \n      `\n    }\n  }\n`;\n\nconst GridText = styled(GridItem)`\n  && {\n    ${({ breakpoint }) =>\n    (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        margin-top: 48px;\n      `\n    }\n  }\n`;\n\nconst GridTextLeft = styled(GridText)`\n  && {\n    order: 1;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst GridTextRight = styled(GridText)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst TypographyHeading = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 300;\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};       \n      `\n    }\n  }\n`;\n\n// From the Material Design documentation: \"The ideal length for legibility of body copy is 40-60\n// characters per line.\"\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\nconst StyledA = styled.a`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    text-decoration: none;\n    &:hover {\n      cursor: pointer;\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst ImgSection = styled.img`\n  && {\n    max-width: 100%;\n    max-height: 300px;\n  }\n`;\n\nconst SpanHeart = styled.span`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n  }\n`;\n\nconst PaperTwitter = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorAboutTwitterBackground};\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        max-width: 640px;\n        margin: auto;\n      `\n    }\n  }\n`;\n\nconst ImageLinkGridThanks = styled(ImageLinkGrid)`\n  && {\n    margin-top: ${Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT/2 + 'px'};\n  }\n`;\n\n/**\n * Component for the about page.\n */\nclass AboutPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getHeader()}\n        {this.getSectionMission()}\n        {this.getSectionOpenSource()}\n        {this.getSectionCommunity()}\n        {this.getSectionContributors()}\n        {this.getSectionThanks()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the header based on the current breakpoint.\n   * @return {Object} The elements for the header based on the current breakpoint.\n   * @private\n   */\n  getHeader()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <PaperParallax elevation={2}>\n        <Fade timeout={1200}>\n          <Parallax bgImage={bannerXHorizon} bgImageAlt='banner' bgImageStyle={{marginTop: '-100px'}} strength={500}>\n            <GridParallax container direction='column' justify='center' alignItems='flex-start' breakpoint={breakpoint}>\n              <Grid item>\n                <TypographyParallax breakpoint={breakpoint}>\n                  An open-source network dashboard\n                  <br />\n                  built by the DFINITY community\n                </TypographyParallax>\n              </Grid>\n            </GridParallax>\n          </Parallax>\n        </Fade>\n      </PaperParallax>\n    );\n  }\n\n  /**\n   * Return the elements for the Mission section based on the current breakpoint.\n   * @return {Object} The elements for the Mission section based on the current breakpoint.\n   * @private\n   */\n  getSectionMission()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridSymbolLeft item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <DfinitySymbolD3\n              width={this.getDfinitySymbolD3Width()}\n              isThemeDark={isThemeDark}\n            />\n          </Grid>\n        </GridSymbolLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Mission\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Our mission is to provide a bridge between you and the '}\n              <StyledA href={Constants.URI_ABOUT_DFINITY} target='_blank' rel='noopener noreferrer'>DFINITY</StyledA>\n              {' Internet Computer, allowing you to easily search for and retrieve information '}\n              {'which is useful in a format that is understandable, with everything you want to '}\n              {'know right at your fingertips.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'DFINITY aims to build their organization into a “NASA for decentralization”. '}\n              {'There have in fact been '}\n              <StyledA href={Constants.URI_NASA_EXPLORER} target='_blank' rel='noopener noreferrer'>89 NASA “Explorer” missions</StyledA>\n              {' since 1958, carrying a wide variety of scientific investigations. We want DFINITY '}\n              {'Explorer to be the perfect vehicle to explore the DFINITY universe.'}\n              &nbsp;&nbsp;🚀\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the elements for the Open Source section based on the current breakpoint.\n   * @return {Object} The elements for the Open Source section based on the current breakpoint.\n   * @private\n   */\n  getSectionOpenSource()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Open, Transparent, Trusted\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is an open-source project under the '}\n              <StyledA href={Constants.URI_GITHUB_MIT_LICENSE} target='_blank' rel='noopener noreferrer'>MIT license</StyledA>\n              {', providing transparency, reliability, and security.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'We believe that all dashboards of public blockchains should be open source. '}\n              {'If you’re going to trust a dashboard to provide timely, accurate, and '}\n              {'uncensored information, the code should be open for all to see.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Flip right timeout={800}>\n              <ImgSection\n                src={dfinityExplorerLogo}\n                alt='logo'>\n              </ImgSection>\n            </Flip>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Community section based on the current breakpoint.\n   * @return {Object} The elements for the Community section based on the current breakpoint.\n   * @private\n   */\n  getSectionCommunity()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    const theme = isThemeDark ? 'dark' : 'light';\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridImageLeft item breakpoint={breakpoint}>\n          <Fade timeout={2000}>\n            {/* Twitter card looks better at elevation 2 than 1, since card/body are same color. */}\n            <PaperTwitter elevation={2} breakpoint={breakpoint}>\n              <TwitterTimelineEmbed\n                sourceType='profile'\n                screenName='dfinityexplorer'\n                theme={theme}\n                options={{height: 432}}\n                // Setting key here is a bit of a hack. Since TwitterTimelineEmbed only uses the theme\n                // prop when it mounts, the TwitterTimelineEmbed theme will not change if the user changes\n                // the theme after the page has loaded. By setting key to the theme string, we can force a\n                // remount of TwitterTimelineEmbed when the theme changes, so that it picks up the change\n                // to its theme prop. \n                key={theme}\n                noFooter\n                transparent\n              />\n            </PaperTwitter>\n          </Fade>\n        </GridImageLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Community\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Follow '}\n              <StyledA href={Constants.URI_TWITTER_DFINITY_EXPLORER} target='_blank' rel='noopener noreferrer'>@dfinityexplorer</StyledA>\n              {' on Twitter to learn about the latest DFINITY-related news, videos, and events.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'Learn more about our project on '}\n              <StyledA href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT} target='_blank' rel='noopener noreferrer'>GitHub</StyledA>\n              {'.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n  \n  /**\n   * Return the elements for the Contributors section based on the current breakpoint.\n   * @return {Object} The elements for the Contributors section based on the current breakpoint.\n   * @private\n   */\n  getSectionContributors()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container\n        direction='row'\n        justify='space-between'\n        alignItems='center'\n        breakpoint={breakpoint}\n      >\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Contributors\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is a cooperative effort, made with '}\n              <SpanHeart>♥</SpanHeart>\n              {' by '}\n              <StyledA href={Constants.URI_GITHUB_DYLAN} target='_blank' rel='noopener noreferrer'>@dylancm4</StyledA>\n              {', '}\n              <StyledA href={Constants.URI_GITHUB_TODD} target='_blank' rel='noopener noreferrer'>@toddkitchens</StyledA>\n              {', and a friendly bunch of '}\n              <StyledA href={Constants.URI_GITHUB_CONTRIBUTORS} target='_blank' rel='noopener noreferrer'>contributors</StyledA>\n              {' from the DFINITY community. We are passionate about DFINITY and we want to build '}\n              {'things to help it to succeed.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <LightSpeed right timeout={800}>\n              <ImgSection\n                src={githubOctocat}\n                alt='GitHub Octocat'>\n              </ImgSection>\n            </LightSpeed>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Thanks section based on the current breakpoint.\n   * @return {Object} The elements for the Thanks section based on the current breakpoint.\n   * @private\n   */\n  getSectionThanks() {\n    // Possibly add: Recharts!!!\n    const { breakpoint, isThemeDark } = this.props;\n    \n    // Adjust heights based on the perceived size of images (i.e., some images contain smaller logos\n    // to make room for the text, so those images need to be enlarged).\n    const reactHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.3;\n    const styledComponentsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.4;\n    const materialUiHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT;\n    const nomicsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 0.9;\n    const dfinityHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.2;\n\n    // Define the image link objects for the ImageLinkGrid.\n    const imageLinks = [\n      {\n        src: reactLogo,\n        height: reactHeight,\n        alt: 'React logo',\n        href: Constants.URI_ABOUT_REACT\n      },\n      {\n        src: isThemeDark ? styledComponentsLogoDark : styledComponentsLogoLight,\n        height: styledComponentsHeight,\n        alt: 'Styled Components logo',\n        href: Constants.URI_ABOUT_STYLED_COMPONENTS\n      },\n      {\n        src: materialUiLogo,\n        height: materialUiHeight,\n        alt: 'Material-UI logo',\n        href: Constants.URI_ABOUT_MATERIAL_UI\n      },\n      {\n        src: isThemeDark ? nomicsLogoDark : nomicsLogoLight,\n        height: nomicsHeight,\n        alt: 'Nomics logo',\n        href: Constants.URI_ABOUT_NOMICS\n      },\n      {\n        src: isThemeDark ? dfinityLogoDark : dfinityLogoLight,\n        height: dfinityHeight,\n        alt: 'DFINITY logo',\n        href: Constants.URI_ABOUT_DFINITY\n      }\n    ];\n\n    // Calculate images per row based on the current breakpoint.\n    let imagesPerRow;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        imagesPerRow = 1;\n        break;\n      case Breakpoints.SM:\n        imagesPerRow = 2;\n        break;\n      default:\n        imagesPerRow = 3;\n        break;\n    }\n\n    return (\n      <GridSectionPrimary container\n        direction='column'\n        justify='flex-start'\n        alignItems='stretch'\n        breakpoint={breakpoint}\n      >\n        <Grid container direction='row' justify='center' alignItems='center'>\n          <Grid item>\n            <Fade bottom timeout={500}>\n              <TypographyHeading breakpoint={breakpoint}>Special thanks to:</TypographyHeading>\n            </Fade>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ImageLinkGridThanks\n            imageLinks={imageLinks}\n            perRow={imagesPerRow}\n            justifyRow={breakpoint === Breakpoints.XS ? 'center' : 'space-between'}\n            marginBetweenRows={Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT / 2}\n          />\n        </Grid>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @return {Number} The width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @private\n   */\n  getDfinitySymbolD3Width() {\n    const { breakpoint, isDesktopDrawerOpen } = this.props;\n    const contentWidth =  window.innerWidth - (isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0);\n\n    let width;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_XS*2;\n        break;\n      case Breakpoints.SM:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_SM*2;\n        break;\n      case Breakpoints.MD:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_MD*3/2;\n        // This is a bit of a hack, but we scale the symbol slightly larger because it does not fill\n        // its window all the way to the edges.\n        width *= 1.2;\n        break;\n      default:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_LG*3/2;\n        width *= 1.2;\n        break;\n    }\n    return width;\n  }\n}\n\nexport default AboutPage;\n","/**\n * @file DEAppBar\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport {\n  AppBar,\n  Divider,\n  Drawer,\n  Fade,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  SwipeableDrawer,\n  SvgIcon,\n  Toolbar,\n  Typography,\n  Zoom\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport RevealFade from 'react-reveal/Fade';\nimport RevealZoom from 'react-reveal/Zoom';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent'\nimport {\n  Breakpoints,\n  getBreakpoint,\n  isBreakpointLessOrEqualTo,\n  isBreakpointDesktop\n} from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport dfinityExplorerLogo from './dfinity-explorer-logo.png';\n\nconst StyledAppBar = styled(AppBar)`\n  && {\n    background: ${props => props.theme.colorAppBarBackground};\n    /* AppBar is above Drawer */\n    z-index: ${zIndex.drawer + 1};\n  }\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  && {\n    padding-left: 12px;\n    padding-right: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: 4px;\n        padding-right: 4px;\n      `\n    }\n  }\n`;\n\nconst ImgProductIcon = styled.img`\n  && {\n    margin-left: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 0px;\n      `\n    }\n  }\n`;\n\n// Specify font-size in px rather than rem for app name, since it should not change based on browser\n// settings.\nconst TypographyAppName = styled(Typography)`\n  && {\n    margin-top: 1px;\n    font-family: 'Istok Web', sans-serif;\n    font-weight: bold;\n    font-size: 20px;\n    user-select: none;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: 14px;\n      `\n    }\n  }\n`;\n\nconst TypographyDfinity = styled(TypographyAppName)`\n  && {\n    margin-left: 12px;\n    letter-spacing: 12px;\n    color: ${props => props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 8.4px;\n        letter-spacing: 8.4px;\n      `\n    }\n  }\n`;\n\n/**\n * A separate div is used for the border between DFINITY and Explorer, so that it can be\n * animated. The height is based on TypographyAppName font-size, and matches exactly what\n * \"border-right: 1px solid\" in TypographyDfinity would look like.\n */\nconst TypographyBorder = styled.div`\n  && {\n    width: 0px;\n    height: 29px;\n    border-right: ${props => '1px solid ' + props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 20.3px;\n      `\n    }\n  }\n`;\n\nconst TypographyExplorer = styled(TypographyAppName)`\n  && {\n    margin-left: 14px;\n    letter-spacing: 7.5px;\n    color: ${props => props.theme.colorAppBarExplorerText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 9.8px;\n        letter-spacing: 5.25px;\n      `\n    }\n  }\n`;\n\nconst StyledIconButton = styled(IconButton)`\n  && {\n    color: ${props => props.theme.colorAppBarTextButton};\n\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorAppBarTextButton};\n      }\n    }\n  }\n`;\n\nconst StyledMenuIcon = styled(MenuIcon)`\n  && {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nconst StyledSwipeableDrawer = styled(({ ...other }) => (\n  <SwipeableDrawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n  }\n`;\n\nconst StyledDrawer = styled(({ ...other }) => (\n  <Drawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n    border-right:\n      ${props => props.theme.isDark ? `1px solid ${props.theme.colorBodyBackground}` : '0px'};\n  }\n`;\n\nconst StyledDivider = styled(Divider)`\n  && {\n    background: ${props => props.theme.colorDrawerDivider};\n  }\n`;\n\nconst DrawerListItemIcon = styled(ListItemIcon)``;\n\nconst DrawerSvgIcon = styled(SvgIcon)`\n  && {\n    padding-left: 2px;\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nconst DrawerListItemText = styled(({ ...other }) => (\n  <ListItemText {...other} classes={{ primary: 'primary' }} />\n))``;\n\nconst DrawerListItem = styled(ListItem)`\n  && {\n    padding-top: 9.5px;\n    padding-bottom: 9.5px;\n    ${DrawerListItemIcon} {\n      margin-left: 8px;\n      color: ${\n        props => props.selected ?\n          props.theme.colorDrawerIconTextSelected :\n          props.theme.colorDrawerIcon\n      };\n    }\n    ${DrawerListItemText} {\n      margin-left: -8px;\n      & .primary {\n        font-family: ${Constants.FONT_PRIMARY};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_BUTTON};\n        font-weight: ${props => props.selected ? 600 : 400};\n        color: ${\n          props => props.selected ?\n            props.theme.colorDrawerIconTextSelected :\n            props.theme.colorDrawerText\n        };\n      }\n    }\n  }\n`;\n\n// DCM 2019-02-02: I tried for a few hours to change the \"selected\" background color of a ListItem\n// using styled-components, but I was unsuccessful even though it seems like the code below should\n// work. I was able to change the color using the Material-UI withStyles() technique of styling:\n// https://stackoverflow.com/questions/50371315/how-to-override-material-ui-menuitem-selected-background-color\n// However, that technique does not have access to props, so it would not work well with the way\n// we're currently doing theming. There is likely a way to get this working in a way that does not\n// use styled-components, but the \"selected\" background color is not important enough to spend the\n// time on this issue right now.\n/*const DrawerListItem = styled(({ ...other }) => (\n  <ListItem classes={{ selected: 'selected' }} {...other} />\n))`\n  && {\n    background: pink;\n    &:focus {\n      background: cyan;\n    }\n    &:hover {\n      background: red;\n    }\n    // All of the above colors work, but the \"selected\" background color does not work.\n    & .selected {\n      background: blue !important;\n    }\n  }\n`;*/\n\n/**\n * The App Bar provides content and actions related to the current screen.\n */\nclass DEAppBar extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * Callback fired when the App Bar is resized.\n     */\n    handleAppBarResize: PropTypes.func,\n    /**\n     * Callback fired when the desktop drawer (large screens) menu button is clicked.\n     */\n    handleDesktopDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * Callback fired when the mobile drawer (small screens) menu button is clicked.\n     */\n    handleMobileDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True if the mobile drawer (small screens) is open.\n     */    \n    isMobileDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired,\n    /**\n     * Reference to the <HashRouter> element.\n     */\n    routerRef: PropTypes.object\n  };\n\n  /**\n   * Create a DEAppBar object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.toolbarDivRef = React.createRef();\n\n    // Bind to make 'this' work in callbacks.\n    this.isActiveRoute = this.isActiveRoute.bind(this);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <Fragment>\n        {/* Toolbar shim to compensate for AppBar position='fixed'. */}\n        <div ref={this.toolbarDivRef}>\n          <Toolbar />\n        </div>\n        <Fade in={true} timeout={200} mountOnEnter unmountOnExit>\n          <StyledAppBar elevation={2}>\n            {this.getToolbarDefaultContent()}\n          </StyledAppBar>\n        </Fade>\n        {this.getDrawer()}\n      </Fragment>\n    );\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    super.handleWindowResize();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n\n    // Close the mobile drawer (small screens) when screen is resized larger, so that it does not\n    // reappear when the screen is resized smaller.\n    if (isBreakpointDesktop() && this.props.isMobileDrawerOpen)\n      this.props.handleMobileDrawerMenuClick();\n  }\n\n  /**\n   * Return the elements for the toolbar based on the current breakpoint.\n   * @return {Object} The elements for the toolbar based on the current breakpoint.\n   * @private\n   */\n  getToolbarDefaultContent() {\n    const breakpoint = getBreakpoint();\n    return (\n      <StyledToolbar breakpoint={breakpoint}>\n        <Grid container alignItems='center' wrap='nowrap'>\n          <Grid item>\n            {this.getMenuButton()}\n          </Grid>\n          {this.getAppTitle()}\n        </Grid>\n      </StyledToolbar>\n    );\n  }\n\n  /**\n   * Return the elements for the menu button on the current breakpoint.\n   * @return {Object} The elements for the menu button based on the current breakpoint.\n   * @private\n   */\n  getMenuButton() {\n    const { handleMobileDrawerMenuClick, handleDesktopDrawerMenuClick } = this.props;\n    return (\n      <Zoom in={true} timeout={300}>\n        <StyledIconButton\n          onClick={\n            isBreakpointDesktop() ? handleDesktopDrawerMenuClick : handleMobileDrawerMenuClick\n          }\n        >\n          <StyledMenuIcon />\n        </StyledIconButton>\n      </Zoom>\n    );\n  }\n\n  /**\n   * Return the elements for the app title based on the current breakpoint.\n   * @return {Object} The elements for the app title based on the current breakpoint.\n   * @private\n   */\n  getAppTitle() {\n    const breakpoint = getBreakpoint();\n    return (\n      <Link\n        style={{ textDecoration: 'none' }}\n        to='/'\n      >\n        <Grid container alignItems='center' justify='flex-start' wrap='nowrap'>\n          <RevealFade timeout={500}>\n            <Grid item>\n              <ImgProductIcon\n                src={dfinityExplorerLogo}\n                height={this.getProductIconHeight()}\n                alt='logo'\n                breakpoint={breakpoint}\n              >\n              </ImgProductIcon>\n            </Grid>\n            <Grid item>\n              <TypographyDfinity breakpoint={breakpoint}>DFINITY</TypographyDfinity>\n            </Grid>\n            <RevealZoom timeout={350}>\n              <Grid item>\n                <TypographyBorder breakpoint={breakpoint} />\n              </Grid>\n            </RevealZoom>\n            <Grid item>\n              <TypographyExplorer breakpoint={breakpoint}>ExpIorer</TypographyExplorer>\n            </Grid>\n          </RevealFade>\n        </Grid>\n      </Link>\n    );\n  }\n\n  /**\n   * Return the height of the product icon based on the current breakpoint.\n   * @return {Number} The height of the product icon based on the current breakpoint.\n   * @private\n   */\n  getProductIconHeight() {\n    if (isBreakpointLessOrEqualTo(Breakpoints.XS))\n      return 23.8;\n    else\n      return 34;\n  }\n\n  /**\n   * Return the elements for the drawer based on the current breakpoint.\n   * @return {Object} The elements for the drawer based on the current breakpoint.\n   * @private\n   */\n  getDrawer() {\n    // The Material Design documentation states: \"Modal drawer: In a responsive layout grid, at a\n    // defined minimum breakpoint of at least 600dp width, a standard drawer should be replaced with\n    // a modal drawer.\" We use a modal drawer for breakpoints xs and sm (i.e., up to 960px).\n    if (isBreakpointDesktop()) {\n      return (\n        <StyledDrawer variant='persistent' open={this.props.isDesktopDrawerOpen}>\n          {this.getDrawerContent()}\n        </StyledDrawer>\n      );\n    }\n    else {\n      return (\n        <StyledSwipeableDrawer\n          open={this.props.isMobileDrawerOpen}\n          onOpen={this.props.handleMobileDrawerMenuClick}\n          onClose={this.props.handleMobileDrawerMenuClick}\n        >\n          <div onClick={this.props.handleMobileDrawerMenuClick}>\n            {this.getDrawerContent()}\n          </div>\n        </StyledSwipeableDrawer>\n      );\n    }  \n  }\n\n  /**\n   * Return the elements for the drawer content based on the current breakpoint.\n   * @return {Object} The elements for the drawer content based on the current breakpoint.\n   * @private\n   */\n  getDrawerContent() {\n    /* Use constants for paths such as 'about' everywhere in code!!! */\n    return (\n      <Fragment>\n        {/* Shim to compensate for AppBar position='fixed'. */}\n        <Toolbar/>\n        <List>\n          {/* Could change this to be more generic by calling map() on an array of route objects\n              which contain info such as: path, menu text, and icon.\n              See: https://stackoverflow.com/questions/50801093/material-ui-drawer-selection-how-to-route\n          */}\n          <DrawerListItem button component={Link} to='/' selected={this.isActiveRoute('/')}>\n            <DrawerListItemIcon>\n              <HomeIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Home' selected={this.isActiveRoute('/')} />\n          </DrawerListItem>\n          <DrawerListItem button component={Link} to='/datacenters' selected={this.isActiveRoute('/datacenters')}>\n            <DrawerListItemIcon>\n              <DrawerSvgIcon>\n                <path d={Constants.ICON_SVG_PATH_DATA_CENTERS} />\n              </DrawerSvgIcon>\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Data Centers' />\n          </DrawerListItem>            \n          <StyledDivider />\n          <DrawerListItem button component={Link} to='/about' selected={this.isActiveRoute('/about')}>\n            <DrawerListItemIcon>\n              <InfoIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='About' />\n          </DrawerListItem>\n        </List>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Return true if the specified route matches the current route, false otherwise.\n   * @param {String} routeName The name of the route to check.\n   * @return {Boolean} True if the specified route matches the current route, false otherwise.\n   * @private\n   */\n  isActiveRoute(routeName) {\n    return this.props.location.pathname === routeName;\n  }\n};\n\nexport default withRouter(DEAppBar);","/**\n * @file Footer\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Checkbox,\n  Grid,\n  Icon,\n  IconButton,\n  SvgIcon,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\nimport { Breakpoints, getBreakpoint } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst FooterToolbar = styled(Toolbar)`\n  && {\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: ${Constants.FOOTER_HEIGHT + 'px'};\n    padding-left: 0px;\n    padding-right: 0px;\n    text-align: center;\n    background: ${props => props.theme.colorFooterBackground};\n    color: ${props => props.theme.colorFooterTextIcon};\n  }\n`;\n\nconst OneThirdGrid = styled(Grid)`\n  && {\n    width: 33.33%;\n  }\n`;\n\nconst LeftThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-left: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst RightThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-right: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-right: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst FooterTypography = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: 12px;\n  }\n`;\n\nconst FooterA = styled.a`\n  && {\n    color: ${props => props.theme.colorFooterTextIcon};\n    text-decoration: underline;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst AwesomeIconButtonGrid = styled(Grid)`\n  && {\n    // Look into why this is needed!!!\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        min-width: 35px;\n      `\n    }\n  }\n`;\n\nconst AwesomeIconButton = styled(IconButton)`\n  && {\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: inherit;\n      }\n    }\n  }\n`;\n\nconst AwesomeIcon = styled(Icon)`\n  && {\n    font-size: 20px;\n  }\n`;\n\nconst ThemeCheckbox = styled(Checkbox)`\n  && {\n    width: 26px;\n    height: 26px;\n    color: ${props => props.theme.colorFooterTextIcon};\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorFooterTextIcon};\n      }\n    }\n  }\n`;\n\nconst ThemeSvgIcon = styled(SvgIcon)`\n  && {\n    margin-top: -1px;\n    font-size: 17px;\n  }\n`;\n\n/**\n * The Footer provides information related to the current screen.\n */\nclass Footer extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * Callback fired when the value of the theme checkbox changes.\n     */    \n    handleThemeChange: PropTypes.func.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    loadCSS(Constants.URI_CDN_FONT_AWESOME, document.querySelector('#insertion-point-jss'));\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const breakpoint = getBreakpoint();\n    return (\n      <FooterToolbar>\n        <LeftThirdGrid\n          container\n          direction='row'\n          justify='flex-start'\n          alignItems='center'\n          breakpoint={breakpoint}\n        >\n          <Grid item>\n            <FooterTypography color='inherit'>\n              {this.getCopyrightText()}\n            </FooterTypography>\n          </Grid>\n        </LeftThirdGrid>\n        <OneThirdGrid container direction='column' justify='center' alignItems='center'>\n          { this.props.location.pathname === '/' &&\n            <Grid item>\n              <FooterTypography color='inherit'>\n                {'('}\n                <FooterA href={Constants.URI_ABOUT_NOMICS} target='_blank' rel='noopener noreferrer'>\n                  {this.getNomicsText()}\n                </FooterA>\n                {')'}\n              </FooterTypography>\n            </Grid>\n          }\n        </OneThirdGrid>\n        <RightThirdGrid\n          container direction='row'\n          justify='flex-end'\n          alignItems='center'\n          wrap='nowrap'\n          breakpoint={breakpoint}\n        >\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_TWITTER_DFINITY_EXPLORER}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-twitter' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-github' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <ThemeCheckbox\n              color='default'\n              checked={this.props.isThemeDark}\n              icon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_LIGHT} />\n                </ThemeSvgIcon>\n              }\n              checkedIcon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_DARK} />\n                </ThemeSvgIcon>\n              }\n              onChange={this.props.handleThemeChange}\n            />\n          </AwesomeIconButtonGrid>\n        </RightThirdGrid>\n      </FooterToolbar>\n    );\n  }\n\n  /**\n   * Return the copyright text.\n   * @return {String} the copyright text.\n   * @private\n   */\n   getCopyrightText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return '© 2021 dfinityexplorer';\n      case Breakpoints.SM:\n        return '© 2021 dfinityexplorer contributors';\n      default:\n        return '© 2021 dfinityexplorer contributors | All rights reserved';\n    }\n  }\n\n  /**\n   * Return the Nomics attribution link text.\n   * @return {String} The Nomics attribution link text.\n   * @private\n   */\n  getNomicsText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return 'Pricing Data By Nomics';\n      default:\n        return 'Crypto Market Cap & Pricing Data Provided By Nomics';\n    }\n  }\n};\n\nexport default withRouter(Footer);\n","/**\n * @file App\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, an dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport {\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport ReactGA from 'react-ga';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Grid\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { GlobalStyle, themeLight, themeDark } from './theme/globalStyle';\nimport HomePage from './Components/HomePage/HomePage';\nimport DataCentersPage from './Components/DataCentersPage/DataCentersPage';\nimport AboutPage from './Components/AboutPage/AboutPage';\nimport DEAppBar from './Components/DEAppBar/DEAppBar';\nimport Footer from './Components/Footer/Footer';\nimport Constants from './constants';\nimport { getBreakpoint, isBreakpointDesktop } from './utils/breakpoint';\n\n// Initialize the react-ga library. We do not need user consent to be GDPR compliant. According to\n// Google: \"When using Google Analytics Advertising Features, you must also comply with the European\n// Union User Consent Policy.\" Advertising Features are not enabled for DFINITY Explorer. Under the\n// GDPR, an IP address is considered Personally Identifiable Information (PII), so we anonymize the\n// IP addresses sent to Google Analytics.\nReactGA.initialize(Constants.GOOGLE_ANALYTICS_TRACKING_ID);\nReactGA.set({ anonymizeIp: true });\n\nconst ContentDiv = styled.div`\n  && {\n    margin-left: ${props => props.isDesktopDrawerOpen ? Constants.DRAWER_WIDTH + 'px' : '0px'};\n    transition: ${props =>\n      'margin-left ' +\n      (props.isDesktopDrawerOpen ? duration.enteringScreen : duration.leavingScreen) +\n      'ms ' +\n      easing.easeInOut};\n  }\n`;\n\nconst ContentGrid = styled(Grid)`\n  && {\n    /* The height of the body + footer is the total viewport height - App Bar height. */\n    min-height: calc(100vh - ${props => props.appbarheight + 'px'});\n  }\n`;\n\n/**\n * Top-level component of the app.\n */\nclass App extends Component {\n  /**\n   * Create an App object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      routerRef: null,\n      appBarHeight: 0,\n      isDesktopDrawerEnabled: true,\n      isMobileDrawerOpen: false,\n      isPageDataCenters: false,\n      isThemeDark: true\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.setRouterRef = this.setRouterRef.bind(this);\n    this.handleAppBarResize = this.handleAppBarResize.bind(this);\n    this.handleDesktopDrawerMenuClick = this.handleDesktopDrawerMenuClick.bind(this);\n    this.handleMobileDrawerMenuClick = this.handleMobileDrawerMenuClick.bind(this);\n    this.handleSetIsPageDataCenters = this.handleSetIsPageDataCenters.bind(this);\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Load fonts.\n    loadCSS(\n      Constants.URI_CDN_GOOGLE_FONTS,\n      document.querySelector('#insertion-point-jss')\n    );\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      appBarHeight,\n      isDesktopDrawerEnabled,\n      isMobileDrawerOpen,\n      isPageDataCenters,\n      isThemeDark,\n      routerRef\n    } = this.state;\n\n    const isDesktopDrawerOpen = isDesktopDrawerEnabled && isBreakpointDesktop();\n    const breakpoint = getBreakpoint(isDesktopDrawerOpen);\n\n    return (\n      <Fragment>\n        <GlobalStyle isPageDataCenters={isPageDataCenters} theme={this.getTheme()} />\n        <ThemeProvider theme={this.getTheme()}>\n          <HashRouter ref={this.setRouterRef}>\n            <div>\n              <DEAppBar\n                handleAppBarResize={this.handleAppBarResize}\n                handleDesktopDrawerMenuClick={this.handleDesktopDrawerMenuClick}\n                handleMobileDrawerMenuClick={this.handleMobileDrawerMenuClick}\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                routerRef={routerRef}\n              />\n              <ContentDiv\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                /* Workaround to force react-parallax to update when drawer opens/closes. Perhaps */\n                /* file an issue with react-parallax that Parallax does not update when */\n                /* margin-left changes. */\n                onTransitionEnd={() => window.dispatchEvent(new Event('resize'))}\n              >\n                <ContentGrid\n                  container\n                  direction='column'\n                  justify='space-between'\n                  appbarheight={appBarHeight}\n                >                 \n                  <Route\n                    exact path='/'\n                    render={(props) => \n                      <HomePage\n                        {...props}\n                        breakpoint={breakpoint}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/datacenters'\n                    render={(props) =>\n                      <DataCentersPage\n                        {...props}\n                        breakpoint={breakpoint}\n                        handleSetIsPageDataCenters={this.handleSetIsPageDataCenters}\n                        isThemeDark={isThemeDark}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/about'\n                    render={(props) => \n                      <AboutPage\n                        {...props}\n                        breakpoint={breakpoint}\n                        isDesktopDrawerOpen={isDesktopDrawerOpen}\n                        isThemeDark={isThemeDark}\n                      />\n                    }\n                  />\n                  <Footer                  \n                    handleThemeChange={this.handleThemeChange}\n                    isThemeDark={isThemeDark}\n                  />\n                </ContentGrid>\n              </ContentDiv>\n            </div>\n          </HashRouter>\n        </ThemeProvider>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Set a reference to the HashRouter element.\n   * @public\n   */\n  setRouterRef(element) {\n    this.setState({ routerRef: element });\n  };\n\n  /**\n   * Callback fired when the App Bar is resized.\n   * @private\n   */\n  handleAppBarResize(height) {\n    this.setState({\n      appBarHeight: height\n    });\n  }\n\n  /**\n   * Callback fired when the desktop drawer (large screens) menu button is clicked.\n   * @private\n   */\n  handleDesktopDrawerMenuClick(contentRect) {\n    this.setState({\n      isDesktopDrawerEnabled: !this.state.isDesktopDrawerEnabled\n    });\n  }\n\n  /**\n   * Callback fired when the mobile drawer (small screens) menu button is clicked.\n   * @private\n   */\n  handleMobileDrawerMenuClick(contentRect) {\n    this.setState({\n      isMobileDrawerOpen: !this.state.isMobileDrawerOpen\n    });\n  }\n\n  /**\n   * Callback fired when the value isPageDataCenters changes.\n   * @param {Boolean} isPageDataCenters The value of isPageDataCenters.\n   * @public\n   */\n  handleSetIsPageDataCenters(isPageDataCenters) {\n    this.setState({\n      isPageDataCenters: isPageDataCenters\n    });\n  }\n\n  /**\n   * Callback fired when the value of the Footer component theme checkbox changes.\n   * @param {Object} event The event source of the callback.\n   * @param {Number} checked The checked value of the switch.\n   * @public\n   */\n  handleThemeChange(event, checked) {\n    this.setState({\n      isThemeDark: checked\n    });\n  }\n\n  /**\n   * Return the current theme.\n   * @return {Object} The current theme.\n   * @private\n   */\n  getTheme() {\n    return this.state.isThemeDark ? themeDark : themeLight;\n  }\n}\n\nexport default App;\n","/**\n * @file index\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\ndocument.getElementById(\"root\"));\n"],"sourceRoot":""}