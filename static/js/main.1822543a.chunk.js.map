{"version":3,"sources":["Components/AboutPage/banner-x-horizon.png","Components/AboutPage/dfinity-explorer-logo-large.png","Components/AboutPage/dfinity-logo-dark-mode.png","Components/AboutPage/dfinity-logo-light-mode.png","Components/AboutPage/github-octocat.png","Components/AboutPage/material-ui-logo.png","Components/AboutPage/nomics-logo-dark-mode.png","Components/AboutPage/nomics-logo-light-mode.png","Components/AboutPage/react-logo-text.png","Components/AboutPage/styled-components-logo-dark-mode.png","Components/AboutPage/styled-components-logo-light-mode.png","Components/DEAppBar/dfinity-explorer-logo.png","constants.js","theme/globalStyle.js","Components/ResponsiveComponent/ResponsiveComponent.js","Components/TrackablePage/TrackablePage.js","Components/DashCard/DashCard.js","Components/BlocksCard/BlocksCard.js","Components/BlockTimeCard/BlockTimeCard.js","Components/MessagesCard/MessagesCard.js","Components/PriceCard/PriceCard.js","utils/breakpoint.js","Components/AreaChart/AreaChart.js","Components/BlocksChart/BlocksChart.js","Components/CanistersChart/CanistersChart.js","Components/MessagesChart/MessagesChart.js","Components/PriceChart/PriceChart.js","Components/HomePage/HomePage.js","utils/getRandomInt.js","utils/getRandomNumber.js","Components/DfinitySymbolD3/DfinitySymbolD3.js","Components/ImageLinkGrid/ImageLinkGrid.js","Components/AboutPage/AboutPage.js","Components/DEAppBar/DEAppBar.js","Components/Footer/Footer.js","App.js","index.js"],"names":["module","exports","Constants","Object","freeze","URI_CDN_FONT_AWESOME","URI_CDN_GOOGLE_FONTS","URI_ABOUT_DFINITY","URI_ABOUT_NOMICS","URI_ABOUT_MATERIAL_UI","URI_ABOUT_REACT","URI_ABOUT_STYLED_COMPONENTS","URI_GITHUB_CONTRIBUTORS","URI_GITHUB_DFINITY_EXPLORER_PROJECT","URI_GITHUB_DYLAN","URI_GITHUB_MIT_LICENSE","URI_GITHUB_TODD","URI_NASA_EXPLORER","URI_TWITTER_DFINITY_EXPLORER","COLOR_DFINITY_BLACK","COLOR_DFINITY_BLACK_LIGHTER","COLOR_DFINITY_BLACK_DARKER","COLOR_DFINITY_LIGHT_ORANGE","COLOR_DFINITY_DARK_ORANGE","COLOR_DFINITY_BLUE_400","COLOR_DFINITY_BLUE_500","COLOR_DFINITY_BLUE_600","COLOR_DFINITY_BLUE_700","COLOR_DFINITY_BLUE_800","COLOR_DFINITY_BLUE_900","COLOR_TEXT_LIGHT","COLOR_DARK_TEXT","COLOR_DARK_TEXT_FADED","COLOR_TEXT_DARKER","COLOR_TEXT_DARKEST","COLOR_LIGHT_TEXT_FADED","COLOR_DARK_BODY_DARKER_MAC_OS","COLOR_DARK_BODY_LIGHTER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_YOUTUBE","COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX","COLOR_DARK_TEXT_MAC_OS","COLOR_LIGHT_BODY_TEXT_GOOGLE","COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE","COLOR_LIGHT_CHART_GOOGLE","COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE","COLOR_LIGHT_DRAWER_ICON_GOOGLE","COLOR_LIGHT_DRAWER_TEXT_GOOGLE","COLOR_TWITTER_BLUE","COLOR_TWITTER_GREEN","COLOR_TWITTER_ORANGE","COLOR_TWITTER_PURPLE","COLOR_GRAY_ON_WHITE","FONT_PRIMARY","MATERIAL_FONT_SIZE_H1","MATERIAL_FONT_SIZE_H2","MATERIAL_FONT_SIZE_H3","MATERIAL_FONT_SIZE_H4","MATERIAL_FONT_SIZE_H5","MATERIAL_FONT_SIZE_H6","MATERIAL_FONT_SIZE_SUBTITLE_1","MATERIAL_FONT_SIZE_SUBTITLE_2","MATERIAL_FONT_SIZE_BODY_1","MATERIAL_FONT_SIZE_BODY_2","MATERIAL_FONT_SIZE_BUTTON","MATERIAL_FONT_SIZE_CAPTION","MATERIAL_FONT_SIZE_OVERLINE","MATERIAL_CIRCULAR_INDICATOR_SIZE","MATERIAL_UI_ICON_BUTTON_FONT_SIZE","FONT_SIZE_TABLE_XS","BREAKPOINT_MIN_XS","BREAKPOINT_MAX_XS","BREAKPOINT_MIN_SM","BREAKPOINT_MAX_SM","BREAKPOINT_MIN_MD","BREAKPOINT_MAX_MD","BREAKPOINT_MIN_LG","BREAKPOINT_MAX_LG","BREAKPOINT_MIN_XL","BREAKPOINT_LG_MAX_WIDTH","DRAWER_WIDTH","FOOTER_HEIGHT","FOOTER_MARGIN_XS","FOOTER_MARGIN_SM_AND_UP","ICON_SVG_PATH_MPS","ICON_SVG_PATH_BLOCK","ICON_SVG_PATH_PRICE","ICON_SVG_PATH_BLOCK_TIME","ICON_SVG_PATH_THEME_LIGHT","ICON_SVG_PATH_THEME_DARK","ABOUT_PAGE_MARGIN_XS","ABOUT_PAGE_MARGIN_SM","ABOUT_PAGE_MARGIN_MD","ABOUT_PAGE_MARGIN_LG","HOME_PAGE_MARGIN_XS","HOME_PAGE_MARGIN_SM_AND_UP","ABOUT_PAGE_PROJECT_ICONS_HEIGHT","GOOGLE_ANALYTICS_TRACKING_ID","BLOCKS_CARD_POLL_INTERVAL_MS","BLOCK_TIME_POLL_INTERVAL_MS","MESSAGES_TIME_POLL_INTERVAL_MS","PRICE_POLL_INTERVAL_MS","IC_RELEASE","NOMICS_API_KEY","GlobalStyle","createGlobalStyle","props","theme","colorBodyBackground","themeLight","isDark","colorAboutBackgroundPrimary","colorAboutBackgroundSecondary","colorAboutHeaderText","colorAboutTwitterBackground","colorAppBarBackground","colorAppBarTextButton","colorAppBarDfinityText","colorAppBarExplorerText","colorBodyButtonBackground","colorBodyButtonText","colorBodyButtonHoverBackground","colorBodyButtonHoverText","colorBodyText","colorBodyTextDim","colorBodyTextLink","colorDashCardBackground","colorDashCardIcon","colorDashCardIconOpacity","colorDrawerBackground","colorDrawerDivider","colorDrawerIcon","colorDrawerIconTextSelected","colorDrawerText","colorChartBackground","colorChartTooltipBackground","colorChartAxes","colorChartGrid","colorChartText","colorChartLine","colorChartActiveDotStroke","colorIconButtonHover","colorTableBackgroundPrimary","colorTableRowBorder","colorTableTextDim","colorFooterBackground","colorFooterTextIcon","colorSearchText","colorSearchIcon","opacityActionDisabled","opacityActionHover","themeDark","ResponsiveComponent","handleWindowResize","bind","throttledHandleWindowResize","throttle","window","addEventListener","this","removeEventListener","forceUpdate","Component","TrackablePage","scrollTo","pathName","location","pathname","search","trackPage","prevProps","currentPathName","nextPathName","ReactGA","set","page","pageview","GridNoWrap","styled","Grid","SvgIconCard","SvgIcon","cardindex","TypographyTitle","Typography","TypographyValue","DashCard","subscribeToNewObjects","cardIndex","className","svgIconPath","title","value","Paper","elevation","container","direction","justify","alignItems","wrap","item","d","noWrap","BlocksCard","state","blockHeight","error","pollForBlockHeight","interval","setInterval","clearInterval","blockHeightText","toLocaleString","startDate","Date","setDate","getDate","endDate","url","getTime","axios","get","then","res","data","result","length","values","lastValue","Math","floor","setState","catch","BlockTimeCard","secondsPerBlock","pollForBlockTime","blockTimeText","toFixed","firstValue","numBlocks","seconds","MessagesCard","messagesPerSecond","pollForMessagesTime","messagesTimeText","numMessages","PriceCard","price","pollForPrice","priceText","parseFloat","Breakpoints","XS","SM","MD","LG","XL","getBreakpoint","isDesktopDrawerOpen","drawerWidth","matchMedia","matches","isBreakpointDesktop","breakpoint","isBreakpointGreaterOrEqualTo","StyledPaper","StyledAreaChart","RechartsAreaChart","AreaChart","chartHeight","getData","getTitle","width","height","margin","top","right","left","bottom","style","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","vertical","dataKey","getDataKeyX","tick","fill","tickFormatter","getGetTickX","tickMargin","tickSize","domain","dataMin","getDomainMinY","dataMax","getDomainMaxY","getGetTickY","tickLine","labelFormatter","getGetTooltipX","formatter","getGetTooltipY","contentStyle","background","border","borderRadius","fontSize","boxShadow","shadows","itemStyle","color","labelStyle","cursor","animationDuration","type","getDataKeyY","strokeWidth","fillOpacity","activeDot","r","Error","BlocksChart","blocksData","prevHeight","slice","map","date","ceil","toLocaleDateString","timeZone","k","Number","isInteger","propTypes","PropTypes","number","isRequired","object","withTheme","CanistersChart","canistersData","prevTotal","total","numCanisters","MessagesChart","messagesData","toLocaleTimeString","hour","minute","PriceChart","priceData","dateToRfc3339","candle","timestamp","close","console","log","toISOString","split","replace","GridSection","duration","standard","easing","easeInOut","GridCard","GridChart","CardBlocks","CardBlockTime","CardMessages","CardPrice","HomePage","getSectionCards","getSectionCharts","timeout","delay","getRandomInt","start","end","random","getRandomNumber","DfinitySymbolD3","dragStarted","dragged","dragEnded","rotate","stage","renderer","linksGraphics","simulationWidth","logoMode","simulationHeight","scaleSimulationToPixi","centerX","centerY","scaleToWindow","numSymbolNodes","numVertices","numNodes","forceManyBodyStrengthSymbolNodes","forceManyBodyStrengthNonSymbolNodes","linkDistance","nodeStrokeWidth","nodeRadius","nodeRadiusSelected","nodeSelectedFillColorArray","nodeSelectedStrokeColorArray","nodeOpacity","nodeOpacitySelected","linkStrokeWidth","linkStrokeWidthIncreaseAtMagnitude","symbolHeightMultiplier","rotateOffset","rotateTimeMs","rotateAmount","selectedNodeIndex","newBlockNodeStartTime","newBlockLinksStartTime","newBlockNodeTimerMs","newBlockLinksTimerMs","draw","destroy","pixiResizeRenderer","nodesData","forEach","node","pixiDrawNode","ref","el","element","addNodes","addLinks","createSimulation","pixiSetup","i","pos","getNodePosition","push","index","t","PI","scale","cos","sin","linksData","indexSymbol","indexSymbolNext","addLink","vertexShapeTop","indexShapeTop","indexShapeTopNext","indexShapeAlmostTop","j","indexShapeNext","indexSpiralNext","indexSource","indexTarget","strength","opacity","toString","linkCount","simulation","d3","force","link_force","_strength","min","source","target","distance","on","alphaDecay","PIXI","skipHello","antialias","transparent","resolution","autoResize","appendChild","view","graphics","addChild","call","subject","find","x","y","resize","position","nodeStrokeColor","nodeFillColor","selectedNodeMagnitude","rgbNumberFromArray","gradientColor","getNodeStrokeColorArray","clear","lineStyle","beginFill","filters","drawCircle","link","linkMagnitude","linkOpacity","alpha","getColorArray","moveTo","lineTo","numIndices","purple","pink","darkOrange","lightOrange","blue","transitionIndicesSmall","transitionIndicesGradual","lastPurpleIndex","lastPinkIndex","lastDarkOrangeIndex","lastLightOrangeIndex","lastBlueIndex","percentage","color1","color2","percent","p1","p2","round","array","active","alphaTarget","restart","fx","fy","_fx","_fy","pixiMoveNode","elapsedMs","pixiDrawLink","endFill","render","elapsed","ImageLinkGrid","widths","maxHeight","calculateMaxImageDimensions","arePropsChanged","imageLinks","imageLink","src","justifyRow","marginBetweenRows","perRow","containerHeight","imageLinkGrid","maxWidthColumn","Array","row","isShortRow","max","rowIndex","key","marginTop","columnIndex","href","rel","alt","img","Image","onload","event","currentTarget","naturalWidth","naturalHeight","prevState","PaperParallax","GridParallax","TypographyParallax","GridSectionPrimary","GridSectionSecondary","GridItem","GridImageLeft","GridImageRight","GridSymbolLeft","GridText","GridTextLeft","GridTextRight","TypographyHeading","TypographyBody","StyledA","a","ImgSection","SpanHeart","span","PaperTwitter","ImageLinkGridThanks","AboutPage","getHeader","getSectionMission","getSectionOpenSource","getSectionCommunity","getSectionContributors","getSectionThanks","bgImage","bannerXHorizon","bgImageAlt","bgImageStyle","isThemeDark","getDfinitySymbolD3Width","dfinityExplorerLogo","sourceType","screenName","options","noFooter","githubOctocat","imagesPerRow","reactHeight","styledComponentsHeight","materialUiHeight","nomicsHeight","dfinityHeight","reactLogo","styledComponentsLogoDark","styledComponentsLogoLight","materialUiLogo","nomicsLogoDark","nomicsLogoLight","dfinityLogoDark","dfinityLogoLight","contentWidth","innerWidth","bool","StyledAppBar","AppBar","zIndex","drawer","StyledToolbar","Toolbar","ImgProductIcon","TypographyAppName","TypographyDfinity","TypographyBorder","div","TypographyExplorer","StyledIconButton","IconButton","fade","StyledMenuIcon","MenuIcon","StyledSwipeableDrawer","other","SwipeableDrawer","classes","paper","StyledDrawer","Drawer","StyledDivider","Divider","DrawerListItemIcon","ListItemIcon","DrawerListItemText","ListItemText","primary","DrawerListItem","ListItem","selected","DEAppBar","toolbarDivRef","React","createRef","isActiveRoute","in","mountOnEnter","unmountOnExit","getToolbarDefaultContent","getDrawer","handleAppBarResize","current","offsetHeight","isMobileDrawerOpen","handleMobileDrawerMenuClick","getMenuButton","getAppTitle","handleDesktopDrawerMenuClick","Zoom","onClick","textDecoration","to","getProductIconHeight","BREAKPOINT_MAX_XL","isBreakpointLessOrEqualTo","variant","open","getDrawerContent","onOpen","onClose","List","button","component","Link","routeName","func","routerRef","withRouter","FooterToolbar","OneThirdGrid","LeftThirdGrid","RightThirdGrid","FooterTypography","FooterA","AwesomeIconButtonGrid","AwesomeIconButton","AwesomeIcon","Icon","ThemeCheckbox","Checkbox","ThemeSvgIcon","Footer","loadCSS","document","querySelector","getCopyrightText","getNomicsTextDescription","getNomicsTextLink","checked","icon","checkedIcon","onChange","handleThemeChange","initialize","anonymizeIp","ContentDiv","enteringScreen","leavingScreen","ContentGrid","appbarheight","App","appBarHeight","isDesktopDrawerEnabled","setRouterRef","getTheme","onTransitionEnd","dispatchEvent","Event","exact","path","contentRect","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.1822543a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner-x-horizon.78a73653.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-explorer-logo-large.6854aee0.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-logo-dark-mode.03f02872.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-logo-light-mode.5a960076.png\";","module.exports = __webpack_public_path__ + \"static/media/github-octocat.c833384a.png\";","module.exports = __webpack_public_path__ + \"static/media/material-ui-logo.1d6a085f.png\";","module.exports = __webpack_public_path__ + \"static/media/nomics-logo-dark-mode.a32c7cc9.png\";","module.exports = __webpack_public_path__ + \"static/media/nomics-logo-light-mode.6f5390ee.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-text.24432c06.png\";","module.exports = __webpack_public_path__ + \"static/media/styled-components-logo-dark-mode.3b3add6f.png\";","module.exports = __webpack_public_path__ + \"static/media/styled-components-logo-light-mode.33f922e4.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-explorer-logo.52c54b15.png\";","/**\n * @file constants\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nconst Constants = Object.freeze({\n  URI_CDN_FONT_AWESOME:\n    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css',\n  // Remove any fonts that aren't used!!!\n  URI_CDN_GOOGLE_FONTS:\n    'https://fonts.googleapis.com/css?family=Istok+Web:400|Muli:200,300,400,500',\n  URI_ABOUT_DFINITY: 'https://dfinity.org/',\n  URI_ABOUT_NOMICS: 'https://p.nomics.com/cryptocurrency-bitcoin-api',\n  URI_ABOUT_MATERIAL_UI: 'https://material-ui.com/',\n  URI_ABOUT_REACT: 'https://reactjs.org/',\n  URI_ABOUT_STYLED_COMPONENTS: 'https://www.styled-components.com/',\n  URI_GITHUB_CONTRIBUTORS: 'https://github.com/orgs/dfinityexplorer/people',\n  URI_GITHUB_DFINITY_EXPLORER_PROJECT: 'https://github.com/dfinityexplorer/dfinityexplorer',\n  URI_GITHUB_DYLAN: 'https://github.com/dylancm4',\n  URI_GITHUB_MIT_LICENSE: 'https://github.com/dfinityexplorer/dfinityexplorer/blob/master/LICENSE',\n  URI_GITHUB_TODD: 'https://github.com/toddkitchens',\n  URI_NASA_EXPLORER: 'https://nssdc.gsfc.nasa.gov/multi/explorer.html',\n  URI_TWITTER_DFINITY_EXPLORER: 'https://twitter.com/dfinityexplorer',\n  // Remove colors that are not used!!!\n  COLOR_DFINITY_BLACK: 'rgb(41, 42, 46)', // from dfinity.org/press\n  COLOR_DFINITY_BLACK_LIGHTER: 'rgb(73, 75, 82)', //  COLOR_DFINITY_BLACK scaled lighter\n  COLOR_DFINITY_BLACK_DARKER: 'rgb(27, 28, 31)', // COLOR_DFINITY_BLACK scaled darker\n  COLOR_DFINITY_LIGHT_ORANGE: 'rgb(251, 176, 59)', // from dfinity.org style guide\n  COLOR_DFINITY_DARK_ORANGE: 'rgb(241, 90, 36)', // from dfinity.org style guide\n  COLOR_DFINITY_BLUE_400: '#29ABE2', // DFINITY logo blue\n  COLOR_DFINITY_BLUE_500: '#009DDD',\n  COLOR_DFINITY_BLUE_600: '#0090CF',\n  COLOR_DFINITY_BLUE_700: '#007DBC',\n  COLOR_DFINITY_BLUE_800: '#006DA8',\n  COLOR_DFINITY_BLUE_900: '#004E88',\n  COLOR_TEXT_LIGHT: '#FFFFFF', // This should be removed, replaced with COLOR_DARK_TEXT!!!\n  COLOR_DARK_TEXT: '#FFFFFF',\n  COLOR_DARK_TEXT_FADED: 'rgb(190, 191, 192)', // rgba(255, 255, 255, 0.7) on COLOR_DFINITY_BLACK, matches Material-UI Tab opacity\n  COLOR_TEXT_DARKER: 'rgb(148, 149, 151)', // rgba(255, 255, 255, 0.5) on COLOR_DFINITY_BLACK\n  COLOR_TEXT_DARKEST: 'rgb(106, 106, 109)', // rgba(255, 255, 255, 0.3) on COLOR_DFINITY_BLACK\n  COLOR_LIGHT_TEXT_FADED: 'rgb(77, 77, 77)', // rgba(0, 0, 0, 0.7) on white, matches Material-UI Tab opacity\n  COLOR_DARK_BODY_DARKER_MAC_OS: '#1B1B1B', // Calendar, Finder, iTunes, Messages\n  COLOR_DARK_BODY_LIGHTER_MAC_OS: '#262626', // Finder\n  COLOR_DARK_DRAWER_DIVIDER_MAC_OS: '#4B4B4B', // Calendar, Messages\n  COLOR_DARK_DRAWER_DIVIDER_YOUTUBE: '#333333',\n  COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX: '#808080',\n  COLOR_DARK_TEXT_MAC_OS: '#DCDCDC', // Calendar, iTunes\n  COLOR_LIGHT_BODY_TEXT_GOOGLE: '#202124', // About, Account, News, Gmail, Contacts, Docs, Keep, Material\n  COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE: '#5F6368', // About, Account, Contacts, Docs, Drive, Gmail, Material\n  COLOR_LIGHT_CHART_GOOGLE: '#9E9E9E', // Analytics, Firebase\n  COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE: '#E3E3E3', // Docs, Sheets\n  COLOR_LIGHT_DRAWER_ICON_GOOGLE: '#5F6368', // Account, Docs, Drive, Calendar, Keep, Photos, Sheets\n  COLOR_LIGHT_DRAWER_TEXT_GOOGLE: '#3C4043', // Account, Docs, Calendar, News, Photos, Sheets\n  COLOR_TWITTER_BLUE: 'rgb(100, 164, 224)',\n  COLOR_TWITTER_GREEN: 'rgb(131, 175, 97)',\n  COLOR_TWITTER_ORANGE: 'rgb(244, 174, 78)',\n  COLOR_TWITTER_PURPLE: 'rgb(165, 144, 211)',\n  COLOR_GRAY_ON_WHITE: 'rgb(235, 235, 235)', // matches Material-UI IconButton hover\n  FONT_PRIMARY: '\\'Muli\\', sans-serif',\n  MATERIAL_FONT_SIZE_H1: '6rem', // 96px\n  MATERIAL_FONT_SIZE_H2: '3.75rem', // 60px\n  MATERIAL_FONT_SIZE_H3: '3rem', // 48px\n  MATERIAL_FONT_SIZE_H4: '2.125rem', // 34px\n  MATERIAL_FONT_SIZE_H5: '1.5rem', // 24px\n  MATERIAL_FONT_SIZE_H6: '1.25rem', // 20px\n  MATERIAL_FONT_SIZE_SUBTITLE_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_SUBTITLE_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BODY_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_BODY_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BUTTON: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_CAPTION: '0.75rem', // 12px\n  MATERIAL_FONT_SIZE_OVERLINE: '0.625rem', // 10px\n  MATERIAL_CIRCULAR_INDICATOR_SIZE: 48,\n  MATERIAL_UI_ICON_BUTTON_FONT_SIZE: 24,\n  FONT_SIZE_TABLE_XS: '0.6875rem', // 11px\n  BREAKPOINT_MIN_XS: 0,\n  BREAKPOINT_MAX_XS: 599,\n  BREAKPOINT_MIN_SM: 600,\n  BREAKPOINT_MAX_SM: 959,\n  BREAKPOINT_MIN_MD: 960,\n  BREAKPOINT_MAX_MD: 1279,\n  BREAKPOINT_MIN_LG: 1280,\n  BREAKPOINT_MAX_LG: 1919,\n  BREAKPOINT_MIN_XL: 1920,\n  BREAKPOINT_LG_MAX_WIDTH: 1140, // from Bootstrap\n  DRAWER_WIDTH: 256,\n  FOOTER_HEIGHT: 96,\n  FOOTER_MARGIN_XS: 8,\n  FOOTER_MARGIN_SM_AND_UP: 32,\n  ICON_SVG_PATH_MPS: 'M16 8V4l8 8-8 8v-4h-5V8h5zM9 8H7v8h2V8zM4.986 8H3v8h1.986V8zM1 8H0v8h1V8z',\n  ICON_SVG_PATH_BLOCK: 'M12 0L1 6v12.131L12 24l11-5.869V6.065L12 0zm7.91 6.646l-7.905 4.218L4.133 6.57l7.862-4.289 7.915 4.365zM3 8.23l8 4.363V21.2l-8-4.268V8.23zM13 21.2v-8.6l8-4.269v8.6L13 21.2z',\n  ICON_SVG_PATH_PRICE: 'M19 16.166c0-4.289-4.465-5.483-7.887-7.091-2.079-1.079-1.816-3.658 1.162-3.832 1.652-.1 3.351.39 4.886.929l.724-3.295c-1.814-.551-3.437-.803-4.885-.841V0h-2v2.134c-3.89.535-5.968 2.975-5.968 5.7 0 4.876 5.693 5.62 7.556 6.487 2.54 1.136 2.07 3.5-.229 4.021-1.993.451-4.538-.337-6.45-1.079L5 20.551c1.787.923 3.931 1.417 6 1.453V24h2v-2.105c3.313-.464 6.005-2.293 6-5.729z',\n  ICON_SVG_PATH_BLOCK_TIME: 'M13 12l-.688-4h-.609L11 12a1.99 1.99 0 0 0-1 1.723 2 2 0 0 0 4 0A1.99 1.99 0 0 0 13 12zm-1-8C6.478 4 2 8.477 2 14s4.478 10 10 10 10-4.477 10-10S17.522 4 12 4zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8zM10 2.181V0h4v2.181c-1.438-.243-2.592-.238-4 0zm9.179 2.226L20.586 3 22 4.414l-1.321 1.321a12.134 12.134 0 0 0-1.5-1.328z',\n  ICON_SVG_PATH_THEME_LIGHT: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88zm3.584-8.047a10.7 10.7 0 0 1 4.723-3.41l.027-.01a10.433 10.433 0 0 0-1.752 7.118 10.444 10.444 0 0 0 3.912 7.033 10.448 10.448 0 0 0 10.135 1.64c.196-.072.39-.15.583-.232A10.697 10.697 0 0 1 15.975 22 10.665 10.665 0 0 1 5.63 20.327a10.656 10.656 0 0 1-3.99-7.174A10.653 10.653 0 0 1 3.89 5.259z',\n  ICON_SVG_PATH_THEME_DARK: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88z',\n  ABOUT_PAGE_MARGIN_XS: 8,\n  ABOUT_PAGE_MARGIN_SM: 48,\n  ABOUT_PAGE_MARGIN_MD: 64,\n  ABOUT_PAGE_MARGIN_LG: 128,\n  HOME_PAGE_MARGIN_XS: 8,\n  HOME_PAGE_MARGIN_SM_AND_UP: 32,\n  ABOUT_PAGE_PROJECT_ICONS_HEIGHT: 55,\n  GOOGLE_ANALYTICS_TRACKING_ID: 'UA-138212575-1',\n  BLOCKS_CARD_POLL_INTERVAL_MS: 5000,\n  BLOCK_TIME_POLL_INTERVAL_MS: 30000,\n  MESSAGES_TIME_POLL_INTERVAL_MS: 30000,\n  PRICE_POLL_INTERVAL_MS: 10000,\n  IC_RELEASE: 'sodium',\n  NOMICS_API_KEY: '38f4023ce681a328edc018f7a8a28e06'\n});\n\nexport default Constants;\n","/**\n * @file globalStyle\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { createGlobalStyle } from 'styled-components';\nimport Constants from '../constants';\n\n/**\n * StyledComponent that handles global styles.\n */\nexport const GlobalStyle = createGlobalStyle`\n   body {\n    margin: 0;\n    padding: 0;\n    background: ${props => props.theme.colorBodyBackground};\n   }\n`;\n\n/**\n * The styled-components ThemeProvider light theme.\n */\nexport const themeLight = {\n  // Should use constants for all!!!\n  isDark: false,\n  colorAboutBackgroundPrimary: '#FFFFFF',\n  colorAboutBackgroundSecondary: '#F8F9FA', // Google Analytics (verified), Wikipedia (verified)\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: '#FFFFFF',\n  colorAppBarBackground: '#FFFFFF',\n  colorAppBarTextButton: Constants.COLOR_LIGHT_TEXT_FADED, // (#4D4D4D)\n  colorAppBarDfinityText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyBackground: '#F8F9FA', // Wikipedia (verified)\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorBodyTextDim: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_700,\n  colorDashCardBackground: '#FFFFFF',\n  colorDashCardIcon: [Constants.COLOR_DFINITY_BLUE_700, '#9440A6', '#DA005E', '#F79308'], // Ori's purple and orange\n  colorDashCardIconOpacity: 1.0,\n  colorDrawerBackground: '#FFFFFF',\n  colorDrawerDivider: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorDrawerIcon: Constants.COLOR_LIGHT_DRAWER_ICON_GOOGLE,\n  colorDrawerIconTextSelected: Constants.COLOR_DFINITY_BLUE_700,\n  colorDrawerText: Constants.COLOR_LIGHT_DRAWER_TEXT_GOOGLE,\n  colorChartBackground: '#FFFFFF',\n  colorChartTooltipBackground: 'rgba(255, 255, 255, 0.96)',\n  colorChartAxes: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartGrid: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorChartText: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_700,\n  colorChartActiveDotStroke: '#FFFFFF',\n  colorIconButtonHover: '#000000',\n  colorTableBackgroundPrimary: '#FFFFFF',\n  colorTableRowBorder: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorTableTextDim: '#909090', // YouTube, footer text dim (verified)\n  colorFooterBackground: '#F5F5F5',\n  colorFooterTextIcon: '#909090', // YouTube (verified)\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon(verified)\n  opacityActionDisabled: 0.26, // Material-UI createPalette.js theme.palette.action.disabled light theme\n  opacityActionHover: 0.08 // Material-UI createPalette.js theme.palette.action.hoverOpacity light theme\n}\n\n/**\n * The styled-components ThemeProvider dark theme.\n */\nexport const themeDark = {\n  isDark: true,\n  colorAboutBackgroundPrimary: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorAboutBackgroundSecondary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarTextButton: Constants.COLOR_DARK_TEXT_FADED,\n  colorAppBarDfinityText: Constants.COLOR_DARK_TEXT,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_LIGHT_ORANGE,\n  colorBodyBackground: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextDim: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_600,\n  colorDashCardBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDashCardIcon: ['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF'],\n  colorDashCardIconOpacity: 0.5,\n  colorDrawerBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDrawerDivider: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorDrawerIcon: Constants.COLOR_DARK_TEXT_FADED,\n  colorDrawerIconTextSelected: '#FFFFFF',\n  colorDrawerText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorChartTooltipBackground: 'rgba(38, 38, 38, 0.96)',\n  colorChartAxes: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorChartGrid: Constants.COLOR_DARK_DRAWER_DIVIDER_MAC_OS,\n  colorChartText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_600,\n  colorChartActiveDotStroke: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorIconButtonHover: Constants.COLOR_DARK_TEXT,\n  colorTableBackgroundPrimary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorTableRowBorder: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorTableTextDim: '#717171', // YouTube (Dark), footer text dim (verified)\n  colorFooterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorFooterTextIcon: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon (verified)\n  opacityActionDisabled: 0.3, // Material-UI createPalette.js theme.palette.action.disabled dark theme\n  opacityActionHover: 0.1 // Material-UI createPalette.js theme.palette.action.hoverOpacity dark theme\n}\n","/**\n * @file ResponsiveComponent\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { Component } from 'react';\nimport { throttle } from 'throttle-debounce';\n\n/**\n * Base class component which re-renders when the window is resized.\n */\nclass ResponsiveComponent extends Component {\n  /**\n   * Create a ResponsiveComponent object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    // Bind to make 'this' work in callbacks.\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n\n    // Throttle the calls to handleWindowResize() so that we're not constantly re-rendering.\n    this.throttledHandleWindowResize = throttle(200, true, this.handleWindowResize);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    this.forceUpdate();\n  }\n};\n\nexport default ResponsiveComponent;\n","/**\n * @file TrackablePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport ReactGA from 'react-ga';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\n\n/**\n * Base class component for a page which is trackable by react-ga.\n */\nclass TrackablePage extends ResponsiveComponent {\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Scroll to the top on every page change.\n    window.scrollTo(0, 0);\n\n    const pathName = this.props.location.pathname + this.props.location.search;\n    this.trackPage(pathName);\n}\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    const currentPathName = prevProps.location.pathname + prevProps.location.search;\n    const nextPathName = this.props.location.pathname + this.props.location.search;\n\n    if (currentPathName !== nextPathName)\n      this.trackPage(nextPathName);\n  }\n\n  /**\n   * Track the page using react-ga.\n   * @param {String} pathName The path name of the page.\n   * @private\n   */\n  trackPage(pathName) {\n    // Track production build, but not development build.\n    if (process.env.NODE_ENV === 'production') {\n      ReactGA.set({ page: pathName });\n      ReactGA.pageview(pathName);\n    }\n  }\n}\n\nexport default TrackablePage;\n","/**\n * @file DashCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport Constants from '../../constants';\n\nconst GridNoWrap = styled(Grid)`\n  && {\n    /* Setting min-width to 0px allows the Grid to narrow past the implied width of its children. */\n    min-width: 0px;\n  }\n`;\n\nconst SvgIconCard = styled(SvgIcon)`\n  && {\n    /* The combination of margin, padding, and font-size explicitly set the height of the card. */\n    margin: 30px;\n    font-size: 42px;\n    opacity: ${props => props.theme.colorDashCardIconOpacity};\n    color: ${props => props.theme.colorDashCardIcon[props.cardindex]};\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 300;\n    font-size: 14px;\n  }\n`;\n\nconst TypographyValue = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 200;\n    font-size: 28px;\n  }\n`;\n\n/**\n * This component displays a dashboard card.\n */\nclass DashCard extends Component { \n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * The d attribute of the SvgIcon path.\n     */\n    svgIconPath: PropTypes.string.isRequired,\n    /**\n     * Function to subscribe to receive new objects of the card using GraphQL.\n     */\n    subscribeToNewObjects: PropTypes.func,\n    /**\n     * The title string of the card.\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * The value string of the card.\n     */\n    value: PropTypes.string.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Subscribe to receive new objects of the card using GraphQL.\n    if (this.props.subscribeToNewObjects)\n      this.props.subscribeToNewObjects();\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let {\n      cardIndex,\n      className,\n      svgIconPath,\n      title,\n      value\n    } = this.props;\n\n    return (\n      <Paper className={className} elevation={1}>\n        <Grid container direction='row' justify='flex-start' alignItems='center' wrap='nowrap'>\n          <Grid item>\n            <SvgIconCard cardindex={cardIndex}>\n              <path d={svgIconPath} />\n            </SvgIconCard>\n          </Grid>\n          <GridNoWrap container direction='column' justify='center' alignItems='flex-start'>\n            {/* The usage of Grid elements here is required to get Typography noWrap to work. */}\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyTitle className={className} noWrap>\n                  {title}\n                </TypographyTitle>\n              </GridNoWrap>\n            </Grid>\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyValue className={className} noWrap>\n                  {value}\n                </TypographyValue>\n              </GridNoWrap>\n            </Grid>\n          </GridNoWrap>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default DashCard;\n","/**\n * @file BlocksCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current block height retrieved from\n * dashboard.dfinity.network.\n */\n class BlocksCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlocksCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blockHeight: 0,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block height using intervals.\n    this.pollForBlockHeight();\n    this.interval = setInterval(\n      () => { this.pollForBlockHeight() },\n      Constants.BLOCKS_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blockHeight, error } = this.state;\n    \n    let blockHeightText;\n    if (error)\n      blockHeightText = 'Network error';\n    else if (blockHeight === 0)\n      blockHeightText = 'Loading...';\n    else\n      blockHeightText = blockHeight.toLocaleString();\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Blocks'\n        value={blockHeightText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK}\n      />\n    );\n  }\n\n  /**\n   * Update the block height.\n   * @private\n   */\n  pollForBlockHeight() {\n    // Get two days of daily data. If there is an API to get just the current block height, we\n    // should use it here.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 2);\n    const endDate = new Date();\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length) {\n          const values = res.data.data.result[0].values;\n          const lastValue = values[values.length-1];\n          const blockHeight = Math.floor(lastValue[1]);\n          this.setState({\n            blockHeight: blockHeight\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\nexport default BlocksCard;\n","/**\n * @file BlockTimeCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with seconds per block retrieved from\n * dashboard.dfinity.network.\n */\nclass BlockTimeCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlockTimeCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      secondsPerBlock: 0,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block time using intervals.\n    this.pollForBlockTime();\n    this.interval = setInterval(\n      () => { this.pollForBlockTime() },\n      Constants.BLOCK_TIME_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { secondsPerBlock, error } = this.state;\n    \n    let blockTimeText;\n    if (error)\n      blockTimeText = 'Network error';\n    else if (secondsPerBlock === 0)\n      blockTimeText = 'Loading...';\n    else\n      blockTimeText = secondsPerBlock.toFixed(1) + ' s';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Avg Block Time'\n        value={blockTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK_TIME}\n      />\n    );\n  }\n\n  /**\n   * Update the block time.\n   * @private\n   */\n   pollForBlockTime() {\n    // Get one day of hourly data. Ideally, we would get 10 minutes of minute data, but\n    // dashboard.dfinity.network did not return any data with those settings.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 1);\n    const endDate = new Date();\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length) {\n          const values = res.data.data.result[0].values;\n          const firstValue = values[0];\n          const lastValue = values[values.length-1];\n          const numBlocks = Math.floor(lastValue[1] - firstValue[1]);\n          const seconds = lastValue[0] - firstValue[0];\n          this.setState({\n            secondsPerBlock: seconds / numBlocks\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\nexport default BlockTimeCard;\n","/**\n * @file MessagesCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with messages per second retrieved from\n * dashboard.dfinity.network.\n */\nclass MessagesCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlockTimeCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesPerSecond: 0,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the messages time using intervals.\n    this.pollForMessagesTime();\n    this.interval = setInterval(\n      () => { this.pollForMessagesTime() },\n      Constants.MESSAGES_TIME_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { messagesPerSecond, error } = this.state;\n    \n    let messagesTimeText;\n    if (error)\n      messagesTimeText = 'Network error';\n    else if (messagesPerSecond === 0)\n      messagesTimeText = 'Loading...';\n    else\n      messagesTimeText = messagesPerSecond.toFixed(1) + ' mps';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Avg Messages'\n        value={messagesTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_MPS}\n      />\n    );\n  }\n\n  /**\n   * Update the messages time.\n   * @private\n   */\n  pollForMessagesTime() {\n    // Get one day of hourly data. Ideally, we would get 10 minutes of minute data, but\n    // dashboard.dfinity.network did not return any data with those settings.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 1);\n    const endDate = new Date();\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(message_state_transition_completed_ic_duration_seconds_count%7Bic%3D%22${Constants.IC_RELEASE}%22%2C%20ic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length) {\n          const values = res.data.data.result[0].values;\n          const firstValue = values[0];\n          const lastValue = values[values.length-1];\n          const numMessages = Math.floor(lastValue[1] - firstValue[1]);\n          const seconds = lastValue[0] - firstValue[0];\n          this.setState({\n            messagesPerSecond: numMessages / seconds\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\nexport default MessagesCard;\n","/**\n * @file PriceCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with price data retrieved from api.nomics.com.\n */\nclass PriceCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a PriceCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      price: 0,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the price using intervals.\n    this.pollForPrice();\n    this.interval = setInterval(\n      () => { this.pollForPrice() },\n      Constants.PRICE_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { price, error } = this.state;\n    \n    let priceText;\n    if (error)\n      priceText = 'Network error';\n    else if (price === 0)\n      priceText = 'Loading...';\n    else\n      priceText = '$' + price.toFixed(2);\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Price - ICP (IOU)'\n        value={priceText}\n        svgIconPath={Constants.ICON_SVG_PATH_PRICE}\n      />\n    );\n  }\n\n  /**\n   * Update the price.\n   * @private\n   */\n  pollForPrice() {\n    const url =\n      `https://api.nomics.com/v1/currencies/ticker?key=${Constants.NOMICS_API_KEY}&ids=DFN&interval=1d`;\n    axios.get(url)\n      .then(res => {\n        const price = parseFloat(res.data[0].price);\n        this.setState({\n          price: price\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\nexport default PriceCard;\n","/**\n * @file breakpoint\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport Constants from '../constants';\n\nexport const Breakpoints = Object.freeze({\n  XS: 0,\n  SM: 1,\n  MD: 2,\n  LG: 3,\n  XL: 4\n});\n\n/**\n * Return the current breakpoint.\n * @param {Boolean} isDesktopDrawerOpen True if the desktop drawer (large screens) is open and\n *  caller wants the breakpoint to be calculated based on the non-drawer width of the window.\n * @return {Number} The current breakpoint.\n * @private\n */\nexport function getBreakpoint(isDesktopDrawerOpen) {\n  const drawerWidth =  isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0;\n  if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_XS + drawerWidth) + 'px)').matches)\n    return Breakpoints.XS;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_SM + drawerWidth) + 'px)').matches)\n    return Breakpoints.SM;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_MD  + drawerWidth) + 'px)').matches)\n    return Breakpoints.MD;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_LG + drawerWidth) + 'px)').matches)\n    return Breakpoints.LG;\n  else\n    return Breakpoints.XL;\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointGreaterOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XL + 'px)').matches;\n  }\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the smallest \"desktop\"\n * breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the smallest\n * \"desktop\" breakpoint.\n * @private\n */\nexport function isBreakpointDesktop() {\n  return isBreakpointGreaterOrEqualTo(Breakpoints.MD);\n}\n\n/**\n * Return true if the current breakpoint is less than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is less than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointLessOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XL + 'px)').matches;\n  }\n}\n","/**\n * @file AreaChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Area,\n  AreaChart as RechartsAreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledAreaChart = styled(RechartsAreaChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements an area chart component.\n */\nclass AreaChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledAreaChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                domain={[\n                  dataMin => this.getDomainMinY(dataMin),\n                  dataMax => this.getDomainMaxY(dataMax)\n                ]}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{ stroke: theme.colorChartGrid }}\n                animationDuration={300}\n              />\n              <Area\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                activeDot={{ stroke: theme.colorChartActiveDotStroke, r: 5 }}\n                animationDuration={1000}\n              />\n            </StyledAreaChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('AreaChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('AreaChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('AreaChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('AreaChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    throw new Error('AreaChart.getDomainMinY() not implemented.');\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    throw new Error('AreaChart.getDomainMaxY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('AreaChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('AreaChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('AreaChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('AreaChart.getGetTooltipY() not implemented.');\n  }\n}\n\nexport default AreaChart;\n","/**\n * @file BlocksChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n\n/**\n * This component displays a number of blocks chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass BlocksChart extends AreaChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a BlocksChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocksData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 15);\n    const endDate = new Date();\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting block height.\n        let prevHeight = Math.floor(values[0][1]);\n        const blocksData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const height = Math.floor(value[1]);\n          const numBlocks = height - prevHeight;\n          prevHeight = height;\n          return {date: date.getTime(), numBlocks: numBlocks};\n        });\n        this.setState({\n          blocksData: blocksData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Block History';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { blocksData } = this.state;\n    return blocksData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numBlocks';\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin / 100000) * 100000;\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax / 100000) * 100000;\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `New Blocks: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(BlocksChart);\n","/**\n * @file CanistersChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n\n/**\n * This component displays a number of canisters chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass CanistersChart extends AreaChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a CanistersChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      canistersData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 15);\n    const endDate = new Date();\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet%2C%20status)%20(replicated_state_registered_canisters%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting number of canisters.\n        let prevTotal = Math.floor(values[0][1]);\n        const canistersData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numCanisters = total - prevTotal;\n          prevTotal = total;\n          return {date: date.getTime(), numCanisters: numCanisters};\n        });\n        this.setState({\n          canistersData: canistersData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Canister History';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { canistersData } = this.state;\n    return canistersData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numCanisters';\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin / 1000) * 1000;\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax / 1000) * 1000;\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `New Canisters: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(CanistersChart);\n","/**\n * @file MessagesChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n\n/**\n * This component displays a number of messages chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass MessagesChart extends AreaChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a MessagesChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get 24 hours of hourly data. Daily data does not currently work, because\n    // dashboard.dfinity.network returns glitchy data for some days within past week.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 1);\n    const endDate = new Date();\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(message_state_transition_completed_ic_duration_seconds_count%7Bic%3D%22${Constants.IC_RELEASE}%22%2C%20ic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting number of messages.\n        let prevTotal = Math.floor(values[0][1]);\n        const messagesData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numMessages = total - prevTotal;\n          prevTotal = total;\n          return {date: date.getTime(), numMessages: numMessages};\n        });\n        this.setState({\n          messagesData: messagesData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Message History';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { messagesData } = this.state;\n    return messagesData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numMessages';\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin / 1000) * 1000;\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax / 1000) * 1000;\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `New Messages: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(MessagesChart);\n","/**\n * @file PriceChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n \n/**\n * This component displays a chart of Candle objects with data retrieved from api.nomics.com.\n */\nclass PriceChart extends AreaChart {\n\n  static propTypes = {\n    /**\n    * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n    */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n    * The height of the chart (not including the title).\n    */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n    * The styled-components theme.\n    */\n    theme: PropTypes.object.isRequired\n  };\n   \n  /**\n  * Create a PriceChart object.\n  * @constructor\n  */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      priceData: [],\n      error: false\n    };\n  }\n   \n  /**\n  * Invoked by React immediately after a component is mounted (inserted into the tree). \n  * @public\n  */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 14);\n    const endDate = new Date();\n    const url =\n      `https://api.nomics.com/v1/candles?key=${Constants.NOMICS_API_KEY}&interval=1d&currency=DFN&start=${this.dateToRfc3339(startDate)}&end=${this.dateToRfc3339(endDate)}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.length > 0) {\n          const priceData = res.data.map((candle) => {\n            const date = new Date(candle.timestamp);\n            const price = parseFloat(candle.close);\n            return {date: date.getTime(), price: price};\n          });\n          this.setState({\n            priceData: priceData\n          });\n        }\n        else\n          console.log(\"Exchange data not found.\");\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n \n  /**\n  * Return the title of the chart.\n  * @return {String} The title of the chart.\n  * @protected\n  */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Price History - ICP (IOU)';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n \n  /**\n  * Return an array of objects that describe the chart data.\n  * @return {Array} An array of objects that describe the chart data.\n  * @protected\n  */\n  getData() {\n    const { priceData } = this.state;\n    return priceData;\n  }\n \n  /**\n  * Return the key of the data to be displayed in the x-axis.\n  * @return {String} The key of the data to be displayed in the x-axis.\n  * @protected\n  */\n  getDataKeyX() {\n    return 'date';\n  }\n \n  /**\n  * Return the key of the data to be displayed in the y-axis.\n  * @return {String} The key of the data to be displayed in the y-axis.\n  * @protected\n  */\n  getDataKeyY() {\n    return 'price';\n  }\n \n  /**\n  * Return the minimum value of the domain for the Y-axis.\n  * @param {dataMin} value The minumum value of the data.\n  * @return {String} The minimum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin);\n  }\n\n  /**\n  * Return the maximum value of the domain for the Y-axis.\n  * @param {dataMax} value The maximum value of the data.\n  * @return {String} The maximum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax);\n  }\n \n  /**\n  * Return a string for the x-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tick label.\n  * @protected\n  */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n  * Return a string for the y-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tick label.\n  * @protected\n  */\n  getGetTickY(value) {\n    return `$${value.toFixed(2)}`;\n  }\n \n  /**\n  * Return a string for the x-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n  * Return a string for the y-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipY(value) {\n    return `ICP (IOU): $${value.toFixed(2)}`;\n  }\n\n  /**\n   * Return a string for the date in RFC 3339 (URI escaped) format.\n   * @param {Object} date The date to create the string for.\n   * @return {String} A string for the date in RFC 3339 (URI escaped) format.\n   * @private\n   */\n  dateToRfc3339(date) {\n    // Use toISOString(), removing the fraction of seconds (i.e, after decimal point).\n    const isoNoFraction = date.toISOString().split('.')[0] + 'Z'\n\n    // Escape all ':' characters.\n    return isoNoFraction.replace(/:/g, '%3A');\n  }\n}\n \n // Use the withTheme HOC so that we can use the current theme outside styled components.\n export default withTheme(PriceChart);\n","/**\n * @file HomePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport Fade from 'react-reveal/Fade';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport BlocksCard from '../BlocksCard/BlocksCard';\nimport BlockTimeCard from '../BlockTimeCard/BlockTimeCard';\nimport MessagesCard from '../MessagesCard/MessagesCard';\nimport PriceCard from '../PriceCard/PriceCard';\nimport BlocksChart from '../BlocksChart/BlocksChart';\nimport CanistersChart from '../CanistersChart/CanistersChart';\nimport MessagesChart from '../MessagesChart/MessagesChart';\nimport PriceChart from '../PriceChart/PriceChart';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport { Fragment } from \"react\";\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst GridCard = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(25% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP*3/4 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.MD || breakpoint === Breakpoints.SM) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridChart = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst CardBlocks = styled(BlocksCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardBlockTime = styled(BlockTimeCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardMessages = styled(MessagesCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardPrice = styled(PriceCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n/**\n * Component for the home page.\n */\nclass HomePage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getSectionCards()}\n        {this.getSectionCharts()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the Cards section based on the current breakpoint.\n   * @return {Object} The elements for the Cards section based on the current breakpoint.\n   * @private\n   */\n  getSectionCards()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='space-between'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            timeout={500}\n          >\n            <CardBlocks cardIndex={0} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={50}\n            timeout={500}\n          >\n            <CardBlockTime cardIndex={1} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={100}\n            timeout={500}\n          >\n            <CardMessages cardIndex={2} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={150}\n            timeout={500}\n          >\n            <CardPrice cardIndex={3} />\n          </Fade>\n        </GridCard>\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return the elements for the Charts section based on the current breakpoint.\n   * @return {Object} The elements for the Charts section based on the current breakpoint.\n   * @private\n   */\n  getSectionCharts()\n  {\n    const { breakpoint } = this.props;\n\n    const chartHeight = 352;\n    return (\n      <Fragment>\n        <GridSection container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <BlocksChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <PriceChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSection>\n        <GridSection container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <CanistersChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <MessagesChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSection>\n      </Fragment>\n    );\n  }\n}\n\nexport default HomePage;\n","/**\n * @file getRandomInt\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\nimport getRandomNumber from './getRandomNumber'\n\n/**\n * Return a random integer between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random integer.\n * @private\n */\nexport default function getRandomInt(start, end) {\n  return Math.floor(getRandomNumber(start, end));\n}\n","/**\n * @file getRandomNumber\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n /**\n * Return a random number between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random number.\n * @private\n */\nexport default function getRandomNumber(start, end) {\n  return Math.random() * (end - start) + start;\n}\n","/**\n * @file DfinitySymbolD3\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport * as PIXI from 'pixi.js';\nimport * as filters from 'pixi-filters';\nimport getRandomInt from '../../utils/getRandomInt';\n\n/**\n * This class draws the DFINITY logo infinity symbol using a d3 force-directed graph.\n */\nclass DfinitySymbolD3 extends Component  {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * True for logo mode, where the symbol is shaped more like the DFINITY logo, and various\n     * adjustments are made with the intention of rendering at small sizes (e.g., in an app bar).\n     */\n    logoMode: PropTypes.bool,\n    /**\n     * The width of the component, or 0 for use built-in simulationWidth.\n     */\n    width: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a DfinitySymbolD3 object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.dragStarted = this.dragStarted.bind(this);\n    this.dragged = this.dragged.bind(this);\n    this.dragEnded = this.dragEnded.bind(this);\n    this.tick = this.tick.bind(this);\n    this.rotate = this.rotate.bind(this);\n\n    // A force-directed graph can be a difficult beast to tame. Most changes to settings in this\n    // class will likely change the shape of the graph and require changing other settings through\n    // trial and error in order to get the graph back to the DFINITY logo shape. Any number of the\n    // settings below could be made into constructor parameters. Another idea would be to pre-define\n    // different groups of settings that produce a shape which approximates the DFINITY logo\n    // shape, and then allow the caller to specify which group of settings to use. Since there is\n    // currently only one group of settings defined, settings groups would not currently be useful.\n\n    // PixiJS members.\n    this.stage = null;\n    this.renderer = null;\n    this.linksGraphics = null;\n\n    // Code is customized for this window size. Modifying these values will cause the d3 force-\n    // directed graph to change shape unless scaleToWindow is adjusted to keep the object the same\n    // size.\n    this.simulationWidth = this.props.logoMode ? 780 : 800;\n    this.simulationHeight = 400;\n    this.scaleSimulationToPixi = 1.0;\n\n    this.centerX = this.simulationWidth / 2;\n    this.centerY = this.simulationHeight / 2;\n    this.scaleToWindow = this.simulationWidth / 2 * 0.8;\n\n    // Specify the number of symbol nodes and the number of vertices for each symbol node. The\n    // current values of 36 symbol nodes and 8 vertices (octagon) was arrived at after trial and\n    // error to produce a shape which resembles the DFINITY logo.\n    this.numSymbolNodes = this.props.logoMode ? 41 : 36;\n    this.numVertices = this.props.logoMode ? 10 : 8;\n    this.numNodes = this.numSymbolNodes * this.numVertices;\n\n    // Specify the charge of the symbol nodes and the non-symbol nodes. \"A positive value causes\n    // nodes to attract each other, similar to gravity, while a negative value causes nodes to\n    // repel each other, similar to electrostatic charge.\" The default value is -30, but we specify\n    // much lower in magnitude values because we do not want the nodes to repel very much. For the\n    // fixed nodes which draw the infinity symbol, we do not want any force at all.\n    this.forceManyBodyStrengthSymbolNodes = 0;\n    this.forceManyBodyStrengthNonSymbolNodes = this.props.logoMode ? -3.75 : -9;\n\n    // Specify the link distance. \"The link force pushes linked nodes together or apart according to\n    // the desired link distance.\" The default value is 30.\n    this.linkDistance = this.props.logoMode ? 19 : 14;\n\n    // Specify node and link drawing properties.\n    this.nodeStrokeWidth = 1;\n    this.nodeRadius = 4.5;\n    this.nodeRadiusSelected = this.props.logoMode ? 11 : 5.5;\n    // DCM 01.mar.2019: Always use same node fill color as stroke color.\n    //this.nodeFillColorArray = [127, 127, 127];\n    this.nodeSelectedFillColorArray = [255, 255, 255];\n    this.nodeSelectedStrokeColorArray = [255, 255, 255];\n    this.nodeOpacity = 0.5;\n    this.nodeOpacitySelected = 0.75;\n    this.linkStrokeWidth = this.props.logoMode ? 3 : 2; // why do lines get blurry when this is increased?\n    this.linkStrokeWidthIncreaseAtMagnitude = this.props.logoMode ? 1.5 : 0;\n\n    // Adjust the symbolHeightMultiplier to make the symbol shorter or taller. A value of 1.0\n    // represents normal height.\n    this.symbolHeightMultiplier = this.props.logoMode ? 1.325 : 1.111111;\n\n    // The initial rotateOffset does two things: it determines which part of the symbol goes in\n    // front (blue is on top in the DFINITY logo), and it makes a small adjustment to align the\n    // colors correctly.\n    this.rotateOffset = this.numSymbolNodes / 2 - 1.2;\n\n    // The rotate interval frequency.\n    this.rotateTimeMs = 33.3; // 30 frames/sec max\n\n    // The amount of rotation for every rotate interval.\n    this.rotateAmount = this.props.logoMode ? 0 : 0.000015;\n\n    // The currently selected node index.\n    this.selectedNodeIndex = -1;\n\n    // New block timer members.\n    this.newBlockNodeStartTime = null;\n    this.newBlockLinksStartTime = null;\n    this.newBlockNodeTimerMs = 1000;\n    this.newBlockLinksTimerMs = 1500;\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Set the value of scaleSimulationToPixi based on the width prop. We scale the force-directed\n    // graph by keeping the d3 simulation as is, since it is finely tuned to appear in a certain\n    // way, and instead scaling coordinates from simulation space to PixiJS space when rendering.\n    // In this way, the graph can be scaled to any width by changing the widths prop. A width prop\n    // of 0 indicates no scaling. Note that drag/drop is not currently implemented when scaling.\n    this.scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n\n    // Draw the DFINITY logo infinity symbol.\n    this.draw();\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Cleanup PixiJS properties.\n    this.renderer.destroy();\n    this.stage.destroy();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @public\n   */\n  componentDidUpdate() {\n    // Make the necessary PixiJS adjustments when the width prop changes.\n    const scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n    if (this.scaleSimulationToPixi !== scaleSimulationToPixi) {\n      this.scaleSimulationToPixi = scaleSimulationToPixi;\n\n      // Resize the renderer.\n      this.pixiResizeRenderer();\n\n      // Draw circles for the nodes.\n      if (this.nodesData) {\n        this.nodesData.forEach((node) => { this.pixiDrawNode(node); });\n      }\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return <div ref={(el) => { this.element = el }}/>;\n  }\n\n  /**\n   * Draw the DFINITY logo infinity symbol.\n   * @public\n   */\n  draw() {\n    // Set up the nodes and links of the graph.\n    this.addNodes();\n    this.addLinks();\n\n    // Create the d3 simulation.\n    this.createSimulation();\n\n    // Set up PixiJS to draw the simulation.\n    this.pixiSetup();\n  }\n\n  /**\n   * Add a new block.\n   * @public\n   */\n  addNewBlock() {\n    // If there is a selected node still animating, stop the animation and return it to normal.\n    if (this.newBlockNodeStartTime) {\n        const node = this.nodesData[this.selectedNodeIndex];\n        this.pixiDrawNode(node);\n    }\n\n    // Select node and enable new block timers.\n    this.selectedNodeIndex = getRandomInt(0, this.numNodes - 1);\n    this.newBlockNodeStartTime = this.newBlockLinksStartTime = new Date();\n  }\n\n  /**\n   * Populate nodesData[] with the nodes of the graph.\n   * @private\n   */\n  addNodes() {\n    // Add the symbol nodes to nodesData[] at fixed positions (fx, fy). _fx and _fy save the fixed\n    // position across drag/drop operations, linkCount is used to calculate the strength of the\n    // force of a link.\n    this.nodesData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      const pos = this.getNodePosition(i);\n      this.nodesData.push({\n        'fx' : pos[0],\n        'fy' : pos[1],\n        '_fx' : pos[0],\n        '_fy' : pos[1],\n        'linkCount' : 0});\n    }\n\n    // Add the non-symbol nodes at non-fixed positions.\n    for (let i = this.numSymbolNodes; i < this.numNodes; i++) {\n      this.nodesData.push({'linkCount' : 0});\n    }\n  }\n\n  /**\n   * Get the position of the node with the specified index.\n   * @param {Number} index The node index.\n   * @return {Array} An array containing the [x, y] position of the node.\n   * @private\n   */\n  getNodePosition(index) {\n    const t =\n      2 * Math.PI * ((index + this.rotateOffset) % this.numSymbolNodes) / this.numSymbolNodes;\n    const scale = 2 / (3 - Math.cos(2 * t));\n    const fx = this.centerX + scale * Math.cos(t) * this.scaleToWindow;\n    const fy =\n      this.centerY +\n      scale * Math.sin(2 * t) * this.symbolHeightMultiplier / 2 * this.scaleToWindow;\n    return [fx, fy];\n  }\n\n  /**\n   * Populate linksData[] with the links of the graph.\n   * @private\n   */\n  addLinks() {\n    this.linksData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {   \n      // Define the ith link of the symbol.\n      const indexSymbol = i;\n      const indexSymbolNext = (i + 1) % this.numSymbolNodes;\n      this.addLink(indexSymbol, indexSymbolNext, 0, 1);\n           \n      // Link at top of shape, parallel to symbol link, invisible.\n      const vertexShapeTop = this.numVertices / 2;\n      const indexShapeTop = vertexShapeTop * this.numSymbolNodes + i;\n      const indexShapeTopNext =\n        vertexShapeTop * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;\n      this.addLink(indexShapeTop, indexShapeTopNext, 1, 0);\n      \n      // Cross bar, invisible. This pulls the graph in and provides stability. Rather than linking\n      // the cross bar from the link at top of shape to the symbol index, we link it from the shape\n      // node prior. Found that this produces a more interesting graph. Note that previously this\n      // code was in the for loop below and executed when j === 3, but with the same parameters to\n      // addLink(). This produced a slightly different/thicker graph.\n      const vertexShapeAlmostTop = vertexShapeTop - 1;\n      const indexShapeAlmostTop = vertexShapeAlmostTop * this.numSymbolNodes + i;\n      this.addLink(indexShapeAlmostTop, indexSymbol, 1, 0);\n      \n      for (let j = 0; j < this.numVertices; j++) {     \n        // Define the jth link of the shape (e.g., if numVertices is 6, shape is 6-sided polygon).\n        const index = j * this.numSymbolNodes + i;\n        const indexShapeNext = (index + this.numSymbolNodes) % this.numNodes;\n        this.addLink(index, indexShapeNext, 0, 0.7);\n      \n        // Define the jth link of the spiral which spirals around the shapes. Two spirals are used\n        // for better stability.\n        const indexSpiralNext =\n          (j + 1) % this.numVertices * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;            \n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n      }\n    }\n  }\n\n  /**\n   * Add a link of the graph to linksData[].\n   * @param {Number} indexSource The index of the source node of the link.\n   * @param {Number} indexTarget The index of the target node of the link.\n   * @param {Number} The strength of the link, or 0 for use default strength.\n   * @param {Number} opacity The opacity of the link.\n   * @private\n   */\n  addLink(indexSource, indexTarget, strength, opacity) {\n    this.linksData.push({\n      'source': indexSource.toString(),\n      'target': indexTarget.toString(),\n      '_strength' : strength,\n      'opacity' : opacity,\n      '_opacity' : opacity});\n    this.nodesData[indexSource].linkCount++;\n    this.nodesData[indexTarget].linkCount++;\n  }\n\n  /**\n   * Create the d3 simulation of the force-directed graph. Nodes and links must be added before\n   * calling this function.\n   * @private\n   */\n  createSimulation() {\n    // Create a new simulation containing the nodes.\n    this.simulation = d3.forceSimulation(this.nodesData);\n\n    // Add a charge to each node and a centering force.\n    this.simulation\n      .force('charge', d3.forceManyBody()\n        .strength((d) => {\n          return d.index < this.numSymbolNodes ?\n            this.forceManyBodyStrengthSymbolNodes : this.forceManyBodyStrengthNonSymbolNodes;\n        }))\n      .force('center', d3.forceCenter(this.simulationWidth / 2, this.simulationHeight / 2));\n\n    // Add the links, with the strength of the force of a link optionally specified by the link's\n    // _strength.\n    const link_force =  d3.forceLink(this.linksData)\n      .strength((d) => {\n        return d._strength > 0 ?\n          d._strength :\n          1 / Math.min(d.source.linkCount, d.target.linkCount); // default\n      })\n      .distance(this.linkDistance);        \n      this.simulation.force('links', link_force);\n\n    // Call tick() for every tick.\n    this.simulation.on('tick', this.tick);\n\n    // Set the decay rate to zero to have the simulation run forever at the current alpha.\n    this.simulation.alphaDecay(0);\n\n    // Rotate the symbol using a d3 interval.\n    if (this.rotateAmount)\n      d3.interval(this.rotate, this.rotateTimeMs);\n  }\n\n  /**\n   * Set up PixiJS to draw the simulation using WebGL (with Canvas fallback for older platforms).\n   * @private\n   */\n  pixiSetup() {\n    // Disable PIXI console log message.\n    PIXI.utils.skipHello();\n    \n    // Create PixiJS WebGL renderer element to hold the force-directed graph. We set the resolution\n    // to 3, then auto-resize the window back down to the correct size in order to increase the\n    // resolution. With resolution set to 1, it looks low resolution and pixelated.\n    this.stage = new PIXI.Container();\n    this.renderer = PIXI.autoDetectRenderer(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi,\n      {antialias: true, transparent: true, resolution: 3}\n    );\n    this.renderer.autoResize = true;\n    this.pixiResizeRenderer();\n    this.element.appendChild(this.renderer.view);\n\n    // Draw circles for the nodes.\n    this.nodesData.forEach((node) => {\n      node.graphics = new PIXI.Graphics();\n      this.pixiDrawNode(node);\n      this.stage.addChild(node.graphics);\n    });\n\n    // Set up drag/drop.\n    d3.select(this.renderer.view)\n      .call(d3.drag()\n        .container(this.renderer.view)\n        .subject(() => this.simulation.find(d3.event.x, d3.event.y))\n        .on('start', this.dragStarted)\n        .on('drag', this.dragged)\n        .on('end', this.dragEnded));\n\n    // Set up graphics for the links.\n    this.linksGraphics = new PIXI.Graphics();\n    this.stage.addChild(this.linksGraphics);\n  }\n\n  /**\n   * Resize the PixiJS renderer based on the width and height.\n   * @private\n   */\n   pixiResizeRenderer() {\n    this.renderer.resize(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Move the PixiJS position of the specified node.\n   * @param {Object} node The node to move the position of.\n   * @private\n   */\n  pixiMoveNode(node) {\n    let { x, y, graphics } = node;\n    graphics.position =\n      new PIXI.Point(x * this.scaleSimulationToPixi, y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the circle for a node.\n   * @param {Object} node The node to draw the circle for.\n   * @param {Number} selectedNodeMagnitude If this is the currently selected node, indicates the\n   * magnitude percentage (0 - 1.0) of the selection. A value of 0 indicates that this is not the\n   * currently selected node.\n   * @private\n   */\n  pixiDrawNode(node, selectedNodeMagnitude = 0) {\n    let nodeStrokeColor;\n    let nodeFillColor;\n    let nodeOpacity;\n    let nodeRadius;\n    if (selectedNodeMagnitude) {\n      // Scale the node properties based on the magnitude.\n      nodeStrokeColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedStrokeColorArray,\n          this.getNodeStrokeColorArray(node),\n          selectedNodeMagnitude));\n      nodeFillColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedFillColorArray,\n          // DCM 01.mar.2019: Always use same node fill color as stroke color.\n          this.getNodeStrokeColorArray(node),\n          //this.props.logoMode ? this.getNodeStrokeColorArray(node) : this.nodeFillColorArray,\n          selectedNodeMagnitude));\n      nodeOpacity =\n        this.nodeOpacity + (this.nodeOpacitySelected - this.nodeOpacity) * selectedNodeMagnitude;\n      nodeRadius =\n        this.nodeRadius + (this.nodeRadiusSelected - this.nodeRadius) * selectedNodeMagnitude;\n    }\n    else {\n      nodeStrokeColor = this.rgbNumberFromArray(this.getNodeStrokeColorArray(node));\n      // DCM 01.mar.2019: Always use same node fill color as stroke color.\n      nodeFillColor = nodeStrokeColor;\n      //nodeFillColor = this.rgbNumberFromArray(\n      //  this.props.logoMode ?\n      //    this.getNodeStrokeColorArray(node) : this.nodeFillColorArray);\n\n      nodeOpacity = this.nodeOpacity;\n      nodeRadius = this.nodeRadius;\n    }\n\n    node.graphics.clear();\n    node.graphics.lineStyle(\n      this.nodeStrokeWidth * this.scaleSimulationToPixi,\n      nodeStrokeColor,\n      nodeOpacity);\n    node.graphics.beginFill(nodeFillColor, nodeOpacity);\n    if (selectedNodeMagnitude) {\n      node.graphics.filters = [\n        new filters.GlowFilter(\n          5,                          // distance\n          4 * selectedNodeMagnitude,  // outerStrength\n          0,                          // innerStrength\n          nodeStrokeColor,            // color\n          0.5)                        // quality\n      ]\n    }\n    else\n      node.graphics.filters = null;\n    node.graphics.drawCircle(0, 0, nodeRadius * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the line for a link between nodes.\n   * @param {Object} link The link to draw the line for.\n   * @param {Number} linkMagnitude Indicates the magnitude percentage (0 - 1.0) of the link opacity\n   * boost.\n   * @private\n   */\n  pixiDrawLink(link, linkMagnitude) {\n    let { source, target, opacity } = link;\n    const linkOpacity = opacity + 0.25 * (this.props.logoMode ? 1 : linkMagnitude);\n    this.linksGraphics.alpha = linkOpacity;\n    this.linksGraphics.lineStyle(\n      (this.linkStrokeWidth + this.linkStrokeWidthIncreaseAtMagnitude * linkMagnitude) *\n        this.scaleSimulationToPixi,\n      this.rgbNumberFromArray(this.getColorArray(link.index, this.linksData.length)));\n      this.linksGraphics.moveTo(\n        source.x * this.scaleSimulationToPixi, source.y * this.scaleSimulationToPixi);\n      this.linksGraphics.lineTo(\n        target.x * this.scaleSimulationToPixi, target.y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Return the color based on the specified index and number of indices.\n   * @param {Number} index The index to return the color of.\n   * @param {Number} numIndices The total number of indices used to determine the color.\n   * @return {Array} The color arrayof the specified index.\n   * @private\n   */\n  getColorArray(index, numIndices) {\n    // These colors come from the DFINITY logo.\n    const purple = [99,38,132];\n    const pink = [237,30,121];\n    const darkOrange = [241,90,36];\n    const lightOrange = [251,176,59];\n    const blue = [41,171,226];\n\n    // Certain color transitions in the DFINITY logo are small, others are gradual.\n    const transitionPercentSmall = 0.02;\n    const transitionPercentGradual = 0.1;\n    const transitionIndicesSmall = numIndices * transitionPercentSmall;\n    const transitionIndicesGradual = numIndices * transitionPercentGradual;\n\n    // The number of indices of each color was determined by analyzing the DFINITY logo.\n    const lastPurpleIndex = numIndices * 0.15 - transitionIndicesGradual;\n    const lastPinkIndex =\n      lastPurpleIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastDarkOrangeIndex =\n      lastPinkIndex + transitionIndicesSmall + numIndices * 0.15 - transitionIndicesGradual;\n    const lastLightOrangeIndex =\n      lastDarkOrangeIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastBlueIndex =\n      lastLightOrangeIndex + transitionIndicesSmall + numIndices * 0.4 - transitionIndicesSmall;\n\n    // Determine the color based on the color zone the index is in.\n    if (index <= lastPurpleIndex)\n      return purple;\n    else if (index <= lastPurpleIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastPurpleIndex) / transitionIndicesGradual;\n      return this.gradientColor(pink, purple, percentage);\n    }\n    else if (index <= lastPinkIndex)\n      return pink;\n    else if (index <= lastPinkIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastPinkIndex) / transitionIndicesSmall;\n      return this.gradientColor(darkOrange, pink, percentage);\n    }\n    else if (index <= lastDarkOrangeIndex)\n      return darkOrange;\n    else if (index <= lastDarkOrangeIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastDarkOrangeIndex) / transitionIndicesGradual;\n      return this.gradientColor(lightOrange, darkOrange, percentage);\n    }\n    else if (index <= lastLightOrangeIndex)\n      return lightOrange;\n    else if (index <= lastLightOrangeIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastLightOrangeIndex) / transitionIndicesSmall;\n      return this.gradientColor(blue, lightOrange, percentage);\n    }     \n    else if (index <= lastBlueIndex)\n      return blue;\n    else\n    {\n      const percentage = (index - lastBlueIndex) / transitionIndicesSmall;\n      return this.gradientColor(purple, blue, percentage);\n    }\n  }\n\n  /**\n   * Return the gradient color based on the specified parameters.\n   * @param {Array} color1 The RGB array of color 1.\n   * @param {Array} color2 The RGB array of color 2.\n   * @param {Number} percent The percentage of the gradient.\n   * @return {Array} The RGB array of the gradient color.\n   * @private\n   */\n  gradientColor(color1, color2, percent) {\n    const p1 = percent;\n    const p2 = 1 - p1;\n    const rgb = [\n      Math.round(color1[0] * p1 + color2[0] * p2),\n      Math.round(color1[1] * p1 + color2[1] * p2),\n      Math.round(color1[2] * p1 + color2[2] * p2)];\n    return rgb;\n  }\n\n  /**\n   * Return the RGB color number corresponding to the specified RGB color array.\n   * @param {Array} array The RGB array.\n   * @return {Number} The RGB color number.\n   * @private\n   */\n  rgbNumberFromArray(array) {\n    let color = 0;\n    array.forEach(element => {\n      color = (color << 8) + element;\n    });\n    return Number(color);\n  }\n\n/**\n   * Return the stroke color of the specified node.\n   * @param {Object} node The node to return the stroke color of.\n   * @return {Array} The stroke color array of the specified node.\n   * @private\n   */\n  getNodeStrokeColorArray(node) {\n    return this.getColorArray(node.index % this.numSymbolNodes, this.numSymbolNodes)\n  }\n\n/**\n   * Start dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragStarted(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0.3).restart();\n    }\n    d3.event.subject.fx = d3.event.subject.x;\n    d3.event.subject.fy = d3.event.subject.y;\n  }\n\n  /**\n   * Continue dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragged(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    d3.event.subject.fx = d3.event.x;\n    d3.event.subject.fy = d3.event.y;\n  }\n\n  /**\n   * Stop dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragEnded(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0);\n    }\n    d3.event.subject.fx = d3.event.subject._fx;\n    d3.event.subject.fy = d3.event.subject._fy;\n  }\n\n  /**\n   * Update the node and link positions on each tick of the simulation.\n   * @private\n   */\n  tick() {\n    // Move the node positions.\n    this.nodesData.forEach((node) => { this.pixiMoveNode(node); });\n\n    // Animate the selected node to grow larger and change to white, then shrink smaller and change\n    // back to original colors.\n    if (this.newBlockNodeStartTime != null) {\n      const node = this.nodesData[this.selectedNodeIndex];\n      const elapsedMs = new Date() - this.newBlockNodeStartTime;\n      if (elapsedMs > this.newBlockNodeTimerMs) {\n        // Draw a normal node circle.\n        this.pixiDrawNode(node);\n\n        // Disable new block node timer.\n        this.newBlockNodeStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        const selectedNodeMagnitude =\n          (elapsedMs <= this.newBlockNodeTimerMs / 2 ?\n            elapsedMs :\n            this.newBlockNodeTimerMs - elapsedMs) /\n          (this.newBlockNodeTimerMs / 2);\n\n        // Draw a modifified node circle based on the magnitude.\n        this.pixiDrawNode(node, selectedNodeMagnitude);\n      }\n    }\n\n    // Calculate link magnitude.\n    let linkMagnitude = 0;\n    if (this.newBlockLinksStartTime != null) {\n      const elapsedMs = new Date() - this.newBlockLinksStartTime;\n      if (elapsedMs > this.newBlockLinksTimerMs) {\n        // Disable new block links timer.\n        this.newBlockLinksStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        linkMagnitude =\n          elapsedMs <= this.newBlockLinksTimerMs / 3 ?\n            elapsedMs / (this.newBlockLinksTimerMs / 3) :\n            (this.newBlockLinksTimerMs - elapsedMs) /\n              (this.newBlockLinksTimerMs * 2 / 3);\n      }\n    }\n\n    // Draw lines for the links.\n    this.linksGraphics.clear();\n    this.linksData.forEach((link) => {\n      this.pixiDrawLink(link, linkMagnitude);\n    });\n    this.linksGraphics.endFill();\n\n    this.renderer.render(this.stage);\n  }\n\n  /**\n   * Rotate the symbol.\n   * @param {Number} elapsed Elapsed time since the timer became active.\n   * @private\n   */\n  rotate(elapsed) {\n    // In order to increase efficiency, it might be possible to decrease the frequency at which we\n    // rotate, then use d3 transition so that the movement is smooth. The problem is, non-symbol\n    // nodes will still be moving based on the simulation, so it's unknown whether this will\n    // actually improve performance. Since it does not seem like d3.interval() can be counted on to\n    // call this function with precision, this may not be a feasible approach, since if you do not\n    // know when the next call will be, you cannot know how long to make the transition.\n    // See webpage \"D3.selectAll(...).transition() Explained\"\n    // (http://bl.ocks.org/Kcnarf/9e4813ba03ef34beac6e)\n\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      this.rotateOffset += this.rotateAmount;\n      const pos = this.getNodePosition(i);\n      this.nodesData[i].fx = this.nodesData[i]._fx = pos[0];\n      this.nodesData[i].fy = this.nodesData[i]._fy = pos[1];\n    }\n  }\n}\n\nexport default DfinitySymbolD3;\n","/**\n * @file ImageLinkGrid\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Grid\n} from '@material-ui/core';\nimport Fade from 'react-reveal/Fade';\n\n/**\n * This component displays a grid of images that link to other pages.\n */\nclass ImageLinkGrid extends Component {\n  static propTypes = {\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * An array of objects describing the image links, where each object contains:\n     *  src: The <img> src attribute.\n     *  height: The <img> height attribute.\n     *  alt: The <img> alt attribute.\n     *  href: The <a> href attribute.\n     */    \n    imageLinks: PropTypes.array.isRequired,\n    /**\n     * The Material-UI justify prop to apply to each row.\n     * @see See [Material-UI Grid documentation](https://material-ui.com/api/grid/).\n     */\n    justifyRow: PropTypes.string,\n    /**\n     * The amount of space between rows.\n     */\n    marginBetweenRows: PropTypes.number,\n    /**\n     * The number of images per row.\n     */\n    perRow: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a ImageLinkGrid object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.state = {widths: [], maxHeight: 0};\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    this.calculateMaxImageDimensions();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    // Determine whether the props have changed.\n    let arePropsChanged = false;\n    const { imageLinks } = this.props;\n    if (imageLinks.length === prevProps.imageLinks.length) {\n      imageLinks.forEach((imageLink, index) => {\n        if (imageLink.src !== prevProps.imageLinks[index].src ||\n            imageLink.height !== prevProps.imageLinks[index].height)\n          arePropsChanged = true;\n      });\n    }\n    else\n      arePropsChanged = true;\n\n    // Only calculate max image dimensions if props have changed, otherwise we would cause an\n    // infinite loop of updating the state.\n    if (arePropsChanged)\n      this.calculateMaxImageDimensions();\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      className,\n      imageLinks,\n      justifyRow,\n      marginBetweenRows,\n      perRow\n    } = this.props;\n    const { widths } = this.state;\n\n    // Make the container slightly taller than the max image height to account for Grid bug where\n    // there are a few pixels of whitespace added under the image. This '+ 4' can be removed once\n    // the Grid bug is fixed.\n    const containerHeight = this.state.maxHeight + 4;\n\n    // The image grid is an array of rows, where each row is an array of image objects. Creating\n    // a two-dimensional array like this is an extra step, but makes the code below more readable.\n    // TODO: Consider an alternate approach to solve the problem of the center column of 3-item rows\n    // not being centered. Use the same maxWidth for all cells. For cells on left, left align. For\n    // cells on right, right align. For all other cells, center. To do this, we'd likely need a cell\n    // within a cell, so that columns could first be centered relative to the column, then placed\n    // in a second wrapper cell (Grid) aligned either left, right, or center. Would need to test\n    // with different row lengths and numbers of images to see what effect it has on spacing for all\n    // conditions. It seems possible this would look wrong for rows longer than 3, since the spacing\n    // at the edges could be greater because the cell within the cell at the edges is not centered.!!!\n    let imageLinkGrid = [];\n    let maxWidthColumn = Array(perRow).fill(0);\n    for (let i = 0; i < imageLinks.length;) {\n      let row = [];\n      const isShortRow = imageLinks.length - i < perRow;\n      for (var j = 0; j < perRow && i < imageLinks.length; j++) {\n        // Do not update maxWidthColumn[j] if this is a short row (last row with fewer columns).\n        if (!isShortRow && widths[i])\n          maxWidthColumn[j] = Math.max(widths[i], maxWidthColumn[j]);\n        row.push(imageLinks[i++]);\n      }\n      imageLinkGrid.push(row);\n    }\n    \n    return (\n      <div className={className}>\n        {imageLinkGrid.map((row, rowIndex) => {\n          const isShortRow = row.length < perRow;\n          return (\n            <Grid container\n              direction='row'\n              // Always set justify='space-around' for a short row (last row with fewer columns).\n              justify={isShortRow ? 'space-around' : (justifyRow || 'space-between')}\n              alignItems='center'\n              key={rowIndex}\n              style={{ marginTop: (rowIndex && marginBetweenRows) ? marginBetweenRows : 0 }}\n            >\n              {row.map((imageLink, columnIndex) => {\n                const index = rowIndex * perRow + columnIndex;\n                return (\n                  <Grid container\n                    direction='column'\n                    justify='center'\n                    alignItems='center'\n                    key={columnIndex}\n                    // Do not use maxWidthColumn[j] if this is a short row (last row with fewer\n                    // columns).\n                    style={{\n                      width: isShortRow ? widths[index] : maxWidthColumn[columnIndex],\n                      height: containerHeight\n                    }}\n                  >\n                    <Grid item>\n                      <a href={imageLink.href} target='_blank' rel='noopener noreferrer'>\n                        <Fade\n                          bottom\n                          delay={index * 50}\n                          timeout={500}\n                        >\n                          <img\n                            src={imageLink.src}\n                            height={imageLink.height}\n                            alt={imageLink.alt}>\n                          </img>\n                        </Fade>\n                      </a>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /**\n   * Calculate the maximum width and height of all images by loading the images. This allows us to\n   * create Grid containers for the images which are all the same size. An image will be\n   * horizontally and vertically centered in its container.\n   * @private\n   */\n  calculateMaxImageDimensions() {\n    const { imageLinks } = this.props;\n    this.setState({\n      widths: Array(imageLinks.length).fill(0),\n      maxHeight: 0\n    });\n\n    // Calculate the widths[] and maxHeight of the images by loading them.\n    imageLinks.forEach((imageLink, index) => {\n      const img = new Image();\n      img.onload = event => {\n        const { naturalWidth, naturalHeight } = event.currentTarget;\n        if (naturalHeight) {\n          // Scale width from natural width to image link width.\n          const width = imageLink.height / naturalHeight * naturalWidth;\n          this.setState(prevState => ({\n            widths: [\n              ...prevState.widths.slice(0, index),\n              width,\n              ...prevState.widths.slice(index + 1)\n            ],\n            maxHeight: Math.max(imageLink.height, prevState.maxHeight)\n          }));\n        }\n      }\n      // Setting src after we have set the onload event will cause the event to be triggered after\n      // the image has loaded.\n      img.src = imageLink.src;\n    });\n  }\n}\n\nexport default ImageLinkGrid;\n","/**\n * @file AboutPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { Parallax } from 'react-parallax';\nimport Fade from 'react-reveal/Fade';\nimport Flip from 'react-reveal/Flip';\nimport LightSpeed from 'react-reveal/LightSpeed';\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\nimport 'react-coinbase-commerce/dist/coinbase-commerce-button.css';\nimport TrackablePage from '../TrackablePage/TrackablePage';\nimport DfinitySymbolD3 from '../DfinitySymbolD3/DfinitySymbolD3';\nimport ImageLinkGrid from '../ImageLinkGrid/ImageLinkGrid';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport bannerXHorizon from './banner-x-horizon.png';\nimport dfinityExplorerLogo from './dfinity-explorer-logo-large.png';\nimport dfinityLogoDark from './dfinity-logo-dark-mode.png';\nimport dfinityLogoLight from './dfinity-logo-light-mode.png';\nimport githubOctocat from './github-octocat.png';\nimport materialUiLogo from './material-ui-logo.png';\nimport nomicsLogoDark from './nomics-logo-dark-mode.png';\nimport nomicsLogoLight from './nomics-logo-light-mode.png';\nimport reactLogo from './react-logo-text.png';\nimport styledComponentsLogoDark from './styled-components-logo-dark-mode.png';\nimport styledComponentsLogoLight from './styled-components-logo-light-mode.png';\n\nconst PaperParallax = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorBodyBackground};\n    /* Allows shadow to overlap the element below it. */\n    position: relative;\n  }\n`;\n\nconst GridParallax = styled(Grid)`\n  && {\n    height: 280px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 200px;       \n      `\n    }\n  }\n`;\n\nconst TypographyParallax = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 200;\n    color: ${props => props.theme.colorAboutHeaderText};  \n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};\n      `)\n    }\n  }\n`;\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-top: 96px;\n    padding-bottom: 96px;\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: 64px;\n        padding-bottom: 64px;\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n      `)\n    }\n  }\n`;\n\nconst GridSectionPrimary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundPrimary};\n  }\n`;\n\nconst GridSectionSecondary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundSecondary};\n  }\n`;\n\nconst GridItem = styled(Grid)`\n  && {\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_LG/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_MD/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridImageLeft = styled(GridItem)`\n  && {\n    order: 1;\n  }\n`;\n\nconst GridImageRight = styled(GridItem)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 1;\n      `\n    }\n  }\n`;\n\nconst GridSymbolLeft = styled(GridImageLeft)`\n  && {\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-top: -32px;\n        margin-bottom: -32px;     \n      `\n    }\n  }\n`;\n\nconst GridText = styled(GridItem)`\n  && {\n    ${({ breakpoint }) =>\n    (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        margin-top: 48px;\n      `\n    }\n  }\n`;\n\nconst GridTextLeft = styled(GridText)`\n  && {\n    order: 1;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst GridTextRight = styled(GridText)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst TypographyHeading = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 300;\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};       \n      `\n    }\n  }\n`;\n\n// From the Material Design documentation: \"The ideal length for legibility of body copy is 40-60\n// characters per line.\"\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\nconst StyledA = styled.a`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    text-decoration: none;\n    &:hover {\n      cursor: pointer;\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst ImgSection = styled.img`\n  && {\n    max-width: 100%;\n    max-height: 300px;\n  }\n`;\n\nconst SpanHeart = styled.span`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n  }\n`;\n\nconst PaperTwitter = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorAboutTwitterBackground};\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        max-width: 640px;\n        margin: auto;\n      `\n    }\n  }\n`;\n\nconst ImageLinkGridThanks = styled(ImageLinkGrid)`\n  && {\n    margin-top: ${Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT/2 + 'px'};\n  }\n`;\n\n/**\n * Component for the about page.\n */\nclass AboutPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getHeader()}\n        {this.getSectionMission()}\n        {this.getSectionOpenSource()}\n        {this.getSectionCommunity()}\n        {this.getSectionContributors()}\n        {this.getSectionThanks()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the header based on the current breakpoint.\n   * @return {Object} The elements for the header based on the current breakpoint.\n   * @private\n   */\n  getHeader()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <PaperParallax elevation={2}>\n        <Fade timeout={1200}>\n          <Parallax bgImage={bannerXHorizon} bgImageAlt='banner' bgImageStyle={{marginTop: '-100px'}} strength={500}>\n            <GridParallax container direction='column' justify='center' alignItems='flex-start' breakpoint={breakpoint}>\n              <Grid item>\n                <TypographyParallax breakpoint={breakpoint}>\n                  An open-source block explorer\n                  <br />\n                  built by the DFINITY community\n                </TypographyParallax>\n              </Grid>\n            </GridParallax>\n          </Parallax>\n        </Fade>\n      </PaperParallax>\n    );\n  }\n\n  /**\n   * Return the elements for the Mission section based on the current breakpoint.\n   * @return {Object} The elements for the Mission section based on the current breakpoint.\n   * @private\n   */\n  getSectionMission()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridSymbolLeft item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <DfinitySymbolD3\n              width={this.getDfinitySymbolD3Width()}\n              isThemeDark={isThemeDark}\n            />\n          </Grid>\n        </GridSymbolLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Mission\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Our mission is to provide a bridge between you and the '}\n              <StyledA href={Constants.URI_ABOUT_DFINITY} target='_blank' rel='noopener noreferrer'>DFINITY</StyledA>\n              {' Internet Computer, allowing you to easily search for and retrieve information '}\n              {'which is useful in a format that is understandable, with everything you want to '}\n              {'know right at your fingertips.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'DFINITY aims to build their organization into a “NASA for decentralization”. '}\n              {'There have in fact been '}\n              <StyledA href={Constants.URI_NASA_EXPLORER} target='_blank' rel='noopener noreferrer'>89 NASA “Explorer” missions</StyledA>\n              {' since 1958, carrying a wide variety of scientific investigations. We want DFINITY '}\n              {'Explorer to be the perfect vehicle to explore the DFINITY universe.'}\n              &nbsp;&nbsp;🚀\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the elements for the Open Source section based on the current breakpoint.\n   * @return {Object} The elements for the Open Source section based on the current breakpoint.\n   * @private\n   */\n  getSectionOpenSource()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Open, Transparent, Trusted\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is an open-source project under the '}\n              <StyledA href={Constants.URI_GITHUB_MIT_LICENSE} target='_blank' rel='noopener noreferrer'>MIT license</StyledA>\n              {', providing transparency, reliability, and security.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'We believe that all block explorers of public blockchains should be open source. '}\n              {'If you’re going to trust a block explorer to provide timely, accurate, and '}\n              {'uncensored information, the code should be open for all to see.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Flip right timeout={800}>\n              <ImgSection\n                src={dfinityExplorerLogo}\n                alt='logo'>\n              </ImgSection>\n            </Flip>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Community section based on the current breakpoint.\n   * @return {Object} The elements for the Community section based on the current breakpoint.\n   * @private\n   */\n  getSectionCommunity()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    const theme = isThemeDark ? 'dark' : 'light';\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridImageLeft item breakpoint={breakpoint}>\n          <Fade timeout={2000}>\n            {/* Twitter card looks better at elevation 2 than 1, since card/body are same color. */}\n            <PaperTwitter elevation={2} breakpoint={breakpoint}>\n              <TwitterTimelineEmbed\n                sourceType='profile'\n                screenName='dfinityexplorer'\n                theme={theme}\n                options={{height: 432}}\n                // Setting key here is a bit of a hack. Since TwitterTimelineEmbed only uses the theme\n                // prop when it mounts, the TwitterTimelineEmbed theme will not change if the user changes\n                // the theme after the page has loaded. By setting key to the theme string, we can force a\n                // remount of TwitterTimelineEmbed when the theme changes, so that it picks up the change\n                // to its theme prop. \n                key={theme}\n                noFooter\n                transparent\n              />\n            </PaperTwitter>\n          </Fade>\n        </GridImageLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Community\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Follow '}\n              <StyledA href={Constants.URI_TWITTER_DFINITY_EXPLORER} target='_blank' rel='noopener noreferrer'>@dfinityexplorer</StyledA>\n              {' on Twitter to learn about the latest DFINITY-related news, videos, and events.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'Learn more about our project on '}\n              <StyledA href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT} target='_blank' rel='noopener noreferrer'>GitHub</StyledA>\n              {'.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n  \n  /**\n   * Return the elements for the Contributors section based on the current breakpoint.\n   * @return {Object} The elements for the Contributors section based on the current breakpoint.\n   * @private\n   */\n  getSectionContributors()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container\n        direction='row'\n        justify='space-between'\n        alignItems='center'\n        breakpoint={breakpoint}\n      >\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Contributors\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is a cooperative effort, made with '}\n              <SpanHeart>♥</SpanHeart>\n              {' by '}\n              <StyledA href={Constants.URI_GITHUB_DYLAN} target='_blank' rel='noopener noreferrer'>@dylancm4</StyledA>\n              {', '}\n              <StyledA href={Constants.URI_GITHUB_TODD} target='_blank' rel='noopener noreferrer'>@toddkitchens</StyledA>\n              {', and a friendly bunch of '}\n              <StyledA href={Constants.URI_GITHUB_CONTRIBUTORS} target='_blank' rel='noopener noreferrer'>contributors</StyledA>\n              {' from the DFINITY community. We are passionate about DFINITY and we want to build '}\n              {'things to help it to succeed.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <LightSpeed right timeout={800}>\n              <ImgSection\n                src={githubOctocat}\n                alt='GitHub Octocat'>\n              </ImgSection>\n            </LightSpeed>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Thanks section based on the current breakpoint.\n   * @return {Object} The elements for the Thanks section based on the current breakpoint.\n   * @private\n   */\n  getSectionThanks() {\n    // Possibly add: Recharts!!!\n    const { breakpoint, isThemeDark } = this.props;\n    \n    // Adjust heights based on the perceived size of images (i.e., some images contain smaller logos\n    // to make room for the text, so those images need to be enlarged).\n    const reactHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.3;\n    const styledComponentsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.4;\n    const materialUiHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT;\n    const nomicsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 0.9;\n    const dfinityHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.2;\n\n    // Define the image link objects for the ImageLinkGrid.\n    const imageLinks = [\n      {\n        src: reactLogo,\n        height: reactHeight,\n        alt: 'React logo',\n        href: Constants.URI_ABOUT_REACT\n      },\n      {\n        src: isThemeDark ? styledComponentsLogoDark : styledComponentsLogoLight,\n        height: styledComponentsHeight,\n        alt: 'Styled Components logo',\n        href: Constants.URI_ABOUT_STYLED_COMPONENTS\n      },\n      {\n        src: materialUiLogo,\n        height: materialUiHeight,\n        alt: 'Material-UI logo',\n        href: Constants.URI_ABOUT_MATERIAL_UI\n      },\n      {\n        src: isThemeDark ? nomicsLogoDark : nomicsLogoLight,\n        height: nomicsHeight,\n        alt: 'Nomics logo',\n        href: Constants.URI_ABOUT_NOMICS\n      },\n      {\n        src: isThemeDark ? dfinityLogoDark : dfinityLogoLight,\n        height: dfinityHeight,\n        alt: 'DFINITY logo',\n        href: Constants.URI_ABOUT_DFINITY\n      }\n    ];\n\n    // Calculate images per row based on the current breakpoint.\n    let imagesPerRow;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        imagesPerRow = 1;\n        break;\n      case Breakpoints.SM:\n        imagesPerRow = 2;\n        break;\n      default:\n        imagesPerRow = 3;\n        break;\n    }\n\n    return (\n      <GridSectionPrimary container\n        direction='column'\n        justify='flex-start'\n        alignItems='stretch'\n        breakpoint={breakpoint}\n      >\n        <Grid container direction='row' justify='center' alignItems='center'>\n          <Grid item>\n            <Fade bottom timeout={500}>\n              <TypographyHeading breakpoint={breakpoint}>Special thanks to:</TypographyHeading>\n            </Fade>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ImageLinkGridThanks\n            imageLinks={imageLinks}\n            perRow={imagesPerRow}\n            justifyRow={breakpoint === Breakpoints.XS ? 'center' : 'space-between'}\n            marginBetweenRows={Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT / 2}\n          />\n        </Grid>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @return {Number} The width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @private\n   */\n  getDfinitySymbolD3Width() {\n    const { breakpoint, isDesktopDrawerOpen } = this.props;\n    const contentWidth =  window.innerWidth - (isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0);\n\n    let width;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_XS*2;\n        break;\n      case Breakpoints.SM:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_SM*2;\n        break;\n      case Breakpoints.MD:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_MD*3/2;\n        // This is a bit of a hack, but we scale the symbol slightly larger because it does not fill\n        // its window all the way to the edges.\n        width *= 1.2;\n        break;\n      default:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_LG*3/2;\n        width *= 1.2;\n        break;\n    }\n    return width;\n  }\n}\n\nexport default AboutPage;\n","/**\n * @file DEAppBar\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport {\n  AppBar,\n  Divider,\n  Drawer,\n  Fade,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  SwipeableDrawer,\n  Toolbar,\n  Typography,\n  Zoom\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport RevealFade from 'react-reveal/Fade';\nimport RevealZoom from 'react-reveal/Zoom';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent'\nimport {\n  Breakpoints,\n  getBreakpoint,\n  isBreakpointLessOrEqualTo,\n  isBreakpointDesktop\n} from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport dfinityExplorerLogo from './dfinity-explorer-logo.png';\n\nconst StyledAppBar = styled(AppBar)`\n  && {\n    background: ${props => props.theme.colorAppBarBackground};\n    /* AppBar is above Drawer */\n    z-index: ${zIndex.drawer + 1};\n  }\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  && {\n    padding-left: 12px;\n    padding-right: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: 4px;\n        padding-right: 4px;\n      `\n    }\n  }\n`;\n\nconst ImgProductIcon = styled.img`\n  && {\n    margin-left: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 0px;\n      `\n    }\n  }\n`;\n\n// Specify font-size in px rather than rem for app name, since it should not change based on browser\n// settings.\nconst TypographyAppName = styled(Typography)`\n  && {\n    margin-top: 1px;\n    font-family: 'Istok Web', sans-serif;\n    font-weight: bold;\n    font-size: 20px;\n    user-select: none;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: 14px;\n      `\n    }\n  }\n`;\n\nconst TypographyDfinity = styled(TypographyAppName)`\n  && {\n    margin-left: 12px;\n    letter-spacing: 12px;\n    color: ${props => props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 8.4px;\n        letter-spacing: 8.4px;\n      `\n    }\n  }\n`;\n\n/**\n * A separate div is used for the border between DFINITY and Explorer, so that it can be\n * animated. The height is based on TypographyAppName font-size, and matches exactly what\n * \"border-right: 1px solid\" in TypographyDfinity would look like.\n */\nconst TypographyBorder = styled.div`\n  && {\n    width: 0px;\n    height: 29px;\n    border-right: ${props => '1px solid ' + props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 20.3px;\n      `\n    }\n  }\n`;\n\nconst TypographyExplorer = styled(TypographyAppName)`\n  && {\n    margin-left: 14px;\n    letter-spacing: 7.5px;\n    color: ${props => props.theme.colorAppBarExplorerText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 9.8px;\n        letter-spacing: 5.25px;\n      `\n    }\n  }\n`;\n\nconst StyledIconButton = styled(IconButton)`\n  && {\n    color: ${props => props.theme.colorAppBarTextButton};\n\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorAppBarTextButton};\n      }\n    }\n  }\n`;\n\nconst StyledMenuIcon = styled(MenuIcon)`\n  && {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nconst StyledSwipeableDrawer = styled(({ ...other }) => (\n  <SwipeableDrawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n  }\n`;\n\nconst StyledDrawer = styled(({ ...other }) => (\n  <Drawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n    border-right:\n      ${props => props.theme.isDark ? `1px solid ${props.theme.colorBodyBackground}` : '0px'};\n  }\n`;\n\nconst StyledDivider = styled(Divider)`\n  && {\n    background: ${props => props.theme.colorDrawerDivider};\n  }\n`;\n\nconst DrawerListItemIcon = styled(ListItemIcon)``;\n\nconst DrawerListItemText = styled(({ ...other }) => (\n  <ListItemText {...other} classes={{ primary: 'primary' }} />\n))``;\n\nconst DrawerListItem = styled(ListItem)`\n  && {\n    padding-top: 9.5px;\n    padding-bottom: 9.5px;\n    ${DrawerListItemIcon} {\n      margin-left: 8px;\n      color: ${\n        props => props.selected ?\n          props.theme.colorDrawerIconTextSelected :\n          props.theme.colorDrawerIcon\n      };\n    }\n    ${DrawerListItemText} {\n      margin-left: -8px;\n      & .primary {\n        font-family: ${Constants.FONT_PRIMARY};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_BUTTON};\n        font-weight: ${props => props.selected ? 600 : 400};\n        color: ${\n          props => props.selected ?\n            props.theme.colorDrawerIconTextSelected :\n            props.theme.colorDrawerText\n        };\n      }\n    }\n  }\n`;\n\n// DCM 2019-02-02: I tried for a few hours to change the \"selected\" background color of a ListItem\n// using styled-components, but I was unsuccessful even though it seems like the code below should\n// work. I was able to change the color using the Material-UI withStyles() technique of styling:\n// https://stackoverflow.com/questions/50371315/how-to-override-material-ui-menuitem-selected-background-color\n// However, that technique does not have access to props, so it would not work well with the way\n// we're currently doing theming. There is likely a way to get this working in a way that does not\n// use styled-components, but the \"selected\" background color is not important enough to spend the\n// time on this issue right now.\n/*const DrawerListItem = styled(({ ...other }) => (\n  <ListItem classes={{ selected: 'selected' }} {...other} />\n))`\n  && {\n    background: pink;\n    &:focus {\n      background: cyan;\n    }\n    &:hover {\n      background: red;\n    }\n    // All of the above colors work, but the \"selected\" background color does not work.\n    & .selected {\n      background: blue !important;\n    }\n  }\n`;*/\n\n/**\n * The App Bar provides content and actions related to the current screen.\n */\nclass DEAppBar extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * Callback fired when the App Bar is resized.\n     */\n    handleAppBarResize: PropTypes.func,\n    /**\n     * Callback fired when the desktop drawer (large screens) menu button is clicked.\n     */\n    handleDesktopDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * Callback fired when the mobile drawer (small screens) menu button is clicked.\n     */\n    handleMobileDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True if the mobile drawer (small screens) is open.\n     */    \n    isMobileDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired,\n    /**\n     * Reference to the <HashRouter> element.\n     */\n    routerRef: PropTypes.object\n  };\n\n  /**\n   * Create a DEAppBar object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.toolbarDivRef = React.createRef();\n\n    // Bind to make 'this' work in callbacks.\n    this.isActiveRoute = this.isActiveRoute.bind(this);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <Fragment>\n        {/* Toolbar shim to compensate for AppBar position='fixed'. */}\n        <div ref={this.toolbarDivRef}>\n          <Toolbar />\n        </div>\n        <Fade in={true} timeout={200} mountOnEnter unmountOnExit>\n          <StyledAppBar elevation={2}>\n            {this.getToolbarDefaultContent()}\n          </StyledAppBar>\n        </Fade>\n        {this.getDrawer()}\n      </Fragment>\n    );\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    super.handleWindowResize();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n\n    // Close the mobile drawer (small screens) when screen is resized larger, so that it does not\n    // reappear when the screen is resized smaller.\n    if (isBreakpointDesktop() && this.props.isMobileDrawerOpen)\n      this.props.handleMobileDrawerMenuClick();\n  }\n\n  /**\n   * Return the elements for the toolbar based on the current breakpoint.\n   * @return {Object} The elements for the toolbar based on the current breakpoint.\n   * @private\n   */\n  getToolbarDefaultContent() {\n    const breakpoint = getBreakpoint();\n    return (\n      <StyledToolbar breakpoint={breakpoint}>\n        <Grid container alignItems='center' wrap='nowrap'>\n          <Grid item>\n            {this.getMenuButton()}\n          </Grid>\n          {this.getAppTitle()}\n        </Grid>\n      </StyledToolbar>\n    );\n  }\n\n  /**\n   * Return the elements for the menu button on the current breakpoint.\n   * @return {Object} The elements for the menu button based on the current breakpoint.\n   * @private\n   */\n  getMenuButton() {\n    const { handleMobileDrawerMenuClick, handleDesktopDrawerMenuClick } = this.props;\n    return (\n      <Zoom in={true} timeout={300}>\n        <StyledIconButton\n          onClick={\n            isBreakpointDesktop() ? handleDesktopDrawerMenuClick : handleMobileDrawerMenuClick\n          }\n        >\n          <StyledMenuIcon />\n        </StyledIconButton>\n      </Zoom>\n    );\n  }\n\n  /**\n   * Return the elements for the app title based on the current breakpoint.\n   * @return {Object} The elements for the app title based on the current breakpoint.\n   * @private\n   */\n  getAppTitle() {\n    const breakpoint = getBreakpoint();\n    return (\n      <Link\n        style={{ textDecoration: 'none' }}\n        to='/'\n      >\n        <Grid container alignItems='center' justify='flex-start' wrap='nowrap'>\n          <RevealFade timeout={500}>\n            <Grid item>\n              <ImgProductIcon\n                src={dfinityExplorerLogo}\n                height={this.getProductIconHeight()}\n                alt='logo'\n                breakpoint={breakpoint}\n              >\n              </ImgProductIcon>\n            </Grid>\n            <Grid item>\n              <TypographyDfinity breakpoint={breakpoint}>DFINITY</TypographyDfinity>\n            </Grid>\n            <RevealZoom timeout={350}>\n              <Grid item>\n                <TypographyBorder breakpoint={breakpoint} />\n              </Grid>\n            </RevealZoom>\n            <Grid item>\n              <TypographyExplorer breakpoint={breakpoint}>ExpIorer</TypographyExplorer>\n            </Grid>\n          </RevealFade>\n        </Grid>\n      </Link>\n    );\n  }\n\n  /**\n   * Return the height of the product icon based on the current breakpoint.\n   * @return {Number} The height of the product icon based on the current breakpoint.\n   * @private\n   */\n  getProductIconHeight() {\n    if (isBreakpointLessOrEqualTo(Breakpoints.XS))\n      return 23.8;\n    else\n      return 34;\n  }\n\n  /**\n   * Return the elements for the drawer based on the current breakpoint.\n   * @return {Object} The elements for the drawer based on the current breakpoint.\n   * @private\n   */\n  getDrawer() {\n    // The Material Design documentation states: \"Modal drawer: In a responsive layout grid, at a\n    // defined minimum breakpoint of at least 600dp width, a standard drawer should be replaced with\n    // a modal drawer.\" We use a modal drawer for breakpoints xs and sm (i.e., up to 960px).\n    if (isBreakpointDesktop()) {\n      return (\n        <StyledDrawer variant='persistent' open={this.props.isDesktopDrawerOpen}>\n          {this.getDrawerContent()}\n        </StyledDrawer>\n      );\n    }\n    else {\n      return (\n        <StyledSwipeableDrawer\n          open={this.props.isMobileDrawerOpen}\n          onOpen={this.props.handleMobileDrawerMenuClick}\n          onClose={this.props.handleMobileDrawerMenuClick}\n        >\n          <div onClick={this.props.handleMobileDrawerMenuClick}>\n            {this.getDrawerContent()}\n          </div>\n        </StyledSwipeableDrawer>\n      );\n    }  \n  }\n\n  /**\n   * Return the elements for the drawer content based on the current breakpoint.\n   * @return {Object} The elements for the drawer content based on the current breakpoint.\n   * @private\n   */\n  getDrawerContent() {\n    /* Use constants for paths such as 'about' everywhere in code!!! */\n    return (\n      <Fragment>\n        {/* Shim to compensate for AppBar position='fixed'. */}\n        <Toolbar/>\n        <List>\n          {/* Could change this to be more generic by calling map() on an array of route objects\n              which contain info such as: path, menu text, and icon.\n              See: https://stackoverflow.com/questions/50801093/material-ui-drawer-selection-how-to-route\n          */}\n          <DrawerListItem button component={Link} to='/' selected={this.isActiveRoute('/')}>\n            <DrawerListItemIcon>\n              <HomeIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Home' selected={this.isActiveRoute('/')} />\n          </DrawerListItem>\n          <StyledDivider />\n          <DrawerListItem button component={Link} to='/about' selected={this.isActiveRoute('/about')}>\n            <DrawerListItemIcon>\n              <InfoIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='About' />\n          </DrawerListItem>\n        </List>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Return true if the specified route matches the current route, false otherwise.\n   * @param {String} routeName The name of the route to check.\n   * @return {Boolean} True if the specified route matches the current route, false otherwise.\n   * @private\n   */\n  isActiveRoute(routeName) {\n    return this.props.location.pathname === routeName;\n  }\n};\n\nexport default withRouter(DEAppBar);","/**\n * @file Footer\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Checkbox,\n  Grid,\n  Icon,\n  IconButton,\n  SvgIcon,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\nimport { Breakpoints, getBreakpoint } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst FooterToolbar = styled(Toolbar)`\n  && {\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: ${Constants.FOOTER_HEIGHT + 'px'};\n    padding-left: 0px;\n    padding-right: 0px;\n    text-align: center;\n    background: ${props => props.theme.colorFooterBackground};\n    color: ${props => props.theme.colorFooterTextIcon};\n  }\n`;\n\nconst OneThirdGrid = styled(Grid)`\n  && {\n    width: 33.33%;\n  }\n`;\n\nconst LeftThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-left: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst RightThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-right: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-right: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst FooterTypography = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: 12px;\n  }\n`;\n\nconst FooterA = styled.a`\n  && {\n    color: ${props => props.theme.colorFooterTextIcon};\n    text-decoration: underline;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst AwesomeIconButtonGrid = styled(Grid)`\n  && {\n    // Look into why this is needed!!!\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        min-width: 35px;\n      `\n    }\n  }\n`;\n\nconst AwesomeIconButton = styled(IconButton)`\n  && {\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: inherit;\n      }\n    }\n  }\n`;\n\nconst AwesomeIcon = styled(Icon)`\n  && {\n    font-size: 20px;\n  }\n`;\n\nconst ThemeCheckbox = styled(Checkbox)`\n  && {\n    width: 26px;\n    height: 26px;\n    color: ${props => props.theme.colorFooterTextIcon};\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorFooterTextIcon};\n      }\n    }\n  }\n`;\n\nconst ThemeSvgIcon = styled(SvgIcon)`\n  && {\n    margin-top: -1px;\n    font-size: 17px;\n  }\n`;\n\n/**\n * The Footer provides information related to the current screen.\n */\nclass Footer extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * Callback fired when the value of the theme checkbox changes.\n     */    \n    handleThemeChange: PropTypes.func.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    loadCSS(Constants.URI_CDN_FONT_AWESOME, document.querySelector('#insertion-point-jss'));\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const breakpoint = getBreakpoint();\n    return (\n      <FooterToolbar>\n        <LeftThirdGrid\n          container\n          direction='row'\n          justify='flex-start'\n          alignItems='center'\n          breakpoint={breakpoint}\n        >\n          <Grid item>\n            <FooterTypography color='inherit'>\n              {this.getCopyrightText()}\n            </FooterTypography>\n          </Grid>\n        </LeftThirdGrid>\n        <OneThirdGrid container direction='column' justify='center' alignItems='center'>\n          { this.props.location.pathname === '/' &&\n            <Grid item>\n              <FooterTypography color='inherit'>\n                {'('}\n                {this.getNomicsTextDescription()}\n                <FooterA href={Constants.URI_ABOUT_NOMICS} target='_blank' rel='noopener noreferrer'>\n                  {this.getNomicsTextLink()}\n                </FooterA>\n                {')'}\n              </FooterTypography>\n            </Grid>\n          }\n        </OneThirdGrid>\n        <RightThirdGrid\n          container direction='row'\n          justify='flex-end'\n          alignItems='center'\n          wrap='nowrap'\n          breakpoint={breakpoint}\n        >\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_TWITTER_DFINITY_EXPLORER}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-twitter' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-github' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <ThemeCheckbox\n              color='default'\n              checked={this.props.isThemeDark}\n              icon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_LIGHT} />\n                </ThemeSvgIcon>\n              }\n              checkedIcon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_DARK} />\n                </ThemeSvgIcon>\n              }\n              onChange={this.props.handleThemeChange}\n            />\n          </AwesomeIconButtonGrid>\n        </RightThirdGrid>\n      </FooterToolbar>\n    );\n  }\n\n  /**\n   * Return the copyright text.\n   * @return {String} the copyright text.\n   * @private\n   */\n   getCopyrightText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return '© 2021 dfinityexplorer';\n      case Breakpoints.SM:\n        return '© 2021 dfinityexplorer contributors';\n      default:\n        return '© 2021 dfinityexplorer contributors | All rights reserved';\n    }\n  }\n\n  /**\n   * Return the Nomics attribution description text.\n   * @return {String} The Nomics attribution description text.\n   * @private\n   */\n   getNomicsTextDescription() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return 'Price data by ';\n      default:\n        return 'Price data provided by Nomics.com ';\n    }\n  }\n\n  /**\n   * Return the Nomics attribution link text.\n   * @return {String} The Nomics attribution link text.\n   * @private\n   */\n  getNomicsTextLink() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return 'Nomics.com';\n      default:\n        return 'Cryptocurrency Market Data API';\n    }\n  }\n};\n\nexport default withRouter(Footer);\n","/**\n * @file App\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, an dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport {\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport ReactGA from 'react-ga';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Grid\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { GlobalStyle, themeLight, themeDark } from './theme/globalStyle';\nimport HomePage from './Components/HomePage/HomePage';\nimport AboutPage from './Components/AboutPage/AboutPage';\nimport DEAppBar from './Components/DEAppBar/DEAppBar';\nimport Footer from './Components/Footer/Footer';\nimport Constants from './constants';\nimport { getBreakpoint, isBreakpointDesktop } from './utils/breakpoint';\n\n// Initialize the react-ga library. We do not need user consent to be GDPR compliant. According to\n// Google: \"When using Google Analytics Advertising Features, you must also comply with the European\n// Union User Consent Policy.\" Advertising Features are not enabled for DFINITY Explorer. Under the\n// GDPR, an IP address is considered Personally Identifiable Information (PII), so we anonymize the\n// IP addresses sent to Google Analytics.\nReactGA.initialize(Constants.GOOGLE_ANALYTICS_TRACKING_ID);\nReactGA.set({ anonymizeIp: true });\n\nconst ContentDiv = styled.div`\n  && {\n    margin-left: ${props => props.isDesktopDrawerOpen ? Constants.DRAWER_WIDTH + 'px' : '0px'};\n    transition: ${props =>\n      'margin-left ' +\n      (props.isDesktopDrawerOpen ? duration.enteringScreen : duration.leavingScreen) +\n      'ms ' +\n      easing.easeInOut};\n  }\n`;\n\nconst ContentGrid = styled(Grid)`\n  && {\n    /* The height of the body + footer is the total viewport height - App Bar height. */\n    min-height: calc(100vh - ${props => props.appbarheight + 'px'});\n`;\n\n/**\n * Top-level component of the app.\n */\nclass App extends Component {\n  /**\n   * Create an App object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      routerRef: null,\n      appBarHeight: 0,\n      isDesktopDrawerEnabled: true,\n      isMobileDrawerOpen: false,\n      isThemeDark: true\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.setRouterRef = this.setRouterRef.bind(this);\n    this.handleAppBarResize = this.handleAppBarResize.bind(this);\n    this.handleDesktopDrawerMenuClick = this.handleDesktopDrawerMenuClick.bind(this);\n    this.handleMobileDrawerMenuClick = this.handleMobileDrawerMenuClick.bind(this);\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Load fonts.\n    loadCSS(\n      Constants.URI_CDN_GOOGLE_FONTS,\n      document.querySelector('#insertion-point-jss')\n    );\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      appBarHeight,\n      isDesktopDrawerEnabled,\n      isMobileDrawerOpen,\n      isThemeDark,\n      routerRef\n    } = this.state;\n\n    const isDesktopDrawerOpen = isDesktopDrawerEnabled && isBreakpointDesktop();\n    const breakpoint = getBreakpoint(isDesktopDrawerOpen);\n\n    return (\n      <Fragment>\n        <GlobalStyle theme={this.getTheme()} />\n        <ThemeProvider theme={this.getTheme()}>\n          <HashRouter ref={this.setRouterRef}>\n            <div>\n              <DEAppBar\n                handleAppBarResize={this.handleAppBarResize}\n                handleDesktopDrawerMenuClick={this.handleDesktopDrawerMenuClick}\n                handleMobileDrawerMenuClick={this.handleMobileDrawerMenuClick}\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                routerRef={routerRef}\n              />\n              <ContentDiv\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                /* Workaround to force react-parallax to update when drawer opens/closes. Perhaps */\n                /* file an issue with react-parallax that Parallax does not update when */\n                /* margin-left changes. */\n                onTransitionEnd={() => window.dispatchEvent(new Event('resize'))}\n              >\n                <ContentGrid\n                  container\n                  direction='column'\n                  justify='space-between'\n                  appbarheight={appBarHeight}\n                >                 \n                  <Route\n                    exact path='/'\n                    render={(props) => \n                      <HomePage\n                        {...props}\n                        breakpoint={breakpoint}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/about'\n                    render={(props) => \n                      <AboutPage\n                        {...props}\n                        breakpoint={breakpoint}\n                        isDesktopDrawerOpen={isDesktopDrawerOpen}\n                        isThemeDark={isThemeDark}\n                      />\n                    }\n                  />\n                  <Footer                  \n                    handleThemeChange={this.handleThemeChange}\n                    isThemeDark={isThemeDark}\n                  />\n                </ContentGrid>\n              </ContentDiv>\n            </div>\n          </HashRouter>\n        </ThemeProvider>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Set a reference to the HashRouter element.\n   * @public\n   */\n  setRouterRef(element) {\n    this.setState({ routerRef: element });\n  };\n\n  /**\n   * Callback fired when the App Bar is resized.\n   * @private\n   */\n  handleAppBarResize(height) {\n    this.setState({\n      appBarHeight: height\n    });\n  }\n\n  /**\n   * Callback fired when the desktop drawer (large screens) menu button is clicked.\n   * @private\n   */\n  handleDesktopDrawerMenuClick(contentRect) {\n    this.setState({\n      isDesktopDrawerEnabled: !this.state.isDesktopDrawerEnabled\n    });\n  }\n\n  /**\n   * Callback fired when the mobile drawer (small screens) menu button is clicked.\n   * @private\n   */\n  handleMobileDrawerMenuClick(contentRect) {\n    this.setState({\n      isMobileDrawerOpen: !this.state.isMobileDrawerOpen\n    });\n  }\n\n  /**\n   * Callback fired when the value of the Footer component theme checkbox changes.\n   * @param {Object} event The event source of the callback.\n   * @param {Number} checked The checked value of the switch.\n   * @public\n   */\n  handleThemeChange(event, checked) {\n    this.setState({\n      isThemeDark: checked\n    });\n  }\n\n  /**\n   * Return the current theme.\n   * @return {Object} The current theme.\n   * @private\n   */\n  getTheme() {\n    return this.state.isThemeDark ? themeDark : themeLight;\n  }\n}\n\nexport default App;\n","/**\n * @file index\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\ndocument.getElementById(\"root\"));\n"],"sourceRoot":""}