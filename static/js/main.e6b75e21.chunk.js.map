{"version":3,"sources":["Components/AboutPage/banner-x-horizon.png","Components/AboutPage/dfinity-explorer-logo-large.png","Components/AboutPage/dfinity-logo-dark-mode.png","Components/AboutPage/dfinity-logo-light-mode.png","Components/AboutPage/github-octocat.png","Components/AboutPage/material-ui-logo.png","Components/AboutPage/nomics-logo-dark-mode.png","Components/AboutPage/nomics-logo-light-mode.png","Components/AboutPage/react-logo-text.png","Components/AboutPage/styled-components-logo-dark-mode.png","Components/AboutPage/styled-components-logo-light-mode.png","Components/DEAppBar/dfinity-explorer-logo.png","constants.js","theme/globalStyle.js","Components/ResponsiveComponent/ResponsiveComponent.js","Components/TrackablePage/TrackablePage.js","Components/DashCard/DashCard.js","Components/BlocksCard/BlocksCard.js","Components/BlockTimeCard/BlockTimeCard.js","Components/MessagesCard/MessagesCard.js","Components/PriceCard/PriceCard.js","utils/breakpoint.js","Components/BarChart/BarChart.js","utils/roundDownDateToDay.js","Components/BlocksChart/BlocksChart.js","Components/CanistersChart/CanistersChart.js","Components/MessagesChart/MessagesChart.js","utils/roundDownDateToHour.js","Components/AreaChart/AreaChart.js","Components/PriceChart/PriceChart.js","Components/HomePage/HomePage.js","utils/getRandomInt.js","utils/getRandomNumber.js","Components/DfinitySymbolD3/DfinitySymbolD3.js","Components/ImageLinkGrid/ImageLinkGrid.js","Components/AboutPage/AboutPage.js","Components/DEAppBar/DEAppBar.js","Components/Footer/Footer.js","App.js","index.js"],"names":["module","exports","Constants","Object","freeze","URI_CDN_FONT_AWESOME","URI_CDN_GOOGLE_FONTS","URI_ABOUT_DFINITY","URI_ABOUT_NOMICS","URI_ABOUT_MATERIAL_UI","URI_ABOUT_REACT","URI_ABOUT_STYLED_COMPONENTS","URI_GITHUB_CONTRIBUTORS","URI_GITHUB_DFINITY_EXPLORER_PROJECT","URI_GITHUB_DYLAN","URI_GITHUB_MIT_LICENSE","URI_GITHUB_TODD","URI_NASA_EXPLORER","URI_TWITTER_DFINITY_EXPLORER","COLOR_DFINITY_BLACK","COLOR_DFINITY_BLACK_LIGHTER","COLOR_DFINITY_BLACK_DARKER","COLOR_DFINITY_LIGHT_ORANGE","COLOR_DFINITY_DARK_ORANGE","COLOR_DFINITY_BLUE_400","COLOR_DFINITY_BLUE_500","COLOR_DFINITY_BLUE_600","COLOR_DFINITY_BLUE_700","COLOR_DFINITY_BLUE_800","COLOR_DFINITY_BLUE_900","COLOR_TEXT_LIGHT","COLOR_DARK_TEXT","COLOR_DARK_TEXT_FADED","COLOR_TEXT_DARKER","COLOR_TEXT_DARKEST","COLOR_LIGHT_TEXT_FADED","COLOR_DARK_BODY_DARKER_MAC_OS","COLOR_DARK_BODY_LIGHTER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_MAC_OS","COLOR_DARK_DRAWER_DIVIDER_YOUTUBE","COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX","COLOR_DARK_TEXT_MAC_OS","COLOR_LIGHT_BODY_TEXT_GOOGLE","COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE","COLOR_LIGHT_CHART_GOOGLE","COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE","COLOR_LIGHT_DRAWER_ICON_GOOGLE","COLOR_LIGHT_DRAWER_TEXT_GOOGLE","COLOR_TWITTER_BLUE","COLOR_TWITTER_GREEN","COLOR_TWITTER_ORANGE","COLOR_TWITTER_PURPLE","COLOR_GRAY_ON_WHITE","FONT_PRIMARY","MATERIAL_FONT_SIZE_H1","MATERIAL_FONT_SIZE_H2","MATERIAL_FONT_SIZE_H3","MATERIAL_FONT_SIZE_H4","MATERIAL_FONT_SIZE_H5","MATERIAL_FONT_SIZE_H6","MATERIAL_FONT_SIZE_SUBTITLE_1","MATERIAL_FONT_SIZE_SUBTITLE_2","MATERIAL_FONT_SIZE_BODY_1","MATERIAL_FONT_SIZE_BODY_2","MATERIAL_FONT_SIZE_BUTTON","MATERIAL_FONT_SIZE_CAPTION","MATERIAL_FONT_SIZE_OVERLINE","MATERIAL_CIRCULAR_INDICATOR_SIZE","MATERIAL_UI_ICON_BUTTON_FONT_SIZE","FONT_SIZE_TABLE_XS","BREAKPOINT_MIN_XS","BREAKPOINT_MAX_XS","BREAKPOINT_MIN_SM","BREAKPOINT_MAX_SM","BREAKPOINT_MIN_MD","BREAKPOINT_MAX_MD","BREAKPOINT_MIN_LG","BREAKPOINT_MAX_LG","BREAKPOINT_MIN_XL","BREAKPOINT_LG_MAX_WIDTH","DRAWER_WIDTH","FOOTER_HEIGHT","FOOTER_MARGIN_XS","FOOTER_MARGIN_SM_AND_UP","ICON_SVG_PATH_MPS","ICON_SVG_PATH_BLOCK","ICON_SVG_PATH_PRICE","ICON_SVG_PATH_BLOCK_TIME","ICON_SVG_PATH_THEME_LIGHT","ICON_SVG_PATH_THEME_DARK","ABOUT_PAGE_MARGIN_XS","ABOUT_PAGE_MARGIN_SM","ABOUT_PAGE_MARGIN_MD","ABOUT_PAGE_MARGIN_LG","HOME_PAGE_MARGIN_XS","HOME_PAGE_MARGIN_SM_AND_UP","ABOUT_PAGE_PROJECT_ICONS_HEIGHT","GOOGLE_ANALYTICS_TRACKING_ID","BLOCKS_CARD_POLL_INTERVAL_MS","BLOCK_TIME_POLL_INTERVAL_MS","MESSAGES_TIME_POLL_INTERVAL_MS","PRICE_POLL_INTERVAL_MS","IC_RELEASE","NOMICS_API_KEY","GlobalStyle","createGlobalStyle","props","theme","colorBodyBackground","themeLight","isDark","colorAboutBackgroundPrimary","colorAboutBackgroundSecondary","colorAboutHeaderText","colorAboutTwitterBackground","colorAppBarBackground","colorAppBarTextButton","colorAppBarDfinityText","colorAppBarExplorerText","colorBodyButtonBackground","colorBodyButtonText","colorBodyButtonHoverBackground","colorBodyButtonHoverText","colorBodyText","colorBodyTextDim","colorBodyTextLink","colorDashCardBackground","colorDashCardIcon","colorDashCardIconOpacity","colorDrawerBackground","colorDrawerDivider","colorDrawerIcon","colorDrawerIconTextSelected","colorDrawerText","colorChartBackground","colorChartTooltipBackground","colorChartAxes","colorChartGrid","colorChartText","colorChartLine","colorChartActiveDotStroke","colorIconButtonHover","colorTableBackgroundPrimary","colorTableRowBorder","colorTableTextDim","colorFooterBackground","colorFooterTextIcon","colorSearchText","colorSearchIcon","opacityActionDisabled","opacityActionHover","themeDark","ResponsiveComponent","handleWindowResize","bind","throttledHandleWindowResize","throttle","window","addEventListener","this","removeEventListener","forceUpdate","Component","TrackablePage","scrollTo","pathName","location","pathname","search","trackPage","prevProps","currentPathName","nextPathName","ReactGA","set","page","pageview","GridNoWrap","styled","Grid","SvgIconCard","SvgIcon","cardindex","TypographyTitle","Typography","TypographyValue","DashCard","subscribeToNewObjects","cardIndex","className","svgIconPath","title","value","Paper","elevation","container","direction","justify","alignItems","wrap","item","d","noWrap","BlocksCard","state","blockHeight","error","pollForBlockHeight","interval","setInterval","clearInterval","blockHeightText","toLocaleString","startDate","Date","setMinutes","getMinutes","endDate","url","Math","floor","getTime","axios","get","then","res","data","result","length","values","lastValue","newBlockHeight","setState","catch","BlockTimeCard","startBlockHeight","lastBlockHeight","blocksPerSecond","pollForBlockTime","blockTimeText","toFixed","MessagesCard","messagesPerSecond","pollForMessagesTime","messagesTimeText","firstValue","numMessages","max","seconds","PriceCard","price","pollForPrice","priceText","parseFloat","Breakpoints","XS","SM","MD","LG","XL","getBreakpoint","isDesktopDrawerOpen","drawerWidth","matchMedia","matches","isBreakpointDesktop","breakpoint","isBreakpointGreaterOrEqualTo","StyledPaper","StyledBarChart","RechartsBarChart","BarChart","chartHeight","getData","getTitle","width","height","margin","top","right","left","bottom","style","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","vertical","dataKey","getDataKeyX","tick","fill","tickFormatter","getGetTickX","tickMargin","tickSize","getGetTickY","tickLine","labelFormatter","getGetTooltipX","formatter","getGetTooltipY","contentStyle","background","border","borderRadius","fontSize","boxShadow","shadows","itemStyle","color","labelStyle","cursor","animationDuration","type","getDataKeyY","strokeWidth","fillOpacity","Error","roundDownDateToDay","date","BlocksChart","blocksData","setDate","getDate","prevHeight","slice","map","numBlocks","toLocaleDateString","timeZone","k","Number","isInteger","propTypes","PropTypes","number","isRequired","object","withTheme","CanistersChart","canistersData","prevTotal","total","numCanisters","MessagesChart","messagesData","toLocaleTimeString","hour","minute","StyledAreaChart","RechartsAreaChart","PriceChart","priceData","dateToRfc3339","candle","timestamp","close","console","log","dataMin","dataMax","ceil","year","month","day","toISOString","split","replace","domain","getDomainMinY","getDomainMaxY","activeDot","r","GridSection","duration","standard","easing","easeInOut","GridSectionCharts2","GridCard","GridChart","CardBlocks","CardBlockTime","CardMessages","CardPrice","HomePage","getSectionCards","getSectionCharts","timeout","delay","getRandomInt","start","end","random","getRandomNumber","DfinitySymbolD3","dragStarted","dragged","dragEnded","rotate","stage","renderer","linksGraphics","simulationWidth","logoMode","simulationHeight","scaleSimulationToPixi","centerX","centerY","scaleToWindow","numSymbolNodes","numVertices","numNodes","forceManyBodyStrengthSymbolNodes","forceManyBodyStrengthNonSymbolNodes","linkDistance","nodeStrokeWidth","nodeRadius","nodeRadiusSelected","nodeSelectedFillColorArray","nodeSelectedStrokeColorArray","nodeOpacity","nodeOpacitySelected","linkStrokeWidth","linkStrokeWidthIncreaseAtMagnitude","symbolHeightMultiplier","rotateOffset","rotateTimeMs","rotateAmount","selectedNodeIndex","newBlockNodeStartTime","newBlockLinksStartTime","newBlockNodeTimerMs","newBlockLinksTimerMs","draw","destroy","pixiResizeRenderer","nodesData","forEach","node","pixiDrawNode","ref","el","element","addNodes","addLinks","createSimulation","pixiSetup","i","pos","getNodePosition","push","index","t","PI","scale","cos","sin","linksData","indexSymbol","indexSymbolNext","addLink","vertexShapeTop","indexShapeTop","indexShapeTopNext","indexShapeAlmostTop","j","indexShapeNext","indexSpiralNext","indexSource","indexTarget","strength","opacity","toString","linkCount","simulation","d3","force","link_force","_strength","min","source","target","distance","on","alphaDecay","PIXI","skipHello","antialias","transparent","resolution","autoResize","appendChild","view","graphics","addChild","call","subject","find","x","y","resize","position","nodeStrokeColor","nodeFillColor","selectedNodeMagnitude","rgbNumberFromArray","gradientColor","getNodeStrokeColorArray","clear","lineStyle","beginFill","filters","drawCircle","link","linkMagnitude","linkOpacity","alpha","getColorArray","moveTo","lineTo","numIndices","purple","pink","darkOrange","lightOrange","blue","transitionIndicesSmall","transitionIndicesGradual","lastPurpleIndex","lastPinkIndex","lastDarkOrangeIndex","lastLightOrangeIndex","lastBlueIndex","percentage","color1","color2","percent","p1","p2","round","array","active","alphaTarget","restart","fx","fy","_fx","_fy","pixiMoveNode","elapsedMs","pixiDrawLink","endFill","render","elapsed","ImageLinkGrid","widths","maxHeight","calculateMaxImageDimensions","arePropsChanged","imageLinks","imageLink","src","justifyRow","marginBetweenRows","perRow","containerHeight","imageLinkGrid","maxWidthColumn","Array","row","isShortRow","rowIndex","key","marginTop","columnIndex","href","rel","alt","img","Image","onload","event","currentTarget","naturalWidth","naturalHeight","prevState","PaperParallax","GridParallax","TypographyParallax","GridSectionPrimary","GridSectionSecondary","GridItem","GridImageLeft","GridImageRight","GridSymbolLeft","GridText","GridTextLeft","GridTextRight","TypographyHeading","TypographyBody","StyledA","a","ImgSection","SpanHeart","span","PaperTwitter","ImageLinkGridThanks","AboutPage","getHeader","getSectionMission","getSectionOpenSource","getSectionCommunity","getSectionContributors","getSectionThanks","bgImage","bannerXHorizon","bgImageAlt","bgImageStyle","isThemeDark","getDfinitySymbolD3Width","dfinityExplorerLogo","sourceType","screenName","options","noFooter","githubOctocat","imagesPerRow","reactHeight","styledComponentsHeight","materialUiHeight","nomicsHeight","dfinityHeight","reactLogo","styledComponentsLogoDark","styledComponentsLogoLight","materialUiLogo","nomicsLogoDark","nomicsLogoLight","dfinityLogoDark","dfinityLogoLight","contentWidth","innerWidth","bool","StyledAppBar","AppBar","zIndex","drawer","StyledToolbar","Toolbar","ImgProductIcon","TypographyAppName","TypographyDfinity","TypographyBorder","div","TypographyExplorer","StyledIconButton","IconButton","fade","StyledMenuIcon","MenuIcon","StyledSwipeableDrawer","other","SwipeableDrawer","classes","paper","StyledDrawer","Drawer","StyledDivider","Divider","DrawerListItemIcon","ListItemIcon","DrawerListItemText","ListItemText","primary","DrawerListItem","ListItem","selected","DEAppBar","toolbarDivRef","React","createRef","isActiveRoute","in","mountOnEnter","unmountOnExit","getToolbarDefaultContent","getDrawer","handleAppBarResize","current","offsetHeight","isMobileDrawerOpen","handleMobileDrawerMenuClick","getMenuButton","getAppTitle","handleDesktopDrawerMenuClick","Zoom","onClick","textDecoration","to","getProductIconHeight","BREAKPOINT_MAX_XL","isBreakpointLessOrEqualTo","variant","open","getDrawerContent","onOpen","onClose","List","button","component","Link","routeName","func","routerRef","withRouter","FooterToolbar","OneThirdGrid","LeftThirdGrid","RightThirdGrid","FooterTypography","FooterA","AwesomeIconButtonGrid","AwesomeIconButton","AwesomeIcon","Icon","ThemeCheckbox","Checkbox","ThemeSvgIcon","Footer","loadCSS","document","querySelector","getCopyrightText","getNomicsText","checked","icon","checkedIcon","onChange","handleThemeChange","initialize","anonymizeIp","ContentDiv","enteringScreen","leavingScreen","ContentGrid","appbarheight","App","appBarHeight","isDesktopDrawerEnabled","setRouterRef","getTheme","onTransitionEnd","dispatchEvent","Event","exact","path","contentRect","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e6b75e21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner-x-horizon.78a73653.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-explorer-logo-large.6854aee0.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-logo-dark-mode.03f02872.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-logo-light-mode.5a960076.png\";","module.exports = __webpack_public_path__ + \"static/media/github-octocat.c833384a.png\";","module.exports = __webpack_public_path__ + \"static/media/material-ui-logo.1d6a085f.png\";","module.exports = __webpack_public_path__ + \"static/media/nomics-logo-dark-mode.a32c7cc9.png\";","module.exports = __webpack_public_path__ + \"static/media/nomics-logo-light-mode.6f5390ee.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-text.24432c06.png\";","module.exports = __webpack_public_path__ + \"static/media/styled-components-logo-dark-mode.3b3add6f.png\";","module.exports = __webpack_public_path__ + \"static/media/styled-components-logo-light-mode.33f922e4.png\";","module.exports = __webpack_public_path__ + \"static/media/dfinity-explorer-logo.52c54b15.png\";","/**\n * @file constants\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nconst Constants = Object.freeze({\n  URI_CDN_FONT_AWESOME:\n    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css',\n  // Remove any fonts that aren't used!!!\n  URI_CDN_GOOGLE_FONTS:\n    'https://fonts.googleapis.com/css?family=Istok+Web:400|Muli:200,300,400,500',\n  URI_ABOUT_DFINITY: 'https://dfinity.org/',\n  URI_ABOUT_NOMICS: 'https://nomics.com/',\n  URI_ABOUT_MATERIAL_UI: 'https://material-ui.com/',\n  URI_ABOUT_REACT: 'https://reactjs.org/',\n  URI_ABOUT_STYLED_COMPONENTS: 'https://www.styled-components.com/',\n  URI_GITHUB_CONTRIBUTORS: 'https://github.com/orgs/dfinityexplorer/people',\n  URI_GITHUB_DFINITY_EXPLORER_PROJECT: 'https://github.com/dfinityexplorer/dfinityexplorer-dashboard',\n  URI_GITHUB_DYLAN: 'https://github.com/dylancm4',\n  URI_GITHUB_MIT_LICENSE: 'https://github.com/dfinityexplorer/dfinityexplorer/blob/master/LICENSE',\n  URI_GITHUB_TODD: 'https://github.com/toddkitchens',\n  URI_NASA_EXPLORER: 'https://nssdc.gsfc.nasa.gov/multi/explorer.html',\n  URI_TWITTER_DFINITY_EXPLORER: 'https://twitter.com/dfinityexplorer',\n  // Remove colors that are not used!!!\n  COLOR_DFINITY_BLACK: 'rgb(41, 42, 46)', // from dfinity.org/press\n  COLOR_DFINITY_BLACK_LIGHTER: 'rgb(73, 75, 82)', //  COLOR_DFINITY_BLACK scaled lighter\n  COLOR_DFINITY_BLACK_DARKER: 'rgb(27, 28, 31)', // COLOR_DFINITY_BLACK scaled darker\n  COLOR_DFINITY_LIGHT_ORANGE: 'rgb(251, 176, 59)', // from dfinity.org style guide\n  COLOR_DFINITY_DARK_ORANGE: 'rgb(241, 90, 36)', // from dfinity.org style guide\n  COLOR_DFINITY_BLUE_400: '#29ABE2', // DFINITY logo blue\n  COLOR_DFINITY_BLUE_500: '#009DDD',\n  COLOR_DFINITY_BLUE_600: '#0090CF',\n  COLOR_DFINITY_BLUE_700: '#007DBC',\n  COLOR_DFINITY_BLUE_800: '#006DA8',\n  COLOR_DFINITY_BLUE_900: '#004E88',\n  COLOR_TEXT_LIGHT: '#FFFFFF', // This should be removed, replaced with COLOR_DARK_TEXT!!!\n  COLOR_DARK_TEXT: '#FFFFFF',\n  COLOR_DARK_TEXT_FADED: 'rgb(190, 191, 192)', // rgba(255, 255, 255, 0.7) on COLOR_DFINITY_BLACK, matches Material-UI Tab opacity\n  COLOR_TEXT_DARKER: 'rgb(148, 149, 151)', // rgba(255, 255, 255, 0.5) on COLOR_DFINITY_BLACK\n  COLOR_TEXT_DARKEST: 'rgb(106, 106, 109)', // rgba(255, 255, 255, 0.3) on COLOR_DFINITY_BLACK\n  COLOR_LIGHT_TEXT_FADED: 'rgb(77, 77, 77)', // rgba(0, 0, 0, 0.7) on white, matches Material-UI Tab opacity\n  COLOR_DARK_BODY_DARKER_MAC_OS: '#1B1B1B', // Calendar, Finder, iTunes, Messages\n  COLOR_DARK_BODY_LIGHTER_MAC_OS: '#262626', // Finder\n  COLOR_DARK_DRAWER_DIVIDER_MAC_OS: '#4B4B4B', // Calendar, Messages\n  COLOR_DARK_DRAWER_DIVIDER_YOUTUBE: '#333333',\n  COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX: '#808080',\n  COLOR_DARK_TEXT_MAC_OS: '#DCDCDC', // Calendar, iTunes\n  COLOR_LIGHT_BODY_TEXT_GOOGLE: '#202124', // About, Account, News, Gmail, Contacts, Docs, Keep, Material\n  COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE: '#5F6368', // About, Account, Contacts, Docs, Drive, Gmail, Material\n  COLOR_LIGHT_CHART_GOOGLE: '#9E9E9E', // Analytics, Firebase\n  COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE: '#E3E3E3', // Docs, Sheets\n  COLOR_LIGHT_DRAWER_ICON_GOOGLE: '#5F6368', // Account, Docs, Drive, Calendar, Keep, Photos, Sheets\n  COLOR_LIGHT_DRAWER_TEXT_GOOGLE: '#3C4043', // Account, Docs, Calendar, News, Photos, Sheets\n  COLOR_TWITTER_BLUE: 'rgb(100, 164, 224)',\n  COLOR_TWITTER_GREEN: 'rgb(131, 175, 97)',\n  COLOR_TWITTER_ORANGE: 'rgb(244, 174, 78)',\n  COLOR_TWITTER_PURPLE: 'rgb(165, 144, 211)',\n  COLOR_GRAY_ON_WHITE: 'rgb(235, 235, 235)', // matches Material-UI IconButton hover\n  FONT_PRIMARY: '\\'Muli\\', sans-serif',\n  MATERIAL_FONT_SIZE_H1: '6rem', // 96px\n  MATERIAL_FONT_SIZE_H2: '3.75rem', // 60px\n  MATERIAL_FONT_SIZE_H3: '3rem', // 48px\n  MATERIAL_FONT_SIZE_H4: '2.125rem', // 34px\n  MATERIAL_FONT_SIZE_H5: '1.5rem', // 24px\n  MATERIAL_FONT_SIZE_H6: '1.25rem', // 20px\n  MATERIAL_FONT_SIZE_SUBTITLE_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_SUBTITLE_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BODY_1: '1rem', // 16px\n  MATERIAL_FONT_SIZE_BODY_2: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_BUTTON: '0.875rem', // 14px\n  MATERIAL_FONT_SIZE_CAPTION: '0.75rem', // 12px\n  MATERIAL_FONT_SIZE_OVERLINE: '0.625rem', // 10px\n  MATERIAL_CIRCULAR_INDICATOR_SIZE: 48,\n  MATERIAL_UI_ICON_BUTTON_FONT_SIZE: 24,\n  FONT_SIZE_TABLE_XS: '0.6875rem', // 11px\n  BREAKPOINT_MIN_XS: 0,\n  BREAKPOINT_MAX_XS: 599,\n  BREAKPOINT_MIN_SM: 600,\n  BREAKPOINT_MAX_SM: 959,\n  BREAKPOINT_MIN_MD: 960,\n  BREAKPOINT_MAX_MD: 1279,\n  BREAKPOINT_MIN_LG: 1280,\n  BREAKPOINT_MAX_LG: 1919,\n  BREAKPOINT_MIN_XL: 1920,\n  BREAKPOINT_LG_MAX_WIDTH: 1140, // from Bootstrap\n  DRAWER_WIDTH: 256,\n  FOOTER_HEIGHT: 96,\n  FOOTER_MARGIN_XS: 8,\n  FOOTER_MARGIN_SM_AND_UP: 32,\n  ICON_SVG_PATH_MPS: 'M16 8V4l8 8-8 8v-4h-5V8h5zM9 8H7v8h2V8zM4.986 8H3v8h1.986V8zM1 8H0v8h1V8z',\n  ICON_SVG_PATH_BLOCK: 'M12 0L1 6v12.131L12 24l11-5.869V6.065L12 0zm7.91 6.646l-7.905 4.218L4.133 6.57l7.862-4.289 7.915 4.365zM3 8.23l8 4.363V21.2l-8-4.268V8.23zM13 21.2v-8.6l8-4.269v8.6L13 21.2z',\n  ICON_SVG_PATH_PRICE: 'M19 16.166c0-4.289-4.465-5.483-7.887-7.091-2.079-1.079-1.816-3.658 1.162-3.832 1.652-.1 3.351.39 4.886.929l.724-3.295c-1.814-.551-3.437-.803-4.885-.841V0h-2v2.134c-3.89.535-5.968 2.975-5.968 5.7 0 4.876 5.693 5.62 7.556 6.487 2.54 1.136 2.07 3.5-.229 4.021-1.993.451-4.538-.337-6.45-1.079L5 20.551c1.787.923 3.931 1.417 6 1.453V24h2v-2.105c3.313-.464 6.005-2.293 6-5.729z',\n  ICON_SVG_PATH_BLOCK_TIME: 'M13 12l-.688-4h-.609L11 12a1.99 1.99 0 0 0-1 1.723 2 2 0 0 0 4 0A1.99 1.99 0 0 0 13 12zm-1-8C6.478 4 2 8.477 2 14s4.478 10 10 10 10-4.477 10-10S17.522 4 12 4zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8zM10 2.181V0h4v2.181c-1.438-.243-2.592-.238-4 0zm9.179 2.226L20.586 3 22 4.414l-1.321 1.321a12.134 12.134 0 0 0-1.5-1.328z',\n  ICON_SVG_PATH_THEME_LIGHT: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88zm3.584-8.047a10.7 10.7 0 0 1 4.723-3.41l.027-.01a10.433 10.433 0 0 0-1.752 7.118 10.444 10.444 0 0 0 3.912 7.033 10.448 10.448 0 0 0 10.135 1.64c.196-.072.39-.15.583-.232A10.697 10.697 0 0 1 15.975 22 10.665 10.665 0 0 1 5.63 20.327a10.656 10.656 0 0 1-3.99-7.174A10.653 10.653 0 0 1 3.89 5.259z',\n  ICON_SVG_PATH_THEME_DARK: 'M.307 13.306a11.99 11.99 0 0 0 4.489 8.072 11.999 11.999 0 0 0 11.637 1.883 12.038 12.038 0 0 0 5.316-3.839 12.04 12.04 0 0 0 1.895-3.402.67.67 0 0 0-1.018-.775 9.122 9.122 0 0 1-2.15 1.124 9.114 9.114 0 0 1-8.842-1.43 9.11 9.11 0 0 1-3.412-6.136 9.11 9.11 0 0 1 1.926-6.751c.245-.308.52-.61.818-.9a.67.67 0 0 0-.572-1.144A12.044 12.044 0 0 0 2.84 4.425a11.987 11.987 0 0 0-2.533 8.88z',\n  ABOUT_PAGE_MARGIN_XS: 8,\n  ABOUT_PAGE_MARGIN_SM: 48,\n  ABOUT_PAGE_MARGIN_MD: 64,\n  ABOUT_PAGE_MARGIN_LG: 128,\n  HOME_PAGE_MARGIN_XS: 8,\n  HOME_PAGE_MARGIN_SM_AND_UP: 32,\n  ABOUT_PAGE_PROJECT_ICONS_HEIGHT: 55,\n  GOOGLE_ANALYTICS_TRACKING_ID: 'UA-138212575-1',\n  BLOCKS_CARD_POLL_INTERVAL_MS: 3000,\n  BLOCK_TIME_POLL_INTERVAL_MS: 3000, // Changed from 10000 for the BlockTimeCard \"No Historical Blocks\" fix!!!\n  MESSAGES_TIME_POLL_INTERVAL_MS: 30000,\n  PRICE_POLL_INTERVAL_MS: 30000,\n  IC_RELEASE: 'sodium',\n  NOMICS_API_KEY: '38f4023ce681a328edc018f7a8a28e06'\n});\n\nexport default Constants;\n","/**\n * @file globalStyle\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { createGlobalStyle } from 'styled-components';\nimport Constants from '../constants';\n\n/**\n * StyledComponent that handles global styles.\n */\nexport const GlobalStyle = createGlobalStyle`\n   body {\n    margin: 0;\n    padding: 0;\n    background: ${props => props.theme.colorBodyBackground};\n   }\n`;\n\n/**\n * The styled-components ThemeProvider light theme.\n */\nexport const themeLight = {\n  // Should use constants for all!!!\n  isDark: false,\n  colorAboutBackgroundPrimary: '#FFFFFF',\n  colorAboutBackgroundSecondary: '#F8F9FA', // Google Analytics (verified), Wikipedia (verified)\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: '#FFFFFF',\n  colorAppBarBackground: '#FFFFFF',\n  colorAppBarTextButton: Constants.COLOR_LIGHT_TEXT_FADED, // (#4D4D4D)\n  colorAppBarDfinityText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyBackground: '#F8F9FA', // Wikipedia (verified)\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorBodyTextDim: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_700,\n  colorDashCardBackground: '#FFFFFF',\n  colorDashCardIcon: [Constants.COLOR_DFINITY_BLUE_700, '#9440A6', '#DA005E', '#F79308'], // Ori's purple and orange\n  colorDashCardIconOpacity: 1.0,\n  colorDrawerBackground: '#FFFFFF',\n  colorDrawerDivider: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorDrawerIcon: Constants.COLOR_LIGHT_DRAWER_ICON_GOOGLE,\n  colorDrawerIconTextSelected: Constants.COLOR_DFINITY_BLUE_700,\n  colorDrawerText: Constants.COLOR_LIGHT_DRAWER_TEXT_GOOGLE,\n  colorChartBackground: '#FFFFFF',\n  colorChartTooltipBackground: 'rgba(255, 255, 255, 0.96)',\n  colorChartAxes: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartGrid: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorChartText: Constants.COLOR_LIGHT_BODY_TEXT_DIM_GOOGLE,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_700,\n  colorChartActiveDotStroke: '#FFFFFF',\n  colorIconButtonHover: '#000000',\n  colorTableBackgroundPrimary: '#FFFFFF',\n  colorTableRowBorder: Constants.COLOR_LIGHT_DRAWER_DIVIDER_GOOGLE,\n  colorTableTextDim: '#909090', // YouTube, footer text dim (verified)\n  colorFooterBackground: '#F5F5F5',\n  colorFooterTextIcon: '#909090', // YouTube (verified)\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon(verified)\n  opacityActionDisabled: 0.26, // Material-UI createPalette.js theme.palette.action.disabled light theme\n  opacityActionHover: 0.08 // Material-UI createPalette.js theme.palette.action.hoverOpacity light theme\n}\n\n/**\n * The styled-components ThemeProvider dark theme.\n */\nexport const themeDark = {\n  isDark: true,\n  colorAboutBackgroundPrimary: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorAboutBackgroundSecondary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAboutHeaderText: '#FFFFFF',\n  colorAboutTwitterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorAppBarTextButton: Constants.COLOR_DARK_TEXT_FADED,\n  colorAppBarDfinityText: Constants.COLOR_DARK_TEXT,\n  colorAppBarExplorerText: Constants.COLOR_DFINITY_LIGHT_ORANGE,\n  colorBodyBackground: Constants.COLOR_DARK_BODY_DARKER_MAC_OS,\n  colorBodyButtonBackground: Constants.COLOR_DFINITY_BLUE_700,\n  colorBodyButtonText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyButtonHoverBackground: Constants.COLOR_DFINITY_BLUE_500,\n  colorBodyButtonHoverText: Constants.COLOR_TEXT_LIGHT,\n  colorBodyText: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextDim: Constants.COLOR_DARK_TEXT_MAC_OS,\n  colorBodyTextLink: Constants.COLOR_DFINITY_BLUE_600,\n  colorDashCardBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDashCardIcon: ['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF'],\n  colorDashCardIconOpacity: 0.5,\n  colorDrawerBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorDrawerDivider: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorDrawerIcon: Constants.COLOR_DARK_TEXT_FADED,\n  colorDrawerIconTextSelected: '#FFFFFF',\n  colorDrawerText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorChartTooltipBackground: 'rgba(38, 38, 38, 0.96)',\n  colorChartAxes: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorChartGrid: Constants.COLOR_DARK_DRAWER_DIVIDER_MAC_OS,\n  colorChartText: Constants.COLOR_DARK_TEXT_FADED,\n  colorChartLine: Constants.COLOR_DFINITY_BLUE_600,\n  colorChartActiveDotStroke: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorIconButtonHover: Constants.COLOR_DARK_TEXT,\n  colorTableBackgroundPrimary: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorTableRowBorder: Constants.COLOR_DARK_DRAWER_DIVIDER_YOUTUBE,\n  colorTableTextDim: '#717171', // YouTube (Dark), footer text dim (verified)\n  colorFooterBackground: Constants.COLOR_DARK_BODY_LIGHTER_MAC_OS,\n  colorFooterTextIcon: Constants.COLOR_DARK_FOOTER_TEXT_ICON_NETFLIX,\n  colorSearchText: Constants.COLOR_LIGHT_BODY_TEXT_GOOGLE,\n  colorSearchIcon: '#9E9E9E', //  Material Design icon (verified)\n  opacityActionDisabled: 0.3, // Material-UI createPalette.js theme.palette.action.disabled dark theme\n  opacityActionHover: 0.1 // Material-UI createPalette.js theme.palette.action.hoverOpacity dark theme\n}\n","/**\n * @file ResponsiveComponent\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport { Component } from 'react';\nimport { throttle } from 'throttle-debounce';\n\n/**\n * Base class component which re-renders when the window is resized.\n */\nclass ResponsiveComponent extends Component {\n  /**\n   * Create a ResponsiveComponent object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    // Bind to make 'this' work in callbacks.\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n\n    // Throttle the calls to handleWindowResize() so that we're not constantly re-rendering.\n    this.throttledHandleWindowResize = throttle(200, true, this.handleWindowResize);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.throttledHandleWindowResize);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    this.forceUpdate();\n  }\n};\n\nexport default ResponsiveComponent;\n","/**\n * @file TrackablePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport ReactGA from 'react-ga';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\n\n/**\n * Base class component for a page which is trackable by react-ga.\n */\nclass TrackablePage extends ResponsiveComponent {\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Scroll to the top on every page change.\n    window.scrollTo(0, 0);\n\n    const pathName = this.props.location.pathname + this.props.location.search;\n    this.trackPage(pathName);\n}\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    const currentPathName = prevProps.location.pathname + prevProps.location.search;\n    const nextPathName = this.props.location.pathname + this.props.location.search;\n\n    if (currentPathName !== nextPathName)\n      this.trackPage(nextPathName);\n  }\n\n  /**\n   * Track the page using react-ga.\n   * @param {String} pathName The path name of the page.\n   * @private\n   */\n  trackPage(pathName) {\n    // Track production build, but not development build.\n    if (process.env.NODE_ENV === 'production') {\n      ReactGA.set({ page: pathName });\n      ReactGA.pageview(pathName);\n    }\n  }\n}\n\nexport default TrackablePage;\n","/**\n * @file DashCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport Constants from '../../constants';\n\nconst GridNoWrap = styled(Grid)`\n  && {\n    /* Setting min-width to 0px allows the Grid to narrow past the implied width of its children. */\n    min-width: 0px;\n  }\n`;\n\nconst SvgIconCard = styled(SvgIcon)`\n  && {\n    /* The combination of margin, padding, and font-size explicitly set the height of the card. */\n    margin: 30px;\n    font-size: 42px;\n    opacity: ${props => props.theme.colorDashCardIconOpacity};\n    color: ${props => props.theme.colorDashCardIcon[props.cardindex]};\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 300;\n    font-size: 14px;\n  }\n`;\n\nconst TypographyValue = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-weight: 200;\n    font-size: 28px;\n  }\n`;\n\n/**\n * This component displays a dashboard card.\n */\nclass DashCard extends Component { \n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * The d attribute of the SvgIcon path.\n     */\n    svgIconPath: PropTypes.string.isRequired,\n    /**\n     * Function to subscribe to receive new objects of the card using GraphQL.\n     */\n    subscribeToNewObjects: PropTypes.func,\n    /**\n     * The title string of the card.\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * The value string of the card.\n     */\n    value: PropTypes.string.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Subscribe to receive new objects of the card using GraphQL.\n    if (this.props.subscribeToNewObjects)\n      this.props.subscribeToNewObjects();\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let {\n      cardIndex,\n      className,\n      svgIconPath,\n      title,\n      value\n    } = this.props;\n\n    return (\n      <Paper className={className} elevation={1}>\n        <Grid container direction='row' justify='flex-start' alignItems='center' wrap='nowrap'>\n          <Grid item>\n            <SvgIconCard cardindex={cardIndex}>\n              <path d={svgIconPath} />\n            </SvgIconCard>\n          </Grid>\n          <GridNoWrap container direction='column' justify='center' alignItems='flex-start'>\n            {/* The usage of Grid elements here is required to get Typography noWrap to work. */}\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyTitle className={className} noWrap>\n                  {title}\n                </TypographyTitle>\n              </GridNoWrap>\n            </Grid>\n            <Grid container direction='row' justify='flex-start' alignItems='center'>\n              <GridNoWrap item>\n                <TypographyValue className={className} noWrap>\n                  {value}\n                </TypographyValue>\n              </GridNoWrap>\n            </Grid>\n          </GridNoWrap>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default DashCard;\n","/**\n * @file BlocksCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with the current block height retrieved from\n * dashboard.dfinity.network.\n */\n class BlocksCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlocksCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blockHeight: -1,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block height using intervals.\n    this.pollForBlockHeight();\n    this.interval = setInterval(\n      () => { this.pollForBlockHeight() },\n      Constants.BLOCKS_CARD_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blockHeight, error } = this.state;\n    \n    let blockHeightText;\n    if (error)\n      blockHeightText = 'Network error';\n    else if (blockHeight === -1)\n      blockHeightText = 'Loading...';\n    else\n      blockHeightText = blockHeight.toLocaleString();\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Blocks'\n        value={blockHeightText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK}\n      />\n    );\n  }\n\n  /**\n   * Update the block height.\n   * @private\n   */\n  pollForBlockHeight() {\n    // Get 10 minutes of minute data. If there is an API to get just the current block height, we\n    // should use it here.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 10);\n    const endDate = new Date();\n    const secondsInMinute = 60;\n    const url =\n      //IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInMinute}`;\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length >= 2) {\n          let { blockHeight } = this.state;\n          const values = res.data.data.result[0].values;\n          // Temporary workaround fix: Use second to last value, since dashboard.dfinity.network\n          // seems to have a bug where the last value isn't always reliable!!!\n          const lastValue = values[values.length-2];\n          const newBlockHeight = Math.floor(lastValue[1]);\n          if (newBlockHeight > blockHeight) {\n            this.setState({\n              blockHeight: newBlockHeight,\n              error: false\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\nexport default BlocksCard;\n","/**\n * @file BlockTimeCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with seconds per block retrieved from\n * dashboard.dfinity.network.\n */\nclass BlockTimeCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlockTimeCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.startBlockHeight = 0;\n    this.startDate = null;\n    this.lastBlockHeight = 0;\n\n    this.state = {\n      blocksPerSecond: -1,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the block time using intervals.\n    this.pollForBlockTime();\n    this.interval = setInterval(\n      () => { this.pollForBlockTime() },\n      Constants.BLOCK_TIME_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { blocksPerSecond, error } = this.state;\n    \n    let blockTimeText;\n    if (error)\n      blockTimeText = 'Network error';\n    else if (blocksPerSecond === -1)\n      blockTimeText = 'Loading...';\n    else\n      blockTimeText = blocksPerSecond.toFixed(1) + ' bps';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Avg Blocks'\n        value={blockTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_BLOCK_TIME}\n      />\n    );\n  }\n\n  /**\n   * Update the block time.\n   * \n   * This version was added for the \"No Historical Blocks\" fix!!! This function is basically a copy\n   * of pollForBlockHeight() in BlocksCard. This method of calculating the block time is intended to\n   * be temporary until we receive more reliable API data.\n   * @private\n   */\n  pollForBlockTime() {\n    // Get 10 minutes of minute data. If there is an API to get just the current block height, we\n    // should use it here.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 10);\n    const endDate = new Date();\n    const secondsInMinute = 60;\n    const url =\n      //IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInMinute}`;\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length >= 2) {\n          const values = res.data.data.result[0].values;\n          // Temporary workaround fix: Use second to last value, since dashboard.dfinity.network\n          // seems to have a bug where the last value isn't always reliable!!!\n          const lastValue = values[values.length-2];\n          const newBlockHeight = Math.floor(lastValue[1]);\n          if (newBlockHeight > this.lastBlockHeight) {\n            let blocksPerSecond;\n            if (this.startBlockHeight == 0)\n            {\n              this.startBlockHeight = newBlockHeight;\n              //console.log('this.startBlockHeight: ', this.startBlockHeight);//!!!\n              this.startDate = new Date();\n              blocksPerSecond = -1;\n            }\n            else\n            {\n              const numBlocks = newBlockHeight - this.startBlockHeight;\n              const endDate = new Date();\n              const seconds = (endDate.getTime() - this.startDate.getTime()) / 1000;\n              blocksPerSecond = numBlocks / seconds;\n              //console.log('newBlockHeight: ', newBlockHeight);//!!!\n              //console.log('numBlocks: ', numBlocks);//!!!\n              //console.log('seconds: ', seconds);//!!!\n              //console.log('blocksPerSecond: ', blocksPerSecond);//!!!\n            }\n            this.lastBlockHeight = newBlockHeight;\n            this.setState({\n              blocksPerSecond: blocksPerSecond,\n              error: false\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /** KEEP: This version was removed for the \"No Historical Blocks\" fix. It was difficult to get\n   * consistent results by looking at historical block heights. We can hopefully go back to this\n   * version later.\n   * \n   * Update the block time.\n   * @private\n   *\n  pollForBlockTime() {*/\n    /* KEEP for now\n    // Get one day of hourly data. Ideally, we would get 10 minutes of minute data, but\n    // dashboard.dfinity.network results are inconsistent with those settings.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 1);\n    const endDate = new Date();\n    const secondsInHour = 60 * 60;*//*\n    // Get 10 minutes of minute data. This is still sometimes glitchy, but we'll try it out\n    // temporarily.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 10);\n    const endDate = new Date();\n    const secondsInMinute = 60;\n    const url =\n      //IC_RELEASE: `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInMinute}`;\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInMinute}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length >= 2) {\n          const values = res.data.data.result[0].values;\n          const firstValue = values[0];\n          // Temporary workaround fix when using 10 minutes of minute data: Use second to last\n          // value, since dashboard.dfinity.network seems to have a bug where the last value isn't\n          // always reliable. Note >= 2 above as well, rather than >= 1.!!!\n          const lastValue = values[values.length-2];\n          const numBlocks = Math.max(Math.floor(lastValue[1] - firstValue[1]), 0);\n          const seconds = Math.max(lastValue[0] - firstValue[0], 1);\n          const blocksPerSecond = numBlocks / seconds;\n          if (blocksPerSecond > 0) { // ignore glitchy data from API\n            this.setState({\n              blocksPerSecond: blocksPerSecond,\n              error: false\n            });\n          }\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }*/\n}\n\nexport default BlockTimeCard;\n","/**\n * @file MessagesCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with messages per second retrieved from\n * dashboard.dfinity.network.\n */\nclass MessagesCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a BlockTimeCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesPerSecond: -1,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the messages time using intervals.\n    this.pollForMessagesTime();\n    this.interval = setInterval(\n      () => { this.pollForMessagesTime() },\n      Constants.MESSAGES_TIME_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { messagesPerSecond, error } = this.state;\n    \n    let messagesTimeText;\n    if (error)\n      messagesTimeText = 'Network error';\n    else if (messagesPerSecond === -1)\n      messagesTimeText = 'Loading...';\n    else\n      messagesTimeText = messagesPerSecond.toFixed(1) + ' mps';\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Avg Messages'\n        value={messagesTimeText}\n        svgIconPath={Constants.ICON_SVG_PATH_MPS}\n      />\n    );\n  }\n\n  /**\n   * Update the messages time.\n   * @private\n   */\n  pollForMessagesTime() {\n    // Get 6 hours of hourly data. Ideally, we would get 10 minutes of minute data, but\n    // dashboard.dfinity.network did not return any data with those settings. This seems\n    // like it was due to service down time.\n    const startDate = new Date();\n    startDate.setMinutes(startDate.getMinutes() - 360);\n    const endDate = new Date();\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(message_state_transition_completed_ic_duration_seconds_count%7Bic%3D%22${Constants.IC_RELEASE}%22%2C%20ic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.data.result.length && res.data.data.result[0].values.length) {\n          const values = res.data.data.result[0].values;\n          const firstValue = values[0];\n          const lastValue = values[values.length-1];\n          const numMessages = Math.max(Math.floor(lastValue[1] - firstValue[1]), 0);\n          const seconds = Math.max(lastValue[0] - firstValue[0], 1);\n          this.setState({\n            messagesPerSecond: numMessages / seconds,\n            error: false\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n}\n\nexport default MessagesCard;\n","/**\n * @file PriceCard\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport DashCard from '../DashCard/DashCard';\nimport Constants from '../../constants';\n\n/**\n * This component displays a dashboard card with price data retrieved from api.nomics.com.\n */\nclass PriceCard extends Component {\n  static propTypes = {\n    /**\n     * The index of the card. Used for theming.\n     */\n    cardIndex: PropTypes.number.isRequired,\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string\n  };\n\n  /**\n   * Create a PriceCard object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      price: 0,\n      error: false\n    };\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {    \n    // Update the price using intervals.\n    this.pollForPrice();\n    this.interval = setInterval(\n      () => { this.pollForPrice() },\n      Constants.PRICE_POLL_INTERVAL_MS);\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    let { cardIndex, className } = this.props;\n    let { price, error } = this.state;\n    \n    let priceText;\n    if (error)\n      priceText = 'Network error';\n    else if (price === 0)\n      priceText = 'Loading...';\n    else\n      priceText = '$' + price.toFixed(2);\n\n    return (\n      <DashCard\n        className={className}\n        cardIndex={cardIndex}\n        title='Price - ICP (IOU)'\n        value={priceText}\n        svgIconPath={Constants.ICON_SVG_PATH_PRICE}\n      />\n    );\n  }\n\n  /**\n   * Update the price.\n   * @private\n   */\n  pollForPrice() {\n    const url =\n      `https://api.nomics.com/v1/currencies/ticker?key=${Constants.NOMICS_API_KEY}&ids=ICP&interval=1d`;\n    axios.get(url)\n      .then(res => {\n        const price = parseFloat(res.data[0].price);\n        this.setState({\n          price: price,\n          error: false\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n        });\n      });\n  }\n}\n\nexport default PriceCard;\n","/**\n * @file breakpoint\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport Constants from '../constants';\n\nexport const Breakpoints = Object.freeze({\n  XS: 0,\n  SM: 1,\n  MD: 2,\n  LG: 3,\n  XL: 4\n});\n\n/**\n * Return the current breakpoint.\n * @param {Boolean} isDesktopDrawerOpen True if the desktop drawer (large screens) is open and\n *  caller wants the breakpoint to be calculated based on the non-drawer width of the window.\n * @return {Number} The current breakpoint.\n * @private\n */\nexport function getBreakpoint(isDesktopDrawerOpen) {\n  const drawerWidth =  isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0;\n  if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_XS + drawerWidth) + 'px)').matches)\n    return Breakpoints.XS;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_SM + drawerWidth) + 'px)').matches)\n    return Breakpoints.SM;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_MD  + drawerWidth) + 'px)').matches)\n    return Breakpoints.MD;\n  else if (window.matchMedia('(max-width: ' + (Constants.BREAKPOINT_MAX_LG + drawerWidth) + 'px)').matches)\n    return Breakpoints.LG;\n  else\n    return Breakpoints.XL;\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointGreaterOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(min-width: ' + Constants.BREAKPOINT_MIN_XL + 'px)').matches;\n  }\n}\n\n/**\n * Return true if the current breakpoint is greater than or equal to the smallest \"desktop\"\n * breakpoint.\n * @return {Boolean} True if the current breakpoint is greater than or equal to the smallest\n * \"desktop\" breakpoint.\n * @private\n */\nexport function isBreakpointDesktop() {\n  return isBreakpointGreaterOrEqualTo(Breakpoints.MD);\n}\n\n/**\n * Return true if the current breakpoint is less than or equal to the specified breakpoint.\n * @param {Number} breakpoint The breakpoint to compare to the current breakpoint.\n * @return {Boolean} True if the current breakpoint is less than or equal to the specified\n *  breakpoint.\n * @private\n */\nexport function isBreakpointLessOrEqualTo(breakpoint) {\n  switch (breakpoint) {\n    case Breakpoints.XS:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XS + 'px)').matches;\n    case Breakpoints.SM:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_SM + 'px)').matches;\n    case Breakpoints.MD:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_MD + 'px)').matches;\n    case Breakpoints.LG:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_LG + 'px)').matches;\n    case Breakpoints.XL:\n    default:\n      return window.matchMedia('(max-width: ' + Constants.BREAKPOINT_MAX_XL + 'px)').matches;\n  }\n}\n","/**\n * @file BarChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Bar,\n  BarChart as RechartsBarChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledBarChart = styled(RechartsBarChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements a bar chart component.\n */\nclass BarChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledBarChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{\n                  fill: 'transparent',\n                  stroke: theme.colorChartGrid\n                }}\n                animationDuration={300}\n              />\n              <Bar\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                animationDuration={1000}\n              />\n            </StyledBarChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('BarChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('BarChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('BarChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('BarChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('BarChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('BarChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('BarChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('BarChart.getGetTooltipY() not implemented.');\n  }\n}\n\nexport default BarChart;\n","/**\n * @file roundDownDateToDay\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Round down the specified Date object to the nearest day.\n * @param {Data} date The Date object to round down.\n * @return {Date} The rounded down Date object.\n * @protected\n*/\nexport default function roundDownDateToDay(date) {\n  const millisecondsInDay = 24 * 60 * 60 * 1000;\n  return new Date(Math.floor(date.getTime() / millisecondsInDay) * millisecondsInDay);\n}\n\n","/**\n * @file BlocksChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToDay from '../../utils/roundDownDateToDay';\n\n/**\n * This component displays a number of blocks chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass BlocksChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a BlocksChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocksData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a two weeks of daily data. Note that there is currently a bug in\n    // dashboard.dfinity.network where the last entry returned for this query is one day ago, not\n    // now.\n    const endDate = roundDownDateToDay(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 15);\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInDay}`;\n      //No IC_RELEASE (inconsistent results): `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(artifact_pool_consensus_height_stat%7Bic%3D~%22.%2B%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${Math.floor(startDate.getTime() / 1000)}&end=${Math.floor(endDate.getTime() / 1000)}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting block height.\n        let prevHeight = Math.floor(values[0][1]);\n        const blocksData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const height = Math.floor(value[1]);\n          const numBlocks = Math.max(height - prevHeight, 0);\n          prevHeight = height;\n          return {date: date.getTime(), numBlocks: numBlocks};\n        });\n        this.setState({\n          blocksData: blocksData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Blocks';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { blocksData } = this.state;\n    return blocksData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numBlocks';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Blocks: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(BlocksChart);\n","/**\n * @file CanistersChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToDay from '../../utils/roundDownDateToDay';\n\n/**\n * This component displays a number of canisters chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass CanistersChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a CanistersChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      canistersData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const endDate = roundDownDateToDay(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 15);\n    const secondsInDay = 24 * 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet%2C%20status)%20(replicated_state_registered_canisters%7Bic%3D%22${Constants.IC_RELEASE}%22%2Cic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInDay}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting number of canisters.\n        let prevTotal = Math.floor(values[0][1]);\n        const canistersData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numCanisters = Math.max(total - prevTotal, 0);\n          prevTotal = total;\n          return {date: date.getTime(), numCanisters: numCanisters};\n        });\n        this.setState({\n          canistersData: canistersData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Canisters';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { canistersData } = this.state;\n    return canistersData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numCanisters';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleDateString('default', { timeZone: 'UTC' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Canisters: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(CanistersChart);\n","/**\n * @file MessagesChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport BarChart from '../BarChart/BarChart';\nimport Constants from '../../constants';\nimport roundDownDateToHour from '../../utils/roundDownDateToHour';\n\n/**\n * This component displays a number of messages chart with data retrieved from\n * dashboard.dfinity.network.\n */\nclass MessagesChart extends BarChart { \n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n  \n  /**\n   * Create a MessagesChart object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messagesData: [],\n      error: false\n    };\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Get 24 hours of hourly data. Daily data does not currently work, because\n    // dashboard.dfinity.network returns glitchy data for some days within past week.\n    const endDate = roundDownDateToHour(new Date());\n    const startDate = new Date(endDate.getTime());\n    startDate.setDate(endDate.getDate() - 1);\n    const secondsInHour = 60 * 60;\n    const url =\n      `https://dashboard.dfinity.network/api/datasources/proxy/2/api/v1/query_range?query=sum%20(avg%20by%20(ic_subnet)%20(message_state_transition_completed_ic_duration_seconds_count%7Bic%3D%22${Constants.IC_RELEASE}%22%2C%20ic_subnet%3D~%22.%2B%22%7D))&start=${startDate.getTime() / 1000}&end=${endDate.getTime() / 1000}&step=${secondsInHour}`;\n    axios.get(url)\n      .then(res => {\n        let values = res.data.data.result[0].values;\n        // Use values[0] to get the starting number of messages.\n        let prevTotal = Math.floor(values[0][1]);\n        const messagesData = values.slice(1).map((value) => {\n          const date = new Date(value[0] * 1000);\n          const total = Math.floor(value[1]);\n          const numMessages = Math.max(total - prevTotal, 0);\n          prevTotal = total;\n          return {date: date.getTime(), numMessages: numMessages};\n        });\n        this.setState({\n          messagesData: messagesData\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Messages';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    const { messagesData } = this.state;\n    return messagesData;\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    return 'date';\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    return 'numMessages';\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    if (value >= 1000) {\n      const k = value / 1000;\n      return k.toFixed(Number.isInteger(k) ? 0 : 1) + 'k';\n    }\n    else\n      return value;\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    return new Date(value).toLocaleTimeString('default', { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    return `Messages: ${value.toLocaleString()}`;\n  }\n}\n\n// Use the withTheme HOC so that we can use the current theme outside styled components.\nexport default withTheme(MessagesChart);\n","/**\n * @file roundDownDateToHour\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n/**\n * Round down the specified Date object to the nearest hour.\n * @param {Data} date The Date object to round down.\n * @return {Date} The rounded down Date object.\n * @protected\n*/\nexport default function roundDownDateToHour(date) {\n  const millisecondsInHour = 60 * 60 * 1000;\n  return new Date(Math.floor(date.getTime() / millisecondsInHour) * millisecondsInHour);\n}\n\n","/**\n * @file AreaChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport shadows from '@material-ui/core/styles/shadows';\nimport {\n  Area,\n  AreaChart as RechartsAreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst StyledPaper = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorChartBackground};\n    padding-right: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nconst TypographyTitle = styled(Typography)`\n  && {\n    color: ${props => props.theme.colorBodyText};\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 15px;\n    text-align: left;\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n    font-weight: 300;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H6};\n      `\n    }\n  }\n`;\n\nconst StyledAreaChart = styled(RechartsAreaChart)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_CAPTION};\n    font-weight: 400;\n  }\n`;\n\n/**\n * Base class that implements an area chart component.\n */\nclass AreaChart extends Component {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * The height of the chart (not including the title).\n     */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n     * The styled-components theme.\n     */\n    theme: PropTypes.object.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const { breakpoint, chartHeight, theme } = this.props;\n    const data = this.getData();\n    const tooltipElevation = 2;\n    return (\n      <StyledPaper elevation={1}>\n        <TypographyTitle breakpoint={breakpoint}>{this.getTitle()}</TypographyTitle>\n        { data.length > 0 &&\n          <ResponsiveContainer width='100%' height={chartHeight}>\n            <StyledAreaChart\n              data={data}\n              margin={{ top: 0, right: 0, left: 4, bottom: 0 }}\n              // Setting width to 0 here is a workaround for a problem where ResponsiveContainer\n              // does not resize correctly from large to small.\n              // https://github.com/recharts/recharts/issues/172\n              style={{width: 0}}\n            >\n              <defs>\n                <linearGradient id='colorY' x1='0' y1='0' x2='0' y2='1'>\n                  <stop offset='5%' stopColor={theme.colorChartLine} stopOpacity={0.2}/>\n                  <stop offset='95%' stopColor={theme.colorChartLine} stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid\n                stroke={theme.colorChartGrid}\n                vertical={false}\n              />\n              <XAxis\n                dataKey={this.getDataKeyX()}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickX(tick)}\n                tickMargin={8}\n                tickSize={6}\n              />\n              <YAxis\n                domain={[\n                  dataMin => this.getDomainMinY(dataMin),\n                  dataMax => this.getDomainMaxY(dataMax)\n                ]}\n                stroke={theme.colorChartAxes}\n                tick={{ fill: theme.colorChartText }}\n                tickFormatter={(tick) => this.getGetTickY(tick)}\n                tickLine={false}\n              />\n              <Tooltip\n                labelFormatter={(value) => this.getGetTooltipX(value)}\n                formatter={(value) => [this.getGetTooltipY(value)]}\n                contentStyle={{\n                  background: theme.colorChartTooltipBackground,\n                  border: null,\n                  borderRadius: 4,\n                  fontSize: Constants.MATERIAL_FONT_SIZE_BODY_2,\n                  boxShadow: shadows[tooltipElevation]\n                }}\n                itemStyle={{ color: theme.colorChartLine }}\n                labelStyle={{ color: theme.colorBodyText }}\n                cursor={{ stroke: theme.colorChartGrid }}\n                animationDuration={300}\n              />\n              <Area\n                type='monotone'\n                dataKey={this.getDataKeyY()}\n                stroke={theme.colorChartLine}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill='url(#colorY)'\n                activeDot={{ stroke: theme.colorChartActiveDotStroke, r: 5 }}\n                animationDuration={1000}\n              />\n            </StyledAreaChart>\n          </ResponsiveContainer>\n        }\n      </StyledPaper>\n    );\n  }\n\n  /**\n   * Return the title of the chart.\n   * @return {String} The title of the chart.\n   * @protected\n   */\n  getTitle() {\n    throw new Error('AreaChart.getTitle() not implemented.');\n  }\n\n  /**\n   * Return an array of objects that describe the chart data.\n   * @return {Array} An array of objects that describe the chart data.\n   * @protected\n   */\n  getData() {\n    throw new Error('AreaChart.getData() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the x-axis.\n   * @return {String} The key of the data to be displayed in the x-axis.\n   * @protected\n   */\n  getDataKeyX() {\n    throw new Error('AreaChart.getDataKeyX() not implemented.');\n  }\n\n  /**\n   * Return the key of the data to be displayed in the y-axis.\n   * @return {String} The key of the data to be displayed in the y-axis.\n   * @protected\n   */\n  getDataKeyY() {\n    throw new Error('AreaChart.getDataKeyY() not implemented.');\n  }\n\n  /**\n   * Return the minimum value of the domain for the Y-axis.\n   * @param {dataMin} value The minumum value of the data.\n   * @return {String} The minimum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMinY(dataMin) {\n    throw new Error('AreaChart.getDomainMinY() not implemented.');\n  }\n\n  /**\n   * Return the maximum value of the domain for the Y-axis.\n   * @param {dataMax} value The maximum value of the data.\n   * @return {String} The maximum value of the domain for the Y-axis.\n   * @protected\n   */\n  getDomainMaxY(dataMax) {\n    throw new Error('AreaChart.getDomainMaxY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tick label.\n   * @protected\n   */\n  getGetTickX(value) {\n    throw new Error('AreaChart.getGetTickX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tick label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tick label.\n   * @protected\n   */\n  getGetTickY(value) {\n    throw new Error('AreaChart.getGetTickY() not implemented.');\n  }\n\n  /**\n   * Return a string for the x-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the x-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipX(value) {\n    throw new Error('AreaChart.getGetTooltipX() not implemented.');\n  }\n\n  /**\n   * Return a string for the y-axis tooltip label corresponding to the specified value.\n   * @param {Any} value The value of the data.\n   * @return {String} The string for the y-axis tooltip label.\n   * @protected\n   */\n  getGetTooltipY(value) {\n    throw new Error('AreaChart.getGetTooltipY() not implemented.');\n  }\n}\n\nexport default AreaChart;\n","/**\n * @file PriceChart\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport PropTypes from 'prop-types';\nimport { withTheme } from 'styled-components';\nimport axios from 'axios';\nimport AreaChart from '../AreaChart/AreaChart';\nimport Constants from '../../constants';\n \n/**\n * This component displays a chart of Candle objects with data retrieved from api.nomics.com.\n */\nclass PriceChart extends AreaChart {\n\n  static propTypes = {\n    /**\n    * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n    */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n    * The height of the chart (not including the title).\n    */\n    chartHeight: PropTypes.number.isRequired,\n    /**\n    * The styled-components theme.\n    */\n    theme: PropTypes.object.isRequired\n  };\n   \n  /**\n  * Create a PriceChart object.\n  * @constructor\n  */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      priceData: [],\n      error: false\n    };\n  }\n   \n  /**\n  * Invoked by React immediately after a component is mounted (inserted into the tree). \n  * @public\n  */\n  componentDidMount() {\n    // Get a two weeks of daily data.\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 14);\n    const url =\n      `https://api.nomics.com/v1/candles?key=${Constants.NOMICS_API_KEY}&interval=1h&currency=ICP&start=${this.dateToRfc3339(startDate)}`;\n    axios.get(url)\n      .then(res => {\n        if (res.data.length > 0) {\n          const priceData = res.data.map((candle) => {\n            const date = new Date(candle.timestamp);\n            const price = parseFloat(candle.close);\n            return {date: date.getTime(), price: price};\n          });\n          this.setState({\n            priceData: priceData\n          });\n        }\n        else\n          console.log(\"Exchange data not found.\");\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n      });\n  }\n \n  /**\n  * Return the title of the chart.\n  * @return {String} The title of the chart.\n  * @protected\n  */\n  getTitle() {\n    const { error } = this.state;\n    let title = 'Price - ICP (IOU)';\n    if (error)\n      title += ' - Network Error'\n    return title;\n  }\n \n  /**\n  * Return an array of objects that describe the chart data.\n  * @return {Array} An array of objects that describe the chart data.\n  * @protected\n  */\n  getData() {\n    const { priceData } = this.state;\n    return priceData;\n  }\n \n  /**\n  * Return the key of the data to be displayed in the x-axis.\n  * @return {String} The key of the data to be displayed in the x-axis.\n  * @protected\n  */\n  getDataKeyX() {\n    return 'date';\n  }\n \n  /**\n  * Return the key of the data to be displayed in the y-axis.\n  * @return {String} The key of the data to be displayed in the y-axis.\n  * @protected\n  */\n  getDataKeyY() {\n    return 'price';\n  }\n \n  /**\n  * Return the minimum value of the domain for the Y-axis.\n  * @param {dataMin} value The minumum value of the data.\n  * @return {String} The minimum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMinY(dataMin) {\n    return Math.floor(dataMin);\n  }\n\n  /**\n  * Return the maximum value of the domain for the Y-axis.\n  * @param {dataMax} value The maximum value of the data.\n  * @return {String} The maximum value of the domain for the Y-axis.\n  * @protected\n  */\n  getDomainMaxY(dataMax) {\n    return Math.ceil(dataMax);\n  }\n \n  /**\n  * Return a string for the x-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tick label.\n  * @protected\n  */\n  getGetTickX(value) {\n    return new Date(value).toLocaleDateString('default');\n  }\n\n  /**\n  * Return a string for the y-axis tick label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tick label.\n  * @protected\n  */\n  getGetTickY(value) {\n    return `$${value.toFixed(2)}`;\n  }\n \n  /**\n  * Return a string for the x-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the x-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipX(value) {\n    // Display date/time with no seconds.\n    return new Date(value).toLocaleString(\n      'default',\n      {year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute:'2-digit'});\n  }\n\n  /**\n  * Return a string for the y-axis tooltip label corresponding to the specified value.\n  * @param {Any} value The value of the data.\n  * @return {String} The string for the y-axis tooltip label.\n  * @protected\n  */\n  getGetTooltipY(value) {\n    return `ICP (IOU): $${value.toFixed(2)}`;\n  }\n\n  /**\n   * Return a string for the date in RFC 3339 (URI escaped) format.\n   * @param {Object} date The date to create the string for.\n   * @return {String} A string for the date in RFC 3339 (URI escaped) format.\n   * @private\n   */\n  dateToRfc3339(date) {\n    // Use toISOString(), removing the fraction of seconds (i.e, after decimal point).\n    const isoNoFraction = date.toISOString().split('.')[0] + 'Z'\n\n    // Escape all ':' characters.\n    return isoNoFraction.replace(/:/g, '%3A');\n  }\n}\n \n // Use the withTheme HOC so that we can use the current theme outside styled components.\n export default withTheme(PriceChart);\n","/**\n * @file HomePage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport Fade from 'react-reveal/Fade';\nimport TrackablePage from '../TrackablePage/TrackablePage'\nimport BlocksCard from '../BlocksCard/BlocksCard';\nimport BlockTimeCard from '../BlockTimeCard/BlockTimeCard';\nimport MessagesCard from '../MessagesCard/MessagesCard';\nimport PriceCard from '../PriceCard/PriceCard';\nimport BlocksChart from '../BlocksChart/BlocksChart';\nimport CanistersChart from '../CanistersChart/CanistersChart';\nimport MessagesChart from '../MessagesChart/MessagesChart';\nimport PriceChart from '../PriceChart/PriceChart';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport { Fragment } from \"react\";\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-left: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    padding-right: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst GridSectionCharts2 = styled(GridSection)`\n  && {\n    padding-bottom: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n  }\n`;\n\nconst GridCard = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(25% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP*3/4 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.MD || breakpoint === Breakpoints.SM) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: ${Constants.HOME_PAGE_MARGIN_XS + 'px'};\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridChart = styled(Grid)`\n  && {\n    padding-top: ${Constants.HOME_PAGE_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG || breakpoint === Breakpoints.MD) && `\n        width: calc(50% - ${Constants.HOME_PAGE_MARGIN_SM_AND_UP/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst CardBlocks = styled(BlocksCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardBlockTime = styled(BlockTimeCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardMessages = styled(MessagesCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\nconst CardPrice = styled(PriceCard)`\n  && {\n    background: ${props => props.theme.colorDashCardBackground};\n    color: ${props => props.theme.colorBodyText};\n  }\n`;\n\n/**\n * Component for the home page.\n */\nclass HomePage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getSectionCards()}\n        {this.getSectionCharts()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the Cards section based on the current breakpoint.\n   * @return {Object} The elements for the Cards section based on the current breakpoint.\n   * @private\n   */\n  getSectionCards()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSection container\n        direction='row'\n        justify='space-between'\n        alignItems='flex-start'\n        breakpoint={breakpoint}\n      >\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            timeout={500}\n          >\n            <CardBlocks cardIndex={0} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={50}\n            timeout={500}\n          >\n            <CardBlockTime cardIndex={1} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={100}\n            timeout={500}\n          >\n            <CardMessages cardIndex={2} />\n          </Fade>\n        </GridCard>\n        <GridCard item breakpoint={breakpoint}>\n          <Fade\n            delay={150}\n            timeout={500}\n          >\n            <CardPrice cardIndex={3} />\n          </Fade>\n        </GridCard>\n      </GridSection>\n    );\n  }\n\n  /**\n   * Return the elements for the Charts section based on the current breakpoint.\n   * @return {Object} The elements for the Charts section based on the current breakpoint.\n   * @private\n   */\n  getSectionCharts()\n  {\n    const { breakpoint } = this.props;\n\n    const chartHeight = 352;\n    return (\n      <Fragment>\n        <GridSection container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <BlocksChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <PriceChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSection>\n        <GridSectionCharts2 container\n          direction='row'\n          justify='space-between'\n          alignItems='flex-start'\n          breakpoint={breakpoint}\n        >\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              timeout={500}\n            >\n              <CanistersChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n          <GridChart item breakpoint={breakpoint}>\n            <Fade\n              delay={50}\n              timeout={500}\n            >\n              <MessagesChart chartHeight={chartHeight} breakpoint={breakpoint} />\n            </Fade>\n          </GridChart>\n        </GridSectionCharts2>\n      </Fragment>\n    );\n  }\n}\n\nexport default HomePage;\n","/**\n * @file getRandomInt\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\nimport getRandomNumber from './getRandomNumber'\n\n/**\n * Return a random integer between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random integer.\n * @private\n */\nexport default function getRandomInt(start, end) {\n  return Math.floor(getRandomNumber(start, end));\n}\n","/**\n * @file getRandomNumber\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\n /**\n * Return a random number between start and end.\n * @param {Number} start The starting number.\n * @param {Number} end The ending number.\n * @return {Number} The random number.\n * @private\n */\nexport default function getRandomNumber(start, end) {\n  return Math.random() * (end - start) + start;\n}\n","/**\n * @file DfinitySymbolD3\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport * as PIXI from 'pixi.js';\nimport * as filters from 'pixi-filters';\nimport getRandomInt from '../../utils/getRandomInt';\n\n/**\n * This class draws the DFINITY logo infinity symbol using a d3 force-directed graph.\n */\nclass DfinitySymbolD3 extends Component  {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * True for logo mode, where the symbol is shaped more like the DFINITY logo, and various\n     * adjustments are made with the intention of rendering at small sizes (e.g., in an app bar).\n     */\n    logoMode: PropTypes.bool,\n    /**\n     * The width of the component, or 0 for use built-in simulationWidth.\n     */\n    width: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a DfinitySymbolD3 object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    // Bind to make 'this' work in callbacks.\n    this.dragStarted = this.dragStarted.bind(this);\n    this.dragged = this.dragged.bind(this);\n    this.dragEnded = this.dragEnded.bind(this);\n    this.tick = this.tick.bind(this);\n    this.rotate = this.rotate.bind(this);\n\n    // A force-directed graph can be a difficult beast to tame. Most changes to settings in this\n    // class will likely change the shape of the graph and require changing other settings through\n    // trial and error in order to get the graph back to the DFINITY logo shape. Any number of the\n    // settings below could be made into constructor parameters. Another idea would be to pre-define\n    // different groups of settings that produce a shape which approximates the DFINITY logo\n    // shape, and then allow the caller to specify which group of settings to use. Since there is\n    // currently only one group of settings defined, settings groups would not currently be useful.\n\n    // PixiJS members.\n    this.stage = null;\n    this.renderer = null;\n    this.linksGraphics = null;\n\n    // Code is customized for this window size. Modifying these values will cause the d3 force-\n    // directed graph to change shape unless scaleToWindow is adjusted to keep the object the same\n    // size.\n    this.simulationWidth = this.props.logoMode ? 780 : 800;\n    this.simulationHeight = 400;\n    this.scaleSimulationToPixi = 1.0;\n\n    this.centerX = this.simulationWidth / 2;\n    this.centerY = this.simulationHeight / 2;\n    this.scaleToWindow = this.simulationWidth / 2 * 0.8;\n\n    // Specify the number of symbol nodes and the number of vertices for each symbol node. The\n    // current values of 36 symbol nodes and 8 vertices (octagon) was arrived at after trial and\n    // error to produce a shape which resembles the DFINITY logo.\n    this.numSymbolNodes = this.props.logoMode ? 41 : 36;\n    this.numVertices = this.props.logoMode ? 10 : 8;\n    this.numNodes = this.numSymbolNodes * this.numVertices;\n\n    // Specify the charge of the symbol nodes and the non-symbol nodes. \"A positive value causes\n    // nodes to attract each other, similar to gravity, while a negative value causes nodes to\n    // repel each other, similar to electrostatic charge.\" The default value is -30, but we specify\n    // much lower in magnitude values because we do not want the nodes to repel very much. For the\n    // fixed nodes which draw the infinity symbol, we do not want any force at all.\n    this.forceManyBodyStrengthSymbolNodes = 0;\n    this.forceManyBodyStrengthNonSymbolNodes = this.props.logoMode ? -3.75 : -9;\n\n    // Specify the link distance. \"The link force pushes linked nodes together or apart according to\n    // the desired link distance.\" The default value is 30.\n    this.linkDistance = this.props.logoMode ? 19 : 14;\n\n    // Specify node and link drawing properties.\n    this.nodeStrokeWidth = 1;\n    this.nodeRadius = 4.5;\n    this.nodeRadiusSelected = this.props.logoMode ? 11 : 5.5;\n    // DCM 01.mar.2019: Always use same node fill color as stroke color.\n    //this.nodeFillColorArray = [127, 127, 127];\n    this.nodeSelectedFillColorArray = [255, 255, 255];\n    this.nodeSelectedStrokeColorArray = [255, 255, 255];\n    this.nodeOpacity = 0.5;\n    this.nodeOpacitySelected = 0.75;\n    this.linkStrokeWidth = this.props.logoMode ? 3 : 2; // why do lines get blurry when this is increased?\n    this.linkStrokeWidthIncreaseAtMagnitude = this.props.logoMode ? 1.5 : 0;\n\n    // Adjust the symbolHeightMultiplier to make the symbol shorter or taller. A value of 1.0\n    // represents normal height.\n    this.symbolHeightMultiplier = this.props.logoMode ? 1.325 : 1.111111;\n\n    // The initial rotateOffset does two things: it determines which part of the symbol goes in\n    // front (blue is on top in the DFINITY logo), and it makes a small adjustment to align the\n    // colors correctly.\n    this.rotateOffset = this.numSymbolNodes / 2 - 1.2;\n\n    // The rotate interval frequency.\n    this.rotateTimeMs = 33.3; // 30 frames/sec max\n\n    // The amount of rotation for every rotate interval.\n    this.rotateAmount = this.props.logoMode ? 0 : 0.000015;\n\n    // The currently selected node index.\n    this.selectedNodeIndex = -1;\n\n    // New block timer members.\n    this.newBlockNodeStartTime = null;\n    this.newBlockLinksStartTime = null;\n    this.newBlockNodeTimerMs = 1000;\n    this.newBlockLinksTimerMs = 1500;\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Set the value of scaleSimulationToPixi based on the width prop. We scale the force-directed\n    // graph by keeping the d3 simulation as is, since it is finely tuned to appear in a certain\n    // way, and instead scaling coordinates from simulation space to PixiJS space when rendering.\n    // In this way, the graph can be scaled to any width by changing the widths prop. A width prop\n    // of 0 indicates no scaling. Note that drag/drop is not currently implemented when scaling.\n    this.scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n\n    // Draw the DFINITY logo infinity symbol.\n    this.draw();\n  }\n\n  /**\n   * Invoked by React immediately before a component is unmounted and destroyed.\n   * @public\n   */\n  componentWillUnmount() {\n    // Cleanup PixiJS properties.\n    this.renderer.destroy();\n    this.stage.destroy();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @public\n   */\n  componentDidUpdate() {\n    // Make the necessary PixiJS adjustments when the width prop changes.\n    const scaleSimulationToPixi = this.props.width ? this.props.width / this.simulationWidth : 1.0;\n    if (this.scaleSimulationToPixi !== scaleSimulationToPixi) {\n      this.scaleSimulationToPixi = scaleSimulationToPixi;\n\n      // Resize the renderer.\n      this.pixiResizeRenderer();\n\n      // Draw circles for the nodes.\n      if (this.nodesData) {\n        this.nodesData.forEach((node) => { this.pixiDrawNode(node); });\n      }\n    }\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return <div ref={(el) => { this.element = el }}/>;\n  }\n\n  /**\n   * Draw the DFINITY logo infinity symbol.\n   * @public\n   */\n  draw() {\n    // Set up the nodes and links of the graph.\n    this.addNodes();\n    this.addLinks();\n\n    // Create the d3 simulation.\n    this.createSimulation();\n\n    // Set up PixiJS to draw the simulation.\n    this.pixiSetup();\n  }\n\n  /**\n   * Add a new block.\n   * @public\n   */\n  addNewBlock() {\n    // If there is a selected node still animating, stop the animation and return it to normal.\n    if (this.newBlockNodeStartTime) {\n        const node = this.nodesData[this.selectedNodeIndex];\n        this.pixiDrawNode(node);\n    }\n\n    // Select node and enable new block timers.\n    this.selectedNodeIndex = getRandomInt(0, this.numNodes - 1);\n    this.newBlockNodeStartTime = this.newBlockLinksStartTime = new Date();\n  }\n\n  /**\n   * Populate nodesData[] with the nodes of the graph.\n   * @private\n   */\n  addNodes() {\n    // Add the symbol nodes to nodesData[] at fixed positions (fx, fy). _fx and _fy save the fixed\n    // position across drag/drop operations, linkCount is used to calculate the strength of the\n    // force of a link.\n    this.nodesData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      const pos = this.getNodePosition(i);\n      this.nodesData.push({\n        'fx' : pos[0],\n        'fy' : pos[1],\n        '_fx' : pos[0],\n        '_fy' : pos[1],\n        'linkCount' : 0});\n    }\n\n    // Add the non-symbol nodes at non-fixed positions.\n    for (let i = this.numSymbolNodes; i < this.numNodes; i++) {\n      this.nodesData.push({'linkCount' : 0});\n    }\n  }\n\n  /**\n   * Get the position of the node with the specified index.\n   * @param {Number} index The node index.\n   * @return {Array} An array containing the [x, y] position of the node.\n   * @private\n   */\n  getNodePosition(index) {\n    const t =\n      2 * Math.PI * ((index + this.rotateOffset) % this.numSymbolNodes) / this.numSymbolNodes;\n    const scale = 2 / (3 - Math.cos(2 * t));\n    const fx = this.centerX + scale * Math.cos(t) * this.scaleToWindow;\n    const fy =\n      this.centerY +\n      scale * Math.sin(2 * t) * this.symbolHeightMultiplier / 2 * this.scaleToWindow;\n    return [fx, fy];\n  }\n\n  /**\n   * Populate linksData[] with the links of the graph.\n   * @private\n   */\n  addLinks() {\n    this.linksData = [];\n    for (let i = 0; i < this.numSymbolNodes; i++) {   \n      // Define the ith link of the symbol.\n      const indexSymbol = i;\n      const indexSymbolNext = (i + 1) % this.numSymbolNodes;\n      this.addLink(indexSymbol, indexSymbolNext, 0, 1);\n           \n      // Link at top of shape, parallel to symbol link, invisible.\n      const vertexShapeTop = this.numVertices / 2;\n      const indexShapeTop = vertexShapeTop * this.numSymbolNodes + i;\n      const indexShapeTopNext =\n        vertexShapeTop * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;\n      this.addLink(indexShapeTop, indexShapeTopNext, 1, 0);\n      \n      // Cross bar, invisible. This pulls the graph in and provides stability. Rather than linking\n      // the cross bar from the link at top of shape to the symbol index, we link it from the shape\n      // node prior. Found that this produces a more interesting graph. Note that previously this\n      // code was in the for loop below and executed when j === 3, but with the same parameters to\n      // addLink(). This produced a slightly different/thicker graph.\n      const vertexShapeAlmostTop = vertexShapeTop - 1;\n      const indexShapeAlmostTop = vertexShapeAlmostTop * this.numSymbolNodes + i;\n      this.addLink(indexShapeAlmostTop, indexSymbol, 1, 0);\n      \n      for (let j = 0; j < this.numVertices; j++) {     \n        // Define the jth link of the shape (e.g., if numVertices is 6, shape is 6-sided polygon).\n        const index = j * this.numSymbolNodes + i;\n        const indexShapeNext = (index + this.numSymbolNodes) % this.numNodes;\n        this.addLink(index, indexShapeNext, 0, 0.7);\n      \n        // Define the jth link of the spiral which spirals around the shapes. Two spirals are used\n        // for better stability.\n        const indexSpiralNext =\n          (j + 1) % this.numVertices * this.numSymbolNodes + (i + 1) % this.numSymbolNodes;            \n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n        this.addLink(index, indexSpiralNext, 0.65, 0.5);\n      }\n    }\n  }\n\n  /**\n   * Add a link of the graph to linksData[].\n   * @param {Number} indexSource The index of the source node of the link.\n   * @param {Number} indexTarget The index of the target node of the link.\n   * @param {Number} The strength of the link, or 0 for use default strength.\n   * @param {Number} opacity The opacity of the link.\n   * @private\n   */\n  addLink(indexSource, indexTarget, strength, opacity) {\n    this.linksData.push({\n      'source': indexSource.toString(),\n      'target': indexTarget.toString(),\n      '_strength' : strength,\n      'opacity' : opacity,\n      '_opacity' : opacity});\n    this.nodesData[indexSource].linkCount++;\n    this.nodesData[indexTarget].linkCount++;\n  }\n\n  /**\n   * Create the d3 simulation of the force-directed graph. Nodes and links must be added before\n   * calling this function.\n   * @private\n   */\n  createSimulation() {\n    // Create a new simulation containing the nodes.\n    this.simulation = d3.forceSimulation(this.nodesData);\n\n    // Add a charge to each node and a centering force.\n    this.simulation\n      .force('charge', d3.forceManyBody()\n        .strength((d) => {\n          return d.index < this.numSymbolNodes ?\n            this.forceManyBodyStrengthSymbolNodes : this.forceManyBodyStrengthNonSymbolNodes;\n        }))\n      .force('center', d3.forceCenter(this.simulationWidth / 2, this.simulationHeight / 2));\n\n    // Add the links, with the strength of the force of a link optionally specified by the link's\n    // _strength.\n    const link_force =  d3.forceLink(this.linksData)\n      .strength((d) => {\n        return d._strength > 0 ?\n          d._strength :\n          1 / Math.min(d.source.linkCount, d.target.linkCount); // default\n      })\n      .distance(this.linkDistance);        \n      this.simulation.force('links', link_force);\n\n    // Call tick() for every tick.\n    this.simulation.on('tick', this.tick);\n\n    // Set the decay rate to zero to have the simulation run forever at the current alpha.\n    this.simulation.alphaDecay(0);\n\n    // Rotate the symbol using a d3 interval.\n    if (this.rotateAmount)\n      d3.interval(this.rotate, this.rotateTimeMs);\n  }\n\n  /**\n   * Set up PixiJS to draw the simulation using WebGL (with Canvas fallback for older platforms).\n   * @private\n   */\n  pixiSetup() {\n    // Disable PIXI console log message.\n    PIXI.utils.skipHello();\n    \n    // Create PixiJS WebGL renderer element to hold the force-directed graph. We set the resolution\n    // to 3, then auto-resize the window back down to the correct size in order to increase the\n    // resolution. With resolution set to 1, it looks low resolution and pixelated.\n    this.stage = new PIXI.Container();\n    this.renderer = PIXI.autoDetectRenderer(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi,\n      {antialias: true, transparent: true, resolution: 3}\n    );\n    this.renderer.autoResize = true;\n    this.pixiResizeRenderer();\n    this.element.appendChild(this.renderer.view);\n\n    // Draw circles for the nodes.\n    this.nodesData.forEach((node) => {\n      node.graphics = new PIXI.Graphics();\n      this.pixiDrawNode(node);\n      this.stage.addChild(node.graphics);\n    });\n\n    // Set up drag/drop.\n    d3.select(this.renderer.view)\n      .call(d3.drag()\n        .container(this.renderer.view)\n        .subject(() => this.simulation.find(d3.event.x, d3.event.y))\n        .on('start', this.dragStarted)\n        .on('drag', this.dragged)\n        .on('end', this.dragEnded));\n\n    // Set up graphics for the links.\n    this.linksGraphics = new PIXI.Graphics();\n    this.stage.addChild(this.linksGraphics);\n  }\n\n  /**\n   * Resize the PixiJS renderer based on the width and height.\n   * @private\n   */\n   pixiResizeRenderer() {\n    this.renderer.resize(\n      this.simulationWidth * this.scaleSimulationToPixi,\n      this.simulationHeight * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Move the PixiJS position of the specified node.\n   * @param {Object} node The node to move the position of.\n   * @private\n   */\n  pixiMoveNode(node) {\n    let { x, y, graphics } = node;\n    graphics.position =\n      new PIXI.Point(x * this.scaleSimulationToPixi, y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the circle for a node.\n   * @param {Object} node The node to draw the circle for.\n   * @param {Number} selectedNodeMagnitude If this is the currently selected node, indicates the\n   * magnitude percentage (0 - 1.0) of the selection. A value of 0 indicates that this is not the\n   * currently selected node.\n   * @private\n   */\n  pixiDrawNode(node, selectedNodeMagnitude = 0) {\n    let nodeStrokeColor;\n    let nodeFillColor;\n    let nodeOpacity;\n    let nodeRadius;\n    if (selectedNodeMagnitude) {\n      // Scale the node properties based on the magnitude.\n      nodeStrokeColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedStrokeColorArray,\n          this.getNodeStrokeColorArray(node),\n          selectedNodeMagnitude));\n      nodeFillColor = this.rgbNumberFromArray(\n        this.gradientColor(\n          this.nodeSelectedFillColorArray,\n          // DCM 01.mar.2019: Always use same node fill color as stroke color.\n          this.getNodeStrokeColorArray(node),\n          //this.props.logoMode ? this.getNodeStrokeColorArray(node) : this.nodeFillColorArray,\n          selectedNodeMagnitude));\n      nodeOpacity =\n        this.nodeOpacity + (this.nodeOpacitySelected - this.nodeOpacity) * selectedNodeMagnitude;\n      nodeRadius =\n        this.nodeRadius + (this.nodeRadiusSelected - this.nodeRadius) * selectedNodeMagnitude;\n    }\n    else {\n      nodeStrokeColor = this.rgbNumberFromArray(this.getNodeStrokeColorArray(node));\n      // DCM 01.mar.2019: Always use same node fill color as stroke color.\n      nodeFillColor = nodeStrokeColor;\n      //nodeFillColor = this.rgbNumberFromArray(\n      //  this.props.logoMode ?\n      //    this.getNodeStrokeColorArray(node) : this.nodeFillColorArray);\n\n      nodeOpacity = this.nodeOpacity;\n      nodeRadius = this.nodeRadius;\n    }\n\n    node.graphics.clear();\n    node.graphics.lineStyle(\n      this.nodeStrokeWidth * this.scaleSimulationToPixi,\n      nodeStrokeColor,\n      nodeOpacity);\n    node.graphics.beginFill(nodeFillColor, nodeOpacity);\n    if (selectedNodeMagnitude) {\n      node.graphics.filters = [\n        new filters.GlowFilter(\n          5,                          // distance\n          4 * selectedNodeMagnitude,  // outerStrength\n          0,                          // innerStrength\n          nodeStrokeColor,            // color\n          0.5)                        // quality\n      ]\n    }\n    else\n      node.graphics.filters = null;\n    node.graphics.drawCircle(0, 0, nodeRadius * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Use PixiJS to draw the line for a link between nodes.\n   * @param {Object} link The link to draw the line for.\n   * @param {Number} linkMagnitude Indicates the magnitude percentage (0 - 1.0) of the link opacity\n   * boost.\n   * @private\n   */\n  pixiDrawLink(link, linkMagnitude) {\n    let { source, target, opacity } = link;\n    const linkOpacity = opacity + 0.25 * (this.props.logoMode ? 1 : linkMagnitude);\n    this.linksGraphics.alpha = linkOpacity;\n    this.linksGraphics.lineStyle(\n      (this.linkStrokeWidth + this.linkStrokeWidthIncreaseAtMagnitude * linkMagnitude) *\n        this.scaleSimulationToPixi,\n      this.rgbNumberFromArray(this.getColorArray(link.index, this.linksData.length)));\n      this.linksGraphics.moveTo(\n        source.x * this.scaleSimulationToPixi, source.y * this.scaleSimulationToPixi);\n      this.linksGraphics.lineTo(\n        target.x * this.scaleSimulationToPixi, target.y * this.scaleSimulationToPixi);\n  }\n\n  /**\n   * Return the color based on the specified index and number of indices.\n   * @param {Number} index The index to return the color of.\n   * @param {Number} numIndices The total number of indices used to determine the color.\n   * @return {Array} The color arrayof the specified index.\n   * @private\n   */\n  getColorArray(index, numIndices) {\n    // These colors come from the DFINITY logo.\n    const purple = [99,38,132];\n    const pink = [237,30,121];\n    const darkOrange = [241,90,36];\n    const lightOrange = [251,176,59];\n    const blue = [41,171,226];\n\n    // Certain color transitions in the DFINITY logo are small, others are gradual.\n    const transitionPercentSmall = 0.02;\n    const transitionPercentGradual = 0.1;\n    const transitionIndicesSmall = numIndices * transitionPercentSmall;\n    const transitionIndicesGradual = numIndices * transitionPercentGradual;\n\n    // The number of indices of each color was determined by analyzing the DFINITY logo.\n    const lastPurpleIndex = numIndices * 0.15 - transitionIndicesGradual;\n    const lastPinkIndex =\n      lastPurpleIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastDarkOrangeIndex =\n      lastPinkIndex + transitionIndicesSmall + numIndices * 0.15 - transitionIndicesGradual;\n    const lastLightOrangeIndex =\n      lastDarkOrangeIndex + transitionIndicesGradual + numIndices * 0.15 - transitionIndicesSmall;\n    const lastBlueIndex =\n      lastLightOrangeIndex + transitionIndicesSmall + numIndices * 0.4 - transitionIndicesSmall;\n\n    // Determine the color based on the color zone the index is in.\n    if (index <= lastPurpleIndex)\n      return purple;\n    else if (index <= lastPurpleIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastPurpleIndex) / transitionIndicesGradual;\n      return this.gradientColor(pink, purple, percentage);\n    }\n    else if (index <= lastPinkIndex)\n      return pink;\n    else if (index <= lastPinkIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastPinkIndex) / transitionIndicesSmall;\n      return this.gradientColor(darkOrange, pink, percentage);\n    }\n    else if (index <= lastDarkOrangeIndex)\n      return darkOrange;\n    else if (index <= lastDarkOrangeIndex + transitionIndicesGradual)\n    {\n      const percentage = (index - lastDarkOrangeIndex) / transitionIndicesGradual;\n      return this.gradientColor(lightOrange, darkOrange, percentage);\n    }\n    else if (index <= lastLightOrangeIndex)\n      return lightOrange;\n    else if (index <= lastLightOrangeIndex + transitionIndicesSmall)\n    {\n      const percentage = (index - lastLightOrangeIndex) / transitionIndicesSmall;\n      return this.gradientColor(blue, lightOrange, percentage);\n    }     \n    else if (index <= lastBlueIndex)\n      return blue;\n    else\n    {\n      const percentage = (index - lastBlueIndex) / transitionIndicesSmall;\n      return this.gradientColor(purple, blue, percentage);\n    }\n  }\n\n  /**\n   * Return the gradient color based on the specified parameters.\n   * @param {Array} color1 The RGB array of color 1.\n   * @param {Array} color2 The RGB array of color 2.\n   * @param {Number} percent The percentage of the gradient.\n   * @return {Array} The RGB array of the gradient color.\n   * @private\n   */\n  gradientColor(color1, color2, percent) {\n    const p1 = percent;\n    const p2 = 1 - p1;\n    const rgb = [\n      Math.round(color1[0] * p1 + color2[0] * p2),\n      Math.round(color1[1] * p1 + color2[1] * p2),\n      Math.round(color1[2] * p1 + color2[2] * p2)];\n    return rgb;\n  }\n\n  /**\n   * Return the RGB color number corresponding to the specified RGB color array.\n   * @param {Array} array The RGB array.\n   * @return {Number} The RGB color number.\n   * @private\n   */\n  rgbNumberFromArray(array) {\n    let color = 0;\n    array.forEach(element => {\n      color = (color << 8) + element;\n    });\n    return Number(color);\n  }\n\n/**\n   * Return the stroke color of the specified node.\n   * @param {Object} node The node to return the stroke color of.\n   * @return {Array} The stroke color array of the specified node.\n   * @private\n   */\n  getNodeStrokeColorArray(node) {\n    return this.getColorArray(node.index % this.numSymbolNodes, this.numSymbolNodes)\n  }\n\n/**\n   * Start dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragStarted(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0.3).restart();\n    }\n    d3.event.subject.fx = d3.event.subject.x;\n    d3.event.subject.fy = d3.event.subject.y;\n  }\n\n  /**\n   * Continue dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragged(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    d3.event.subject.fx = d3.event.x;\n    d3.event.subject.fy = d3.event.y;\n  }\n\n  /**\n   * Stop dragging a node.\n   * @param {Object} d The node being dragged.\n   * @private\n   */\n  dragEnded(d) {\n    // Disable dragging when scaling.\n    if (this.scaleSimulationToPixi !== 1.0)\n      return;\n\n    const isSimulationRunning = this.simulation.alphaDecay() === 0;\n    if (!isSimulationRunning) {\n      if (!d3.event.active)\n        this.simulation.alphaTarget(0);\n    }\n    d3.event.subject.fx = d3.event.subject._fx;\n    d3.event.subject.fy = d3.event.subject._fy;\n  }\n\n  /**\n   * Update the node and link positions on each tick of the simulation.\n   * @private\n   */\n  tick() {\n    // Move the node positions.\n    this.nodesData.forEach((node) => { this.pixiMoveNode(node); });\n\n    // Animate the selected node to grow larger and change to white, then shrink smaller and change\n    // back to original colors.\n    if (this.newBlockNodeStartTime != null) {\n      const node = this.nodesData[this.selectedNodeIndex];\n      const elapsedMs = new Date() - this.newBlockNodeStartTime;\n      if (elapsedMs > this.newBlockNodeTimerMs) {\n        // Draw a normal node circle.\n        this.pixiDrawNode(node);\n\n        // Disable new block node timer.\n        this.newBlockNodeStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        const selectedNodeMagnitude =\n          (elapsedMs <= this.newBlockNodeTimerMs / 2 ?\n            elapsedMs :\n            this.newBlockNodeTimerMs - elapsedMs) /\n          (this.newBlockNodeTimerMs / 2);\n\n        // Draw a modifified node circle based on the magnitude.\n        this.pixiDrawNode(node, selectedNodeMagnitude);\n      }\n    }\n\n    // Calculate link magnitude.\n    let linkMagnitude = 0;\n    if (this.newBlockLinksStartTime != null) {\n      const elapsedMs = new Date() - this.newBlockLinksStartTime;\n      if (elapsedMs > this.newBlockLinksTimerMs) {\n        // Disable new block links timer.\n        this.newBlockLinksStartTime = null;\n      }\n      else {\n        // Calculate the magnitude based on the timer.\n        linkMagnitude =\n          elapsedMs <= this.newBlockLinksTimerMs / 3 ?\n            elapsedMs / (this.newBlockLinksTimerMs / 3) :\n            (this.newBlockLinksTimerMs - elapsedMs) /\n              (this.newBlockLinksTimerMs * 2 / 3);\n      }\n    }\n\n    // Draw lines for the links.\n    this.linksGraphics.clear();\n    this.linksData.forEach((link) => {\n      this.pixiDrawLink(link, linkMagnitude);\n    });\n    this.linksGraphics.endFill();\n\n    this.renderer.render(this.stage);\n  }\n\n  /**\n   * Rotate the symbol.\n   * @param {Number} elapsed Elapsed time since the timer became active.\n   * @private\n   */\n  rotate(elapsed) {\n    // In order to increase efficiency, it might be possible to decrease the frequency at which we\n    // rotate, then use d3 transition so that the movement is smooth. The problem is, non-symbol\n    // nodes will still be moving based on the simulation, so it's unknown whether this will\n    // actually improve performance. Since it does not seem like d3.interval() can be counted on to\n    // call this function with precision, this may not be a feasible approach, since if you do not\n    // know when the next call will be, you cannot know how long to make the transition.\n    // See webpage \"D3.selectAll(...).transition() Explained\"\n    // (http://bl.ocks.org/Kcnarf/9e4813ba03ef34beac6e)\n\n    for (let i = 0; i < this.numSymbolNodes; i++) {\n      this.rotateOffset += this.rotateAmount;\n      const pos = this.getNodePosition(i);\n      this.nodesData[i].fx = this.nodesData[i]._fx = pos[0];\n      this.nodesData[i].fy = this.nodesData[i]._fy = pos[1];\n    }\n  }\n}\n\nexport default DfinitySymbolD3;\n","/**\n * @file ImageLinkGrid\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Grid\n} from '@material-ui/core';\nimport Fade from 'react-reveal/Fade';\n\n/**\n * This component displays a grid of images that link to other pages.\n */\nclass ImageLinkGrid extends Component {\n  static propTypes = {\n    /**\n     * The className passed in by styled-components when styled(MyComponent) notation is used on\n     * this component.\n     */\n    className: PropTypes.string,\n    /**\n     * An array of objects describing the image links, where each object contains:\n     *  src: The <img> src attribute.\n     *  height: The <img> height attribute.\n     *  alt: The <img> alt attribute.\n     *  href: The <a> href attribute.\n     */    \n    imageLinks: PropTypes.array.isRequired,\n    /**\n     * The Material-UI justify prop to apply to each row.\n     * @see See [Material-UI Grid documentation](https://material-ui.com/api/grid/).\n     */\n    justifyRow: PropTypes.string,\n    /**\n     * The amount of space between rows.\n     */\n    marginBetweenRows: PropTypes.number,\n    /**\n     * The number of images per row.\n     */\n    perRow: PropTypes.number.isRequired\n  };\n\n  /**\n   * Create a ImageLinkGrid object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.state = {widths: [], maxHeight: 0};\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    this.calculateMaxImageDimensions();\n  }\n\n  /**\n   * Invoked by React immediately after updating occurs. This method is not called for the initial\n   * render.\n   * @param {Object} prevProps The previous props.\n   * @public\n   */\n  componentDidUpdate(prevProps) {\n    // Determine whether the props have changed.\n    let arePropsChanged = false;\n    const { imageLinks } = this.props;\n    if (imageLinks.length === prevProps.imageLinks.length) {\n      imageLinks.forEach((imageLink, index) => {\n        if (imageLink.src !== prevProps.imageLinks[index].src ||\n            imageLink.height !== prevProps.imageLinks[index].height)\n          arePropsChanged = true;\n      });\n    }\n    else\n      arePropsChanged = true;\n\n    // Only calculate max image dimensions if props have changed, otherwise we would cause an\n    // infinite loop of updating the state.\n    if (arePropsChanged)\n      this.calculateMaxImageDimensions();\n  }\n  \n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      className,\n      imageLinks,\n      justifyRow,\n      marginBetweenRows,\n      perRow\n    } = this.props;\n    const { widths } = this.state;\n\n    // Make the container slightly taller than the max image height to account for Grid bug where\n    // there are a few pixels of whitespace added under the image. This '+ 4' can be removed once\n    // the Grid bug is fixed.\n    const containerHeight = this.state.maxHeight + 4;\n\n    // The image grid is an array of rows, where each row is an array of image objects. Creating\n    // a two-dimensional array like this is an extra step, but makes the code below more readable.\n    // TODO: Consider an alternate approach to solve the problem of the center column of 3-item rows\n    // not being centered. Use the same maxWidth for all cells. For cells on left, left align. For\n    // cells on right, right align. For all other cells, center. To do this, we'd likely need a cell\n    // within a cell, so that columns could first be centered relative to the column, then placed\n    // in a second wrapper cell (Grid) aligned either left, right, or center. Would need to test\n    // with different row lengths and numbers of images to see what effect it has on spacing for all\n    // conditions. It seems possible this would look wrong for rows longer than 3, since the spacing\n    // at the edges could be greater because the cell within the cell at the edges is not centered.!!!\n    let imageLinkGrid = [];\n    let maxWidthColumn = Array(perRow).fill(0);\n    for (let i = 0; i < imageLinks.length;) {\n      let row = [];\n      const isShortRow = imageLinks.length - i < perRow;\n      for (var j = 0; j < perRow && i < imageLinks.length; j++) {\n        // Do not update maxWidthColumn[j] if this is a short row (last row with fewer columns).\n        if (!isShortRow && widths[i])\n          maxWidthColumn[j] = Math.max(widths[i], maxWidthColumn[j]);\n        row.push(imageLinks[i++]);\n      }\n      imageLinkGrid.push(row);\n    }\n    \n    return (\n      <div className={className}>\n        {imageLinkGrid.map((row, rowIndex) => {\n          const isShortRow = row.length < perRow;\n          return (\n            <Grid container\n              direction='row'\n              // Always set justify='space-around' for a short row (last row with fewer columns).\n              justify={isShortRow ? 'space-around' : (justifyRow || 'space-between')}\n              alignItems='center'\n              key={rowIndex}\n              style={{ marginTop: (rowIndex && marginBetweenRows) ? marginBetweenRows : 0 }}\n            >\n              {row.map((imageLink, columnIndex) => {\n                const index = rowIndex * perRow + columnIndex;\n                return (\n                  <Grid container\n                    direction='column'\n                    justify='center'\n                    alignItems='center'\n                    key={columnIndex}\n                    // Do not use maxWidthColumn[j] if this is a short row (last row with fewer\n                    // columns).\n                    style={{\n                      width: isShortRow ? widths[index] : maxWidthColumn[columnIndex],\n                      height: containerHeight\n                    }}\n                  >\n                    <Grid item>\n                      <a href={imageLink.href} target='_blank' rel='noopener noreferrer'>\n                        <Fade\n                          bottom\n                          delay={index * 50}\n                          timeout={500}\n                        >\n                          <img\n                            src={imageLink.src}\n                            height={imageLink.height}\n                            alt={imageLink.alt}>\n                          </img>\n                        </Fade>\n                      </a>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /**\n   * Calculate the maximum width and height of all images by loading the images. This allows us to\n   * create Grid containers for the images which are all the same size. An image will be\n   * horizontally and vertically centered in its container.\n   * @private\n   */\n  calculateMaxImageDimensions() {\n    const { imageLinks } = this.props;\n    this.setState({\n      widths: Array(imageLinks.length).fill(0),\n      maxHeight: 0\n    });\n\n    // Calculate the widths[] and maxHeight of the images by loading them.\n    imageLinks.forEach((imageLink, index) => {\n      const img = new Image();\n      img.onload = event => {\n        const { naturalWidth, naturalHeight } = event.currentTarget;\n        if (naturalHeight) {\n          // Scale width from natural width to image link width.\n          const width = imageLink.height / naturalHeight * naturalWidth;\n          this.setState(prevState => ({\n            widths: [\n              ...prevState.widths.slice(0, index),\n              width,\n              ...prevState.widths.slice(index + 1)\n            ],\n            maxHeight: Math.max(imageLink.height, prevState.maxHeight)\n          }));\n        }\n      }\n      // Setting src after we have set the onload event will cause the event to be triggered after\n      // the image has loaded.\n      img.src = imageLink.src;\n    });\n  }\n}\n\nexport default ImageLinkGrid;\n","/**\n * @file AboutPage\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  Grid,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { Parallax } from 'react-parallax';\nimport Fade from 'react-reveal/Fade';\nimport Flip from 'react-reveal/Flip';\nimport LightSpeed from 'react-reveal/LightSpeed';\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\nimport 'react-coinbase-commerce/dist/coinbase-commerce-button.css';\nimport TrackablePage from '../TrackablePage/TrackablePage';\nimport DfinitySymbolD3 from '../DfinitySymbolD3/DfinitySymbolD3';\nimport ImageLinkGrid from '../ImageLinkGrid/ImageLinkGrid';\nimport { Breakpoints } from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport bannerXHorizon from './banner-x-horizon.png';\nimport dfinityExplorerLogo from './dfinity-explorer-logo-large.png';\nimport dfinityLogoDark from './dfinity-logo-dark-mode.png';\nimport dfinityLogoLight from './dfinity-logo-light-mode.png';\nimport githubOctocat from './github-octocat.png';\nimport materialUiLogo from './material-ui-logo.png';\nimport nomicsLogoDark from './nomics-logo-dark-mode.png';\nimport nomicsLogoLight from './nomics-logo-light-mode.png';\nimport reactLogo from './react-logo-text.png';\nimport styledComponentsLogoDark from './styled-components-logo-dark-mode.png';\nimport styledComponentsLogoLight from './styled-components-logo-light-mode.png';\n\nconst PaperParallax = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorBodyBackground};\n    /* Allows shadow to overlap the element below it. */\n    position: relative;\n  }\n`;\n\nconst GridParallax = styled(Grid)`\n  && {\n    height: 280px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 200px;       \n      `\n    }\n  }\n`;\n\nconst TypographyParallax = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 200;\n    color: ${props => props.theme.colorAboutHeaderText};  \n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};\n      `)\n    }\n  }\n`;\n\nconst GridSection = styled(Grid)`\n  && {\n    padding-top: 96px;\n    padding-bottom: 96px;\n    transition: ${'padding ' + duration.standard + 'ms ' + easing.easeInOut};\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_LG + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_MD + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.SM && `\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_SM + 'px'};\n      `) ||\n      (breakpoint === Breakpoints.XS && `\n        padding-top: 64px;\n        padding-bottom: 64px;\n        padding-left: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n        padding-right: ${Constants.ABOUT_PAGE_MARGIN_XS + 'px'};\n      `)\n    }\n  }\n`;\n\nconst GridSectionPrimary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundPrimary};\n  }\n`;\n\nconst GridSectionSecondary = styled(GridSection)`\n  && {\n    background: ${props => props.theme.colorAboutBackgroundSecondary};\n  }\n`;\n\nconst GridItem = styled(Grid)`\n  && {\n    ${({ breakpoint }) =>\n      ((breakpoint === Breakpoints.XL || breakpoint === Breakpoints.LG) && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_LG/2 + 'px'});\n      `) ||\n      (breakpoint === Breakpoints.MD && `\n        width: calc(50% - ${Constants.ABOUT_PAGE_MARGIN_MD/2 + 'px'});\n      `) ||\n      ((breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        width: 100%;\n      `)\n    }\n  }\n`;\n\nconst GridImageLeft = styled(GridItem)`\n  && {\n    order: 1;\n  }\n`;\n\nconst GridImageRight = styled(GridItem)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 1;\n      `\n    }\n  }\n`;\n\nconst GridSymbolLeft = styled(GridImageLeft)`\n  && {\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-top: -32px;\n        margin-bottom: -32px;     \n      `\n    }\n  }\n`;\n\nconst GridText = styled(GridItem)`\n  && {\n    ${({ breakpoint }) =>\n    (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        margin-top: 48px;\n      `\n    }\n  }\n`;\n\nconst GridTextLeft = styled(GridText)`\n  && {\n    order: 1;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst GridTextRight = styled(GridText)`\n  && {\n    order: 2;\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        order: 2;\n      `\n    }\n  }\n`;\n\nconst TypographyHeading = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_H4};\n    font-weight: 300;\n    color: ${props => props.theme.colorBodyText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: ${Constants.MATERIAL_FONT_SIZE_H5};       \n      `\n    }\n  }\n`;\n\n// From the Material Design documentation: \"The ideal length for legibility of body copy is 40-60\n// characters per line.\"\nconst TypographyBody = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: ${Constants.MATERIAL_FONT_SIZE_BODY_1};\n    line-height: 1.75rem;\n    color: ${props => props.theme.colorBodyTextDim};\n  }\n`;\n\nconst StyledA = styled.a`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n    text-decoration: none;\n    &:hover {\n      cursor: pointer;\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst ImgSection = styled.img`\n  && {\n    max-width: 100%;\n    max-height: 300px;\n  }\n`;\n\nconst SpanHeart = styled.span`\n  && {\n    color: ${props => props.theme.colorBodyTextLink};\n  }\n`;\n\nconst PaperTwitter = styled(Paper)`\n  && {\n    background: ${props => props.theme.colorAboutTwitterBackground};\n    ${({ breakpoint }) =>\n      (breakpoint === Breakpoints.SM || breakpoint === Breakpoints.XS) && `\n        max-width: 640px;\n        margin: auto;\n      `\n    }\n  }\n`;\n\nconst ImageLinkGridThanks = styled(ImageLinkGrid)`\n  && {\n    margin-top: ${Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT/2 + 'px'};\n  }\n`;\n\n/**\n * Component for the about page.\n */\nclass AboutPage extends TrackablePage {\n  static propTypes = {\n    /**\n     * The current Breakpoint, taking the desktop drawer (large screens) width into account.\n     */    \n    breakpoint: PropTypes.number.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired\n  };\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.getHeader()}\n        {this.getSectionMission()}\n        {this.getSectionOpenSource()}\n        {this.getSectionCommunity()}\n        {this.getSectionContributors()}\n        {this.getSectionThanks()}\n      </div>\n    );\n  }\n\n  /**\n   * Return the elements for the header based on the current breakpoint.\n   * @return {Object} The elements for the header based on the current breakpoint.\n   * @private\n   */\n  getHeader()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <PaperParallax elevation={2}>\n        <Fade timeout={1200}>\n          <Parallax bgImage={bannerXHorizon} bgImageAlt='banner' bgImageStyle={{marginTop: '-100px'}} strength={500}>\n            <GridParallax container direction='column' justify='center' alignItems='flex-start' breakpoint={breakpoint}>\n              <Grid item>\n                <TypographyParallax breakpoint={breakpoint}>\n                  An open-source network dashboard\n                  <br />\n                  built by the DFINITY community\n                </TypographyParallax>\n              </Grid>\n            </GridParallax>\n          </Parallax>\n        </Fade>\n      </PaperParallax>\n    );\n  }\n\n  /**\n   * Return the elements for the Mission section based on the current breakpoint.\n   * @return {Object} The elements for the Mission section based on the current breakpoint.\n   * @private\n   */\n  getSectionMission()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridSymbolLeft item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <DfinitySymbolD3\n              width={this.getDfinitySymbolD3Width()}\n              isThemeDark={isThemeDark}\n            />\n          </Grid>\n        </GridSymbolLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Mission\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Our mission is to provide a bridge between you and the '}\n              <StyledA href={Constants.URI_ABOUT_DFINITY} target='_blank' rel='noopener noreferrer'>DFINITY</StyledA>\n              {' Internet Computer, allowing you to easily search for and retrieve information '}\n              {'which is useful in a format that is understandable, with everything you want to '}\n              {'know right at your fingertips.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'DFINITY aims to build their organization into a “NASA for decentralization”. '}\n              {'There have in fact been '}\n              <StyledA href={Constants.URI_NASA_EXPLORER} target='_blank' rel='noopener noreferrer'>89 NASA “Explorer” missions</StyledA>\n              {' since 1958, carrying a wide variety of scientific investigations. We want DFINITY '}\n              {'Explorer to be the perfect vehicle to explore the DFINITY universe.'}\n              &nbsp;&nbsp;🚀\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the elements for the Open Source section based on the current breakpoint.\n   * @return {Object} The elements for the Open Source section based on the current breakpoint.\n   * @private\n   */\n  getSectionOpenSource()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Open, Transparent, Trusted\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is an open-source project under the '}\n              <StyledA href={Constants.URI_GITHUB_MIT_LICENSE} target='_blank' rel='noopener noreferrer'>MIT license</StyledA>\n              {', providing transparency, reliability, and security.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'We believe that all dashboards of public blockchains should be open source. '}\n              {'If you’re going to trust a dashboard to provide timely, accurate, and '}\n              {'uncensored information, the code should be open for all to see.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Flip right timeout={800}>\n              <ImgSection\n                src={dfinityExplorerLogo}\n                alt='logo'>\n              </ImgSection>\n            </Flip>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Community section based on the current breakpoint.\n   * @return {Object} The elements for the Community section based on the current breakpoint.\n   * @private\n   */\n  getSectionCommunity()\n  {\n    const { breakpoint, isThemeDark } = this.props;\n\n    const theme = isThemeDark ? 'dark' : 'light';\n    return (\n      <GridSectionPrimary container direction='row' justify='space-between' alignItems='center' breakpoint={breakpoint}>\n        <GridImageLeft item breakpoint={breakpoint}>\n          <Fade timeout={2000}>\n            {/* Twitter card looks better at elevation 2 than 1, since card/body are same color. */}\n            <PaperTwitter elevation={2} breakpoint={breakpoint}>\n              <TwitterTimelineEmbed\n                sourceType='profile'\n                screenName='dfinityexplorer'\n                theme={theme}\n                options={{height: 432}}\n                // Setting key here is a bit of a hack. Since TwitterTimelineEmbed only uses the theme\n                // prop when it mounts, the TwitterTimelineEmbed theme will not change if the user changes\n                // the theme after the page has loaded. By setting key to the theme string, we can force a\n                // remount of TwitterTimelineEmbed when the theme changes, so that it picks up the change\n                // to its theme prop. \n                key={theme}\n                noFooter\n                transparent\n              />\n            </PaperTwitter>\n          </Fade>\n        </GridImageLeft>\n        <GridTextRight item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Community\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'Follow '}\n              <StyledA href={Constants.URI_TWITTER_DFINITY_EXPLORER} target='_blank' rel='noopener noreferrer'>@dfinityexplorer</StyledA>\n              {' on Twitter to learn about the latest DFINITY-related news, videos, and events.'}\n            </TypographyBody>\n            <br />\n            <TypographyBody>\n              {'Learn more about our project on '}\n              <StyledA href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT} target='_blank' rel='noopener noreferrer'>GitHub</StyledA>\n              {'.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextRight>\n      </GridSectionPrimary>\n    );\n  }\n  \n  /**\n   * Return the elements for the Contributors section based on the current breakpoint.\n   * @return {Object} The elements for the Contributors section based on the current breakpoint.\n   * @private\n   */\n  getSectionContributors()\n  {\n    const { breakpoint } = this.props;\n\n    return (\n      <GridSectionSecondary container\n        direction='row'\n        justify='space-between'\n        alignItems='center'\n        breakpoint={breakpoint}\n      >\n        <GridTextLeft item breakpoint={breakpoint}>\n          <Fade bottom timeout={500}>\n            <TypographyHeading breakpoint={breakpoint}>\n              Contributors\n            </TypographyHeading>\n            <br />\n            <TypographyBody>\n              {'DFINITY Explorer is a cooperative effort, made with '}\n              <SpanHeart>♥</SpanHeart>\n              {' by '}\n              <StyledA href={Constants.URI_GITHUB_DYLAN} target='_blank' rel='noopener noreferrer'>@dylancm4</StyledA>\n              {', '}\n              <StyledA href={Constants.URI_GITHUB_TODD} target='_blank' rel='noopener noreferrer'>@toddkitchens</StyledA>\n              {', and a friendly bunch of '}\n              <StyledA href={Constants.URI_GITHUB_CONTRIBUTORS} target='_blank' rel='noopener noreferrer'>contributors</StyledA>\n              {' from the DFINITY community. We are passionate about DFINITY and we want to build '}\n              {'things to help it to succeed.'}\n            </TypographyBody>\n          </Fade>\n        </GridTextLeft>\n        <GridImageRight item breakpoint={breakpoint}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <LightSpeed right timeout={800}>\n              <ImgSection\n                src={githubOctocat}\n                alt='GitHub Octocat'>\n              </ImgSection>\n            </LightSpeed>\n          </Grid>\n        </GridImageRight>\n      </GridSectionSecondary>\n    );\n  }\n\n  /**\n   * Return the elements for the Thanks section based on the current breakpoint.\n   * @return {Object} The elements for the Thanks section based on the current breakpoint.\n   * @private\n   */\n  getSectionThanks() {\n    // Possibly add: Recharts!!!\n    const { breakpoint, isThemeDark } = this.props;\n    \n    // Adjust heights based on the perceived size of images (i.e., some images contain smaller logos\n    // to make room for the text, so those images need to be enlarged).\n    const reactHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.3;\n    const styledComponentsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.4;\n    const materialUiHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT;\n    const nomicsHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 0.9;\n    const dfinityHeight = Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT * 1.2;\n\n    // Define the image link objects for the ImageLinkGrid.\n    const imageLinks = [\n      {\n        src: reactLogo,\n        height: reactHeight,\n        alt: 'React logo',\n        href: Constants.URI_ABOUT_REACT\n      },\n      {\n        src: isThemeDark ? styledComponentsLogoDark : styledComponentsLogoLight,\n        height: styledComponentsHeight,\n        alt: 'Styled Components logo',\n        href: Constants.URI_ABOUT_STYLED_COMPONENTS\n      },\n      {\n        src: materialUiLogo,\n        height: materialUiHeight,\n        alt: 'Material-UI logo',\n        href: Constants.URI_ABOUT_MATERIAL_UI\n      },\n      {\n        src: isThemeDark ? nomicsLogoDark : nomicsLogoLight,\n        height: nomicsHeight,\n        alt: 'Nomics logo',\n        href: Constants.URI_ABOUT_NOMICS\n      },\n      {\n        src: isThemeDark ? dfinityLogoDark : dfinityLogoLight,\n        height: dfinityHeight,\n        alt: 'DFINITY logo',\n        href: Constants.URI_ABOUT_DFINITY\n      }\n    ];\n\n    // Calculate images per row based on the current breakpoint.\n    let imagesPerRow;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        imagesPerRow = 1;\n        break;\n      case Breakpoints.SM:\n        imagesPerRow = 2;\n        break;\n      default:\n        imagesPerRow = 3;\n        break;\n    }\n\n    return (\n      <GridSectionPrimary container\n        direction='column'\n        justify='flex-start'\n        alignItems='stretch'\n        breakpoint={breakpoint}\n      >\n        <Grid container direction='row' justify='center' alignItems='center'>\n          <Grid item>\n            <Fade bottom timeout={500}>\n              <TypographyHeading breakpoint={breakpoint}>Special thanks to:</TypographyHeading>\n            </Fade>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ImageLinkGridThanks\n            imageLinks={imageLinks}\n            perRow={imagesPerRow}\n            justifyRow={breakpoint === Breakpoints.XS ? 'center' : 'space-between'}\n            marginBetweenRows={Constants.ABOUT_PAGE_PROJECT_ICONS_HEIGHT / 2}\n          />\n        </Grid>\n      </GridSectionPrimary>\n    );\n  }\n\n  /**\n   * Return the width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @return {Number} The width of the DfinitySymbolD3 component based on the current breakpoint.\n   * @private\n   */\n  getDfinitySymbolD3Width() {\n    const { breakpoint, isDesktopDrawerOpen } = this.props;\n    const contentWidth =  window.innerWidth - (isDesktopDrawerOpen ? Constants.DRAWER_WIDTH : 0);\n\n    let width;\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_XS*2;\n        break;\n      case Breakpoints.SM:\n        width = contentWidth - Constants.ABOUT_PAGE_MARGIN_SM*2;\n        break;\n      case Breakpoints.MD:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_MD*3/2;\n        // This is a bit of a hack, but we scale the symbol slightly larger because it does not fill\n        // its window all the way to the edges.\n        width *= 1.2;\n        break;\n      default:\n        width = contentWidth*0.5 - Constants.ABOUT_PAGE_MARGIN_LG*3/2;\n        width *= 1.2;\n        break;\n    }\n    return width;\n  }\n}\n\nexport default AboutPage;\n","/**\n * @file DEAppBar\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport {\n  AppBar,\n  Divider,\n  Drawer,\n  Fade,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  SwipeableDrawer,\n  Toolbar,\n  Typography,\n  Zoom\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport RevealFade from 'react-reveal/Fade';\nimport RevealZoom from 'react-reveal/Zoom';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent'\nimport {\n  Breakpoints,\n  getBreakpoint,\n  isBreakpointLessOrEqualTo,\n  isBreakpointDesktop\n} from '../../utils/breakpoint';\nimport Constants from '../../constants';\nimport dfinityExplorerLogo from './dfinity-explorer-logo.png';\n\nconst StyledAppBar = styled(AppBar)`\n  && {\n    background: ${props => props.theme.colorAppBarBackground};\n    /* AppBar is above Drawer */\n    z-index: ${zIndex.drawer + 1};\n  }\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  && {\n    padding-left: 12px;\n    padding-right: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        padding-left: 4px;\n        padding-right: 4px;\n      `\n    }\n  }\n`;\n\nconst ImgProductIcon = styled.img`\n  && {\n    margin-left: 12px;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 0px;\n      `\n    }\n  }\n`;\n\n// Specify font-size in px rather than rem for app name, since it should not change based on browser\n// settings.\nconst TypographyAppName = styled(Typography)`\n  && {\n    margin-top: 1px;\n    font-family: 'Istok Web', sans-serif;\n    font-weight: bold;\n    font-size: 20px;\n    user-select: none;\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        font-size: 14px;\n      `\n    }\n  }\n`;\n\nconst TypographyDfinity = styled(TypographyAppName)`\n  && {\n    margin-left: 12px;\n    letter-spacing: 12px;\n    color: ${props => props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 8.4px;\n        letter-spacing: 8.4px;\n      `\n    }\n  }\n`;\n\n/**\n * A separate div is used for the border between DFINITY and Explorer, so that it can be\n * animated. The height is based on TypographyAppName font-size, and matches exactly what\n * \"border-right: 1px solid\" in TypographyDfinity would look like.\n */\nconst TypographyBorder = styled.div`\n  && {\n    width: 0px;\n    height: 29px;\n    border-right: ${props => '1px solid ' + props.theme.colorAppBarDfinityText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        height: 20.3px;\n      `\n    }\n  }\n`;\n\nconst TypographyExplorer = styled(TypographyAppName)`\n  && {\n    margin-left: 14px;\n    letter-spacing: 7.5px;\n    color: ${props => props.theme.colorAppBarExplorerText};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: 9.8px;\n        letter-spacing: 5.25px;\n      `\n    }\n  }\n`;\n\nconst StyledIconButton = styled(IconButton)`\n  && {\n    color: ${props => props.theme.colorAppBarTextButton};\n\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorAppBarTextButton};\n      }\n    }\n  }\n`;\n\nconst StyledMenuIcon = styled(MenuIcon)`\n  && {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nconst StyledSwipeableDrawer = styled(({ ...other }) => (\n  <SwipeableDrawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n  }\n`;\n\nconst StyledDrawer = styled(({ ...other }) => (\n  <Drawer {...other} classes={{ paper: 'paper' }} />\n))`\n  & .paper {\n    width: ${Constants.DRAWER_WIDTH + 'px'};\n    background: ${props => props.theme.colorDrawerBackground};\n    border-right:\n      ${props => props.theme.isDark ? `1px solid ${props.theme.colorBodyBackground}` : '0px'};\n  }\n`;\n\nconst StyledDivider = styled(Divider)`\n  && {\n    background: ${props => props.theme.colorDrawerDivider};\n  }\n`;\n\nconst DrawerListItemIcon = styled(ListItemIcon)``;\n\nconst DrawerListItemText = styled(({ ...other }) => (\n  <ListItemText {...other} classes={{ primary: 'primary' }} />\n))``;\n\nconst DrawerListItem = styled(ListItem)`\n  && {\n    padding-top: 9.5px;\n    padding-bottom: 9.5px;\n    ${DrawerListItemIcon} {\n      margin-left: 8px;\n      color: ${\n        props => props.selected ?\n          props.theme.colorDrawerIconTextSelected :\n          props.theme.colorDrawerIcon\n      };\n    }\n    ${DrawerListItemText} {\n      margin-left: -8px;\n      & .primary {\n        font-family: ${Constants.FONT_PRIMARY};\n        font-size: ${Constants.MATERIAL_FONT_SIZE_BUTTON};\n        font-weight: ${props => props.selected ? 600 : 400};\n        color: ${\n          props => props.selected ?\n            props.theme.colorDrawerIconTextSelected :\n            props.theme.colorDrawerText\n        };\n      }\n    }\n  }\n`;\n\n// DCM 2019-02-02: I tried for a few hours to change the \"selected\" background color of a ListItem\n// using styled-components, but I was unsuccessful even though it seems like the code below should\n// work. I was able to change the color using the Material-UI withStyles() technique of styling:\n// https://stackoverflow.com/questions/50371315/how-to-override-material-ui-menuitem-selected-background-color\n// However, that technique does not have access to props, so it would not work well with the way\n// we're currently doing theming. There is likely a way to get this working in a way that does not\n// use styled-components, but the \"selected\" background color is not important enough to spend the\n// time on this issue right now.\n/*const DrawerListItem = styled(({ ...other }) => (\n  <ListItem classes={{ selected: 'selected' }} {...other} />\n))`\n  && {\n    background: pink;\n    &:focus {\n      background: cyan;\n    }\n    &:hover {\n      background: red;\n    }\n    // All of the above colors work, but the \"selected\" background color does not work.\n    & .selected {\n      background: blue !important;\n    }\n  }\n`;*/\n\n/**\n * The App Bar provides content and actions related to the current screen.\n */\nclass DEAppBar extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * Callback fired when the App Bar is resized.\n     */\n    handleAppBarResize: PropTypes.func,\n    /**\n     * Callback fired when the desktop drawer (large screens) menu button is clicked.\n     */\n    handleDesktopDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * Callback fired when the mobile drawer (small screens) menu button is clicked.\n     */\n    handleMobileDrawerMenuClick: PropTypes.func.isRequired,\n    /**\n     * True if the desktop drawer (large screens) is open.\n     */    \n    isDesktopDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * True if the mobile drawer (small screens) is open.\n     */    \n    isMobileDrawerOpen: PropTypes.bool.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired,\n    /**\n     * Reference to the <HashRouter> element.\n     */\n    routerRef: PropTypes.object\n  };\n\n  /**\n   * Create a DEAppBar object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.toolbarDivRef = React.createRef();\n\n    // Bind to make 'this' work in callbacks.\n    this.isActiveRoute = this.isActiveRoute.bind(this);\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    return (\n      <Fragment>\n        {/* Toolbar shim to compensate for AppBar position='fixed'. */}\n        <div ref={this.toolbarDivRef}>\n          <Toolbar />\n        </div>\n        <Fade in={true} timeout={200} mountOnEnter unmountOnExit>\n          <StyledAppBar elevation={2}>\n            {this.getToolbarDefaultContent()}\n          </StyledAppBar>\n        </Fade>\n        {this.getDrawer()}\n      </Fragment>\n    );\n  }\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree).\n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n  }\n\n  /**\n   * Force the component to re-render when the window is resized.\n   * @private\n   */\n  handleWindowResize() {\n    super.handleWindowResize();\n\n    // Pass App Bar height to owner.\n    if (this.props.handleAppBarResize)\n      this.props.handleAppBarResize(this.toolbarDivRef.current.offsetHeight);\n\n    // Close the mobile drawer (small screens) when screen is resized larger, so that it does not\n    // reappear when the screen is resized smaller.\n    if (isBreakpointDesktop() && this.props.isMobileDrawerOpen)\n      this.props.handleMobileDrawerMenuClick();\n  }\n\n  /**\n   * Return the elements for the toolbar based on the current breakpoint.\n   * @return {Object} The elements for the toolbar based on the current breakpoint.\n   * @private\n   */\n  getToolbarDefaultContent() {\n    const breakpoint = getBreakpoint();\n    return (\n      <StyledToolbar breakpoint={breakpoint}>\n        <Grid container alignItems='center' wrap='nowrap'>\n          <Grid item>\n            {this.getMenuButton()}\n          </Grid>\n          {this.getAppTitle()}\n        </Grid>\n      </StyledToolbar>\n    );\n  }\n\n  /**\n   * Return the elements for the menu button on the current breakpoint.\n   * @return {Object} The elements for the menu button based on the current breakpoint.\n   * @private\n   */\n  getMenuButton() {\n    const { handleMobileDrawerMenuClick, handleDesktopDrawerMenuClick } = this.props;\n    return (\n      <Zoom in={true} timeout={300}>\n        <StyledIconButton\n          onClick={\n            isBreakpointDesktop() ? handleDesktopDrawerMenuClick : handleMobileDrawerMenuClick\n          }\n        >\n          <StyledMenuIcon />\n        </StyledIconButton>\n      </Zoom>\n    );\n  }\n\n  /**\n   * Return the elements for the app title based on the current breakpoint.\n   * @return {Object} The elements for the app title based on the current breakpoint.\n   * @private\n   */\n  getAppTitle() {\n    const breakpoint = getBreakpoint();\n    return (\n      <Link\n        style={{ textDecoration: 'none' }}\n        to='/'\n      >\n        <Grid container alignItems='center' justify='flex-start' wrap='nowrap'>\n          <RevealFade timeout={500}>\n            <Grid item>\n              <ImgProductIcon\n                src={dfinityExplorerLogo}\n                height={this.getProductIconHeight()}\n                alt='logo'\n                breakpoint={breakpoint}\n              >\n              </ImgProductIcon>\n            </Grid>\n            <Grid item>\n              <TypographyDfinity breakpoint={breakpoint}>DFINITY</TypographyDfinity>\n            </Grid>\n            <RevealZoom timeout={350}>\n              <Grid item>\n                <TypographyBorder breakpoint={breakpoint} />\n              </Grid>\n            </RevealZoom>\n            <Grid item>\n              <TypographyExplorer breakpoint={breakpoint}>ExpIorer</TypographyExplorer>\n            </Grid>\n          </RevealFade>\n        </Grid>\n      </Link>\n    );\n  }\n\n  /**\n   * Return the height of the product icon based on the current breakpoint.\n   * @return {Number} The height of the product icon based on the current breakpoint.\n   * @private\n   */\n  getProductIconHeight() {\n    if (isBreakpointLessOrEqualTo(Breakpoints.XS))\n      return 23.8;\n    else\n      return 34;\n  }\n\n  /**\n   * Return the elements for the drawer based on the current breakpoint.\n   * @return {Object} The elements for the drawer based on the current breakpoint.\n   * @private\n   */\n  getDrawer() {\n    // The Material Design documentation states: \"Modal drawer: In a responsive layout grid, at a\n    // defined minimum breakpoint of at least 600dp width, a standard drawer should be replaced with\n    // a modal drawer.\" We use a modal drawer for breakpoints xs and sm (i.e., up to 960px).\n    if (isBreakpointDesktop()) {\n      return (\n        <StyledDrawer variant='persistent' open={this.props.isDesktopDrawerOpen}>\n          {this.getDrawerContent()}\n        </StyledDrawer>\n      );\n    }\n    else {\n      return (\n        <StyledSwipeableDrawer\n          open={this.props.isMobileDrawerOpen}\n          onOpen={this.props.handleMobileDrawerMenuClick}\n          onClose={this.props.handleMobileDrawerMenuClick}\n        >\n          <div onClick={this.props.handleMobileDrawerMenuClick}>\n            {this.getDrawerContent()}\n          </div>\n        </StyledSwipeableDrawer>\n      );\n    }  \n  }\n\n  /**\n   * Return the elements for the drawer content based on the current breakpoint.\n   * @return {Object} The elements for the drawer content based on the current breakpoint.\n   * @private\n   */\n  getDrawerContent() {\n    /* Use constants for paths such as 'about' everywhere in code!!! */\n    return (\n      <Fragment>\n        {/* Shim to compensate for AppBar position='fixed'. */}\n        <Toolbar/>\n        <List>\n          {/* Could change this to be more generic by calling map() on an array of route objects\n              which contain info such as: path, menu text, and icon.\n              See: https://stackoverflow.com/questions/50801093/material-ui-drawer-selection-how-to-route\n          */}\n          <DrawerListItem button component={Link} to='/' selected={this.isActiveRoute('/')}>\n            <DrawerListItemIcon>\n              <HomeIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='Home' selected={this.isActiveRoute('/')} />\n          </DrawerListItem>\n          <StyledDivider />\n          <DrawerListItem button component={Link} to='/about' selected={this.isActiveRoute('/about')}>\n            <DrawerListItemIcon>\n              <InfoIcon />\n            </DrawerListItemIcon>\n            <DrawerListItemText primary='About' />\n          </DrawerListItem>\n        </List>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Return true if the specified route matches the current route, false otherwise.\n   * @param {String} routeName The name of the route to check.\n   * @return {Boolean} True if the specified route matches the current route, false otherwise.\n   * @private\n   */\n  isActiveRoute(routeName) {\n    return this.props.location.pathname === routeName;\n  }\n};\n\nexport default withRouter(DEAppBar);","/**\n * @file Footer\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport styled from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Checkbox,\n  Grid,\n  Icon,\n  IconButton,\n  SvgIcon,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport ResponsiveComponent from '../ResponsiveComponent/ResponsiveComponent';\nimport { Breakpoints, getBreakpoint } from '../../utils/breakpoint';\nimport Constants from '../../constants';\n\nconst FooterToolbar = styled(Toolbar)`\n  && {\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: ${Constants.FOOTER_HEIGHT + 'px'};\n    padding-left: 0px;\n    padding-right: 0px;\n    text-align: center;\n    background: ${props => props.theme.colorFooterBackground};\n    color: ${props => props.theme.colorFooterTextIcon};\n  }\n`;\n\nconst OneThirdGrid = styled(Grid)`\n  && {\n    width: 33.33%;\n  }\n`;\n\nconst LeftThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-left: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-left: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst RightThirdGrid = styled(OneThirdGrid)`\n  && {\n    margin-right: ${Constants.FOOTER_MARGIN_SM_AND_UP + 'px'};\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        margin-right: ${Constants.FOOTER_MARGIN_XS + 'px'};\n      `\n    }\n  }\n`;\n\nconst FooterTypography = styled(Typography)`\n  && {\n    font-family: ${Constants.FONT_PRIMARY};\n    font-size: 12px;\n  }\n`;\n\nconst FooterA = styled.a`\n  && {\n    color: ${props => props.theme.colorFooterTextIcon};\n    text-decoration: underline;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst AwesomeIconButtonGrid = styled(Grid)`\n  && {\n    // Look into why this is needed!!!\n    ${({ breakpoint }) =>\n      breakpoint === Breakpoints.XS && `\n        min-width: 35px;\n      `\n    }\n  }\n`;\n\nconst AwesomeIconButton = styled(IconButton)`\n  && {\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: inherit;\n      }\n    }\n  }\n`;\n\nconst AwesomeIcon = styled(Icon)`\n  && {\n    font-size: 20px;\n  }\n`;\n\nconst ThemeCheckbox = styled(Checkbox)`\n  && {\n    width: 26px;\n    height: 26px;\n    color: ${props => props.theme.colorFooterTextIcon};\n    &:hover {\n      background: ${props => fade(props.theme.colorIconButtonHover, props.theme.opacityActionHover)};\n      color: ${props => props.theme.colorIconButtonHover};\n      /* Reset on touch devices. */\n      @media (hover: none) {\n        background: inherit;\n        color: ${props => props.theme.colorFooterTextIcon};\n      }\n    }\n  }\n`;\n\nconst ThemeSvgIcon = styled(SvgIcon)`\n  && {\n    margin-top: -1px;\n    font-size: 17px;\n  }\n`;\n\n/**\n * The Footer provides information related to the current screen.\n */\nclass Footer extends ResponsiveComponent {\n  static propTypes = {\n    /**\n     * True is the theme is dark, false if the theme is light.\n     */\n    isThemeDark: PropTypes.bool.isRequired,\n    /**\n     * Callback fired when the value of the theme checkbox changes.\n     */    \n    handleThemeChange: PropTypes.func.isRequired,\n    /**\n     * Object containing information about the current react-router location.\n     */\n    location: PropTypes.object.isRequired\n  };\n\n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    super.componentDidMount();\n\n    loadCSS(Constants.URI_CDN_FONT_AWESOME, document.querySelector('#insertion-point-jss'));\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const breakpoint = getBreakpoint();\n    return (\n      <FooterToolbar>\n        <LeftThirdGrid\n          container\n          direction='row'\n          justify='flex-start'\n          alignItems='center'\n          breakpoint={breakpoint}\n        >\n          <Grid item>\n            <FooterTypography color='inherit'>\n              {this.getCopyrightText()}\n            </FooterTypography>\n          </Grid>\n        </LeftThirdGrid>\n        <OneThirdGrid container direction='column' justify='center' alignItems='center'>\n          { this.props.location.pathname === '/' &&\n            <Grid item>\n              <FooterTypography color='inherit'>\n                {'('}\n                <FooterA href={Constants.URI_ABOUT_NOMICS} target='_blank' rel='noopener noreferrer'>\n                  {this.getNomicsText()}\n                </FooterA>\n                {')'}\n              </FooterTypography>\n            </Grid>\n          }\n        </OneThirdGrid>\n        <RightThirdGrid\n          container direction='row'\n          justify='flex-end'\n          alignItems='center'\n          wrap='nowrap'\n          breakpoint={breakpoint}\n        >\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_TWITTER_DFINITY_EXPLORER}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-twitter' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <AwesomeIconButton\n              color='inherit'\n              href={Constants.URI_GITHUB_DFINITY_EXPLORER_PROJECT}\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <AwesomeIcon className='fa fa-github' />\n            </AwesomeIconButton>\n          </AwesomeIconButtonGrid>\n          <AwesomeIconButtonGrid item breakpoint={breakpoint}>\n            <ThemeCheckbox\n              color='default'\n              checked={this.props.isThemeDark}\n              icon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_LIGHT} />\n                </ThemeSvgIcon>\n              }\n              checkedIcon={\n                <ThemeSvgIcon>\n                  <path d={Constants.ICON_SVG_PATH_THEME_DARK} />\n                </ThemeSvgIcon>\n              }\n              onChange={this.props.handleThemeChange}\n            />\n          </AwesomeIconButtonGrid>\n        </RightThirdGrid>\n      </FooterToolbar>\n    );\n  }\n\n  /**\n   * Return the copyright text.\n   * @return {String} the copyright text.\n   * @private\n   */\n   getCopyrightText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return '© 2021 dfinityexplorer';\n      case Breakpoints.SM:\n        return '© 2021 dfinityexplorer contributors';\n      default:\n        return '© 2021 dfinityexplorer contributors | All rights reserved';\n    }\n  }\n\n  /**\n   * Return the Nomics attribution link text.\n   * @return {String} The Nomics attribution link text.\n   * @private\n   */\n  getNomicsText() {\n    const breakpoint = getBreakpoint();\n    switch (breakpoint) {\n      case Breakpoints.XS:\n        return 'Pricing Data By Nomics';\n      default:\n        return 'Crypto Market Cap & Pricing Data Provided By Nomics';\n    }\n  }\n};\n\nexport default withRouter(Footer);\n","/**\n * @file App\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, an dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React, { Component, Fragment } from 'react';\nimport {\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport ReactGA from 'react-ga';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { loadCSS } from 'fg-loadcss';\nimport {\n  Grid\n} from '@material-ui/core';\nimport { duration, easing } from '@material-ui/core/styles/transitions';\nimport { GlobalStyle, themeLight, themeDark } from './theme/globalStyle';\nimport HomePage from './Components/HomePage/HomePage';\nimport AboutPage from './Components/AboutPage/AboutPage';\nimport DEAppBar from './Components/DEAppBar/DEAppBar';\nimport Footer from './Components/Footer/Footer';\nimport Constants from './constants';\nimport { getBreakpoint, isBreakpointDesktop } from './utils/breakpoint';\n\n// Initialize the react-ga library. We do not need user consent to be GDPR compliant. According to\n// Google: \"When using Google Analytics Advertising Features, you must also comply with the European\n// Union User Consent Policy.\" Advertising Features are not enabled for DFINITY Explorer. Under the\n// GDPR, an IP address is considered Personally Identifiable Information (PII), so we anonymize the\n// IP addresses sent to Google Analytics.\nReactGA.initialize(Constants.GOOGLE_ANALYTICS_TRACKING_ID);\nReactGA.set({ anonymizeIp: true });\n\nconst ContentDiv = styled.div`\n  && {\n    margin-left: ${props => props.isDesktopDrawerOpen ? Constants.DRAWER_WIDTH + 'px' : '0px'};\n    transition: ${props =>\n      'margin-left ' +\n      (props.isDesktopDrawerOpen ? duration.enteringScreen : duration.leavingScreen) +\n      'ms ' +\n      easing.easeInOut};\n  }\n`;\n\nconst ContentGrid = styled(Grid)`\n  && {\n    /* The height of the body + footer is the total viewport height - App Bar height. */\n    min-height: calc(100vh - ${props => props.appbarheight + 'px'});\n`;\n\n/**\n * Top-level component of the app.\n */\nclass App extends Component {\n  /**\n   * Create an App object.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      routerRef: null,\n      appBarHeight: 0,\n      isDesktopDrawerEnabled: true,\n      isMobileDrawerOpen: false,\n      isThemeDark: true\n    };\n\n    // Bind to make 'this' work in callbacks.\n    this.setRouterRef = this.setRouterRef.bind(this);\n    this.handleAppBarResize = this.handleAppBarResize.bind(this);\n    this.handleDesktopDrawerMenuClick = this.handleDesktopDrawerMenuClick.bind(this);\n    this.handleMobileDrawerMenuClick = this.handleMobileDrawerMenuClick.bind(this);\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n  }\n  \n  /**\n   * Invoked by React immediately after a component is mounted (inserted into the tree). \n   * @public\n   */\n  componentDidMount() {\n    // Load fonts.\n    loadCSS(\n      Constants.URI_CDN_GOOGLE_FONTS,\n      document.querySelector('#insertion-point-jss')\n    );\n  }\n\n  /**\n   * Return a reference to a React element to render into the DOM.\n   * @return {Object} A reference to a React element to render into the DOM.\n   * @public\n   */\n  render() {\n    const {\n      appBarHeight,\n      isDesktopDrawerEnabled,\n      isMobileDrawerOpen,\n      isThemeDark,\n      routerRef\n    } = this.state;\n\n    const isDesktopDrawerOpen = isDesktopDrawerEnabled && isBreakpointDesktop();\n    const breakpoint = getBreakpoint(isDesktopDrawerOpen);\n\n    return (\n      <Fragment>\n        <GlobalStyle theme={this.getTheme()} />\n        <ThemeProvider theme={this.getTheme()}>\n          <HashRouter ref={this.setRouterRef}>\n            <div>\n              <DEAppBar\n                handleAppBarResize={this.handleAppBarResize}\n                handleDesktopDrawerMenuClick={this.handleDesktopDrawerMenuClick}\n                handleMobileDrawerMenuClick={this.handleMobileDrawerMenuClick}\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                routerRef={routerRef}\n              />\n              <ContentDiv\n                isDesktopDrawerOpen={isDesktopDrawerOpen}\n                isMobileDrawerOpen={isMobileDrawerOpen}\n                /* Workaround to force react-parallax to update when drawer opens/closes. Perhaps */\n                /* file an issue with react-parallax that Parallax does not update when */\n                /* margin-left changes. */\n                onTransitionEnd={() => window.dispatchEvent(new Event('resize'))}\n              >\n                <ContentGrid\n                  container\n                  direction='column'\n                  justify='space-between'\n                  appbarheight={appBarHeight}\n                >                 \n                  <Route\n                    exact path='/'\n                    render={(props) => \n                      <HomePage\n                        {...props}\n                        breakpoint={breakpoint}\n                      />\n                    }\n                  />\n                  <Route\n                    exact path='/about'\n                    render={(props) => \n                      <AboutPage\n                        {...props}\n                        breakpoint={breakpoint}\n                        isDesktopDrawerOpen={isDesktopDrawerOpen}\n                        isThemeDark={isThemeDark}\n                      />\n                    }\n                  />\n                  <Footer                  \n                    handleThemeChange={this.handleThemeChange}\n                    isThemeDark={isThemeDark}\n                  />\n                </ContentGrid>\n              </ContentDiv>\n            </div>\n          </HashRouter>\n        </ThemeProvider>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Set a reference to the HashRouter element.\n   * @public\n   */\n  setRouterRef(element) {\n    this.setState({ routerRef: element });\n  };\n\n  /**\n   * Callback fired when the App Bar is resized.\n   * @private\n   */\n  handleAppBarResize(height) {\n    this.setState({\n      appBarHeight: height\n    });\n  }\n\n  /**\n   * Callback fired when the desktop drawer (large screens) menu button is clicked.\n   * @private\n   */\n  handleDesktopDrawerMenuClick(contentRect) {\n    this.setState({\n      isDesktopDrawerEnabled: !this.state.isDesktopDrawerEnabled\n    });\n  }\n\n  /**\n   * Callback fired when the mobile drawer (small screens) menu button is clicked.\n   * @private\n   */\n  handleMobileDrawerMenuClick(contentRect) {\n    this.setState({\n      isMobileDrawerOpen: !this.state.isMobileDrawerOpen\n    });\n  }\n\n  /**\n   * Callback fired when the value of the Footer component theme checkbox changes.\n   * @param {Object} event The event source of the callback.\n   * @param {Number} checked The checked value of the switch.\n   * @public\n   */\n  handleThemeChange(event, checked) {\n    this.setState({\n      isThemeDark: checked\n    });\n  }\n\n  /**\n   * Return the current theme.\n   * @return {Object} The current theme.\n   * @private\n   */\n  getTheme() {\n    return this.state.isThemeDark ? themeDark : themeLight;\n  }\n}\n\nexport default App;\n","/**\n * @file index\n * @copyright Copyright (c) 2018-2021 Dylan Miller, Todd Kitchens, and dfinityexplorer contributors\n * @license MIT License\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\ndocument.getElementById(\"root\"));\n"],"sourceRoot":""}